import random

from cl_data.src.constants import PretrainTasks
from cl_data.src.random_value_generator import RandomValueGenerator
from cl_data.src.utility import Utility


def get_batch_sixteen_example_paragraph():
    binary = "".join(
        random.choice(["0", "1"]) for _ in range(random.randint(1, 10))
    )
    vector1_list = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 10), -10, 100
    )
    vector2_list = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 10), -10, 100
    )
    vector1 = lst_str = ", ".join(str(num) for num in vector1_list)
    vector2 = ", ".join(str(num) for num in vector2_list)

    x = RandomValueGenerator.generate_random_float(-10.0, 100.0)
    y = random.uniform(1, x)
    strings = [
        "".join(
            random.choices("abcdefghijklmnopqrstuvwxyz", k=random.randint(1, 10))
        )
        for _ in range(2)
    ]

    str1 = strings[0]
    str2 = strings[1]
    radius = random.uniform(1.0, 50.0)
    n = random.randint(2, 30)
    r = random.randint(1, n)
    angle = random.uniform(0.0, 360.0)
    decimal = random.randint(1, 1000)
    examples = [
        [
            f"The decimal equivalent of the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"binary_to_decimal('{binary}') = ##binary_to_decimal('{binary}",
            f"The result of converting the binary number '{binary}' to decimal = ##binary_to_decimal('{binary}",
            f"Calculation: binary_to_decimal('{binary}') = ##binary_to_decimal('{binary}",
            f"The decimal representation obtained by converting the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The outcome of converting the binary number '{binary}' to its decimal equivalent = ##binary_to_decimal('{binary}",
            f"The decimal value of the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The result of transforming the binary number '{binary}' into decimal form = ##binary_to_decimal('{binary}",
            f"The computed result of converting the binary number '{binary}' to decimal = ##binary_to_decimal('{binary}",
            f"The decimal value obtained by converting the binary number '{binary}' to decimal = ##binary_to_decimal('{binary}",
            f"The decimal number obtained from the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The outcome of evaluating binary_to_decimal('{binary}') = ##binary_to_decimal('{binary}",
            f"The decimal value calculated from the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The result of evaluating binary_to_decimal('{binary}') = ##binary_to_decimal('{binary}",
            f"The decimal number represented by the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The computed decimal value of the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The decimal equivalent obtained by converting the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The result derived from converting the binary number '{binary}' into decimal = ##binary_to_decimal('{binary}",
            f"The calculated outcome of evaluating binary_to_decimal('{binary}') = ##binary_to_decimal('{binary}",
            f"The decimal value corresponding to the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The computed decimal result of binary_to_decimal('{binary}') = ##binary_to_decimal('{binary}",
            f"The calculated decimal representation of the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The decimal value calculated by converting the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The result obtained by converting the binary number '{binary}' to decimal = ##binary_to_decimal('{binary}",
            f"The computed decimal equivalent of the binary number '{binary}' = ##binary_to_decimal('{binary}",
            f"The calculated decimal value obtained from the binary number '{binary}' = ##binary_to_decimal('{binary}",
        ],
        [
            f"Calculating the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The result of calculating the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The scalar product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The result obtained by computing the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The dot product value of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The computed result of calculating the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The dot product of the given vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The outcome of determining the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The numerical value of the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The dot product value of the vectors {vector1} and {vector2} is = ##calculate_dot_product({vector1}, {vector2})",
            f"The scalar multiplication result of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The value of the dot product of the vectors {vector1} and {vector2} is = ##calculate_dot_product({vector1}, {vector2})",
            f"The computed dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The calculated result of calculating the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The dot product of the vectors {vector1} and {vector2} equals = ##calculate_dot_product({vector1}, {vector2})",
            f"The computed value of the dot product of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
            f"The outcome of calculating the dot product value of the vectors {vector1} and {vector2} = ##calculate_dot_product({vector1}, {vector2})",
        ],
        [
            f"The smallest integer greater than or equal to {x} = ##ceil({x})",
            f"ceil({x}) = ##ceil({x})",
            f"The smallest whole number that is not less than {x} = ##ceil({x})",
            f"Calculation: ceil({x}) = ##ceil({x})",
            f"The integer immediately above {x} = ##ceil({x})",
            f"The smallest integer that is equal to or larger than {x} = ##ceil({x})",
            f"The smallest integer that is not smaller than {x} = ##ceil({x})",
            f"The smallest integer greater than {x} = ##ceil({x})",
            f"The smallest integer larger than or equal to {x} = ##ceil({x})",
            f"The smallest integer that is not less than {x} is = ##ceil({x})",
            f"The next higher integer after {x} = ##ceil({x})",
            f"The smallest integer equal to or greater than {x} = ##ceil({x})",
            f"The smallest integer larger than {x} is = ##ceil({x})",
            f"The smallest integer greater than or equal to the input value {x} = ##ceil({x})",
            f"The integer just above {x} = ##ceil({x})",
            f"The smallest whole number greater than or equal to {x} = ##ceil({x})",
            f"The smallest integer not less than {x} = ##ceil({x})",
            f"The smallest integer larger than or equal to the value {x} = ##ceil({x})",
            f"The next integer greater than or equal to {x} = ##ceil({x})",
            f"The integer that is equal to or larger than {x} = ##ceil({x})",
            f"The smallest integer that is not smaller than {x} is = ##ceil({x})",
            f"The smallest integer immediately above {x} = ##ceil({x})",
            f"The smallest integer greater than {x} is = ##ceil({x})",
            f"The smallest integer that is greater than or equal to {x} = ##ceil({x})",
            f"The smallest integer that is at least {x} = ##ceil({x})",
            f"The ceil value of {x} is = ##ceil({x})",
            f"The result of calculating ceil({x}) is = ##ceil({x})",
            f"The next integer above {x} = ##ceil({x})",
        ],
        [
            f"Checking if the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
            f"check_same_string('{str1}', '{str2}') = ##check_same_string('{str1}', '{str2}",
            f"Determining if the strings '{str1}' and '{str2}' are equal = ##check_same_string('{str1}', '{str2}",
            f"Calculation: check_same_string('{str1}', '{str2}') = ##check_same_string('{str1}', '{str2}",
            f"Comparing the equality of the strings '{str1}' and '{str2}' = ##check_same_string('{str1}', '{str2}",
            f"Checking whether the strings '{str1}' and '{str2}' are identical = ##check_same_string('{str1}', '{str2}",
            f"Checking if the strings '{str1}' and '{str2}' have the same content = ##check_same_string('{str1}', '{str2}",
            f"Determining whether the strings '{str1}' and '{str2}' are equal = ##check_same_string('{str1}', '{str2}",
            f"The result of evaluating if the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
            f"Checking if the strings '{str1}' and '{str2}' match = ##check_same_string('{str1}', '{str2}",
            f"The outcome of evaluating check_same_string('{str1}', '{str2}') = ##check_same_string('{str1}', '{str2}",
            f"Checking if the strings '{str1}' and '{str2}' are identical = ##check_same_string('{str1}', '{str2}",
            f"Checking whether the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
            f"Determining if the strings '{str1}' and '{str2}' have the same value = ##check_same_string('{str1}', '{str2}",
            f"The result of determining if the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
            f"The outcome of checking if the strings '{str1}' and '{str2}' are equal = ##check_same_string('{str1}', '{str2}",
            f"Verifying whether the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
            f"Checking if the strings '{str1}' and '{str2}' are equal = ##check_same_string('{str1}', '{str2}",
            f"The result of comparing the strings '{str1}' and '{str2}' for equality = ##check_same_string('{str1}', '{str2}",
            f"The outcome of evaluating check_same_string('{str1}', '{str2}') = ##check_same_string('{str1}', '{str2}",
            f"Determining if the strings '{str1}' and '{str2}' are equal = ##check_same_string('{str1}', '{str2}",
            f"Checking whether the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
            f"Verifying if the strings '{str1}' and '{str2}' are identical = ##check_same_string('{str1}', '{str2}",
            f"The result obtained by evaluating check_same_string('{str1}', '{str2}') = ##check_same_string('{str1}', '{str2}",
            f"The result of checking if the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}",
        ],
        [
            f"The area of a circle with radius {radius} = ##circle_area({radius})",
            f"circle_area({radius}) = ##circle_area({radius})",
            f"The result of calculating the area of a circle with radius {radius} = ##circle_area({radius})",
            f"Calculation: circle_area({radius}) = ##circle_area({radius})",
            f"The area enclosed by a circle with radius {radius} = ##circle_area({radius})",
            f"The outcome of finding the area of a circle with radius {radius} = ##circle_area({radius})",
            f"The region covered by a circle with radius {radius} = ##circle_area({radius})",
            f"The result of determining the circle area with radius {radius} = ##circle_area({radius})",
            f"The computed result of calculating the area of a circle with radius {radius} = ##circle_area({radius})",
            f"The space inside a circle with radius {radius} = ##circle_area({radius})",
            f"The outcome of evaluating circle_area({radius}) = ##circle_area({radius})",
            f"The value obtained by finding the area of a circle with radius {radius} = ##circle_area({radius})",
            f"The result of evaluating circle_area({radius}) = ##circle_area({radius})",
            f"The region bounded by a circle with radius {radius} = ##circle_area({radius})",
            f"The computed area of a circle with radius {radius} = ##circle_area({radius})",
            f"The region surrounded by a circle with radius {radius} = ##circle_area({radius})",
            f"The calculated result of determining the circle area with radius {radius} = ##circle_area({radius})",
            f"The area covered by a circle with radius {radius} = ##circle_area({radius})",
            f"The result obtained from calculating the area of a circle with radius {radius} = ##circle_area({radius})",
            f"The computed circle area with radius {radius} = ##circle_area({radius})",
            f"The area within the boundary of a circle with radius {radius} = ##circle_area({radius})",
            f"The calculated outcome of evaluating circle_area({radius}) = ##circle_area({radius})",
            f"The space enclosed by a circle with radius {radius} = ##circle_area({radius})",
            f"The computed circle area value for a circle with radius {radius} = ##circle_area({radius})",
            f"The calculated area of a circle with radius {radius} = ##circle_area({radius})",
        ],
        [
            f"The number of combinations of {r} items taken from a set of {n} items = ##combination({n}, {r})",
            f"combination({n}, {r}) = ##combination({n}, {r})",
            f"The result of calculating the combinations of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"Calculation: combination({n}, {r}) = ##combination({n}, {r})",
            f"The count of possible selections of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The outcome of finding the number of combinations of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The total ways to choose {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The result of determining the combinations of {r} items chosen from {n} items = ##combination({n}, {r})",
            f"The computed result of calculating the combinations of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The number of possible groups of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The outcome of evaluating combination({n}, {r}) = ##combination({n}, {r})",
            f"The value obtained by calculating the combinations of {r} items from {n} items = ##combination({n}, {r})",
            f"The result of evaluating combination({n}, {r}) = ##combination({n}, {r})",
            f"The count of selections of {r} items picked from a set of {n} items = ##combination({n}, {r})",
            f"The computed number of combinations of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The total possible choices of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The calculated result of determining the combinations of {r} items chosen from {n} items = ##combination({n}, {r})",
            f"The number of ways to choose {r} items out of {n} items = ##combination({n}, {r})",
            f"The result obtained from calculating the combinations of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The computed combination count of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The number of distinct selections of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The calculated outcome of evaluating combination({n}, {r}) = ##combination({n}, {r})",
            f"The total combinations of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The computed combination value of {r} items from a set of {n} items = ##combination({n}, {r})",
            f"The calculated count of combinations of {r} items chosen from {n} items = ##combination({n}, {r})",
        ],
        [
            f"The cosine of {angle} degrees = ##cosine({angle})",
            f"cos({angle} °) = ##cosine({angle})",
            f"The result of taking the cosine of {angle} degrees = ##cosine({angle})",
            f"Calculation: cos({angle} °) = ##cosine({angle})",
            f"The cosine value of {angle} ° is = ##cosine({angle})",
            f"The value of cos({angle} °) = ##cosine({angle})",
            f"The trigonometric cosine function applied to {angle} ° = ##cosine({angle})",
            f"The cosine of {angle} ° equals? = ##cosine({angle})",
            f"The ratio of the length of the adjacent side to the hypotenuse = ##cosine({angle})",
            f"The cosine of the angle {angle} ° = ##cosine({angle})",
            f"The cosine function output for {angle} ° = ##cosine({angle})",
            f"The cosine of {angle} degrees is = ##cosine({angle})",
        ],
        [
            f"The cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"cosine_similarity({vector1}, {vector2}) = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The result of calculating the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"Calculation: cosine_similarity({vector1}, {vector2}) = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The cosine similarity value between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The outcome of finding the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The similarity measure of the vectors {vector1} and {vector2} using cosine similarity = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The result of determining the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The computed result of calculating the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The cosine similarity score between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The outcome of evaluating cosine_similarity({vector1}, {vector2}) = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The value obtained by calculating the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The result of evaluating cosine_similarity({vector1}, {vector2}) = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The similarity value between the vectors {vector1} and {vector2} using cosine similarity = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The computed cosine similarity value between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The cosine similarity score of the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The calculated result of determining the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The cosine similarity coefficient between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The result obtained from calculating the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The computed similarity measure of the vectors {vector1} and {vector2} using cosine similarity = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The similarity index between the vectors {vector1} and {vector2} using cosine similarity = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The cosine similarity value between the vectors {vector1} and {vector2} is = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The result derived from calculating the cosine similarity between the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The computed cosine similarity coefficient of the vectors {vector1} and {vector2} = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The cosine similarity value obtained by evaluating cosine_similarity({vector1}, {vector2}) = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The calculated outcome of evaluating cosine_similarity({vector1}, {vector2}) = ##cosine_similarity({vector1_list}, {vector2_list})",
            f"The computed similarity index between the vectors {vector1} and {vector2} using cosine similarity = ##cosine_similarity({vector1_list}, {vector2_list})",
        ],
        [
            f"The cube of the number {x} = ##cube({x})",
            f"cube({x}) = ##cube({x})",
            f"The result of cubing {x} = ##cube({x})",
            f"Calculation: cube({x}) = ##cube({x})",
            f"The value obtained by raising {x} to the power of 3 = ##cube({x})",
            f"The outcome of calculating the cube of {x} = ##cube({x})",
            f"The cubed value of {x} = ##cube({x})",
            f"The result of cubing the number {x} = ##cube({x})",
            f"The computed result of cubing {x} = ##cube({x})",
            f"The value of {x} cubed = ##cube({x})",
            f"The product of {x} raised to the power of 3 = ##cube({x})",
            f"The cubed result of the number {x} = ##cube({x})",
            f"The outcome of finding the cube of {x} = ##cube({x})",
            f"The computed value of cube({x}) is = ##cube({x})",
            f"The value obtained by raising {x} to the power of 3 is = ##cube({x})",
            f"The result of evaluating the cube of {x} is = ##cube({x})",
            f"The computed result of {x} cubed is = ##cube({x})",
            f"The calculated value of raising {x} to the power of 3 is = ##cube({x})",
            f"The outcome of finding the cubed value of {x} is = ##cube({x})",
            f"The value obtained by raising {x} to the power of 3 is = ##cube({x})",
            f"The result of {x} raised to the power of 3 is = ##cube({x})",
            f"The outcome of evaluating cube({x}) is = ##cube({x})",
            f"The value of {x} cubed is = ##cube({x})",
            f"The computed outcome of cubing {x} is = ##cube({x})",
            f"The calculated result of {x} raised to the power of 3 is = ##cube({x})",
            f"The cubed value of {x} is = ##cube({x})",
            f"The result of cubing the number {x} is = ##cube({x})",
        ],
        [
            f"The cube root of the number {x} = ##cube_root({x})",
            f"cube_root({x}) = ##cube_root({x})",
            f"The result of finding the cube root of {x} = ##cube_root({x})",
            f"Calculation: cube_root({x}) = ##cube_root({x})",
            f"The value obtained by taking the cube root of {x} = ##cube_root({x})",
            f"The outcome of calculating the cube root of {x} = ##cube_root({x})",
            f"The cube root value of {x} = ##cube_root({x})",
            f"The result of finding the cube root of the number {x} = ##cube_root({x})",
            f"The computed result of finding the cube root of {x} = ##cube_root({x})",
            f"The value of {x} under the cube root = ##cube_root({x})",
            f"The cube root of the quantity {x} = ##cube_root({x})",
            f"The cube root result of the number {x} = ##cube_root({x})",
            f"The outcome of evaluating cube_root({x}) = ##cube_root({x})",
            f"The value calculated by taking the cube root of {x} is = ##cube_root({x})",
            f"The result of evaluating the cube root of {x} is = ##cube_root({x})",
            f"The value of the number {x} under the cube root is = ##cube_root({x})",
            f"The computed cube root of {x} is = ##cube_root({x})",
            f"The calculated value of the cube root of {x} is = ##cube_root({x})",
            f"The outcome of finding the cube root value of {x} is = ##cube_root({x})",
            f"The value obtained by finding the cube root of {x} is = ##cube_root({x})",
            f"The result of taking the cube root of {x} is = ##cube_root({x})",
            f"The computed outcome of evaluating cube_root({x}) is = ##cube_root({x})",
            f"The value of {x} under the cube root is = ##cube_root({x})",
            f"The computed value of cube_root({x}) is = ##cube_root({x})",
            f"The calculated result of finding the cube root of {x} is = ##cube_root({x})",
            f"The cube root value of {x} is = ##cube_root({x})",
            f"The result of finding the cube root of the number {x} is = ##cube_root({x})",
        ],
        [
            f"The binary representation of the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"decimal_to_binary({decimal}) = ##decimal_to_binary({decimal})",
            f"The result of converting the decimal number {decimal} to binary = ##decimal_to_binary({decimal})",
            f"Calculation: decimal_to_binary({decimal}) = ##decimal_to_binary({decimal})",
            f"The binary number obtained by converting the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The outcome of converting the decimal number {decimal} to its binary representation = ##decimal_to_binary({decimal})",
            f"The binary value of the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The result of transforming the decimal number {decimal} into binary form = ##decimal_to_binary({decimal})",
            f"The computed result of converting the decimal number {decimal} to binary = ##decimal_to_binary({decimal})",
            f"The binary number obtained from the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The outcome of evaluating decimal_to_binary({decimal}) = ##decimal_to_binary({decimal})",
            f"The binary value calculated from the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The result of evaluating decimal_to_binary({decimal}) = ##decimal_to_binary({decimal})",
            f"The binary number represented by the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The computed binary value of the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The binary representation obtained by converting the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The result derived from converting the decimal number {decimal} into binary = ##decimal_to_binary({decimal})",
            f"The calculated outcome of evaluating decimal_to_binary({decimal}) = ##decimal_to_binary({decimal})",
            f"The binary value corresponding to the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The computed binary result of decimal_to_binary({decimal}) = ##decimal_to_binary({decimal})",
            f"The calculated binary representation of the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The binary value calculated by converting the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The result obtained by converting the decimal number {decimal} to binary = ##decimal_to_binary({decimal})",
            f"The computed binary equivalent of the decimal number {decimal} = ##decimal_to_binary({decimal})",
            f"The calculated binary value obtained from the decimal number {decimal} = ##decimal_to_binary({decimal})",
        ],
        [
            f"Convert {angle} degrees to radians = ##degrees_to_radians({angle})",
            f"degrees_to_radians({angle}) = ##degrees_to_radians({angle})",
            f"The value of {angle} degrees in radians = ##degrees_to_radians({angle})",
            f"Calculation: degrees_to_radians({angle}) = ##degrees_to_radians({angle})",
            f"The equivalent radians for {angle} degrees = ##degrees_to_radians({angle})",
            f"Converting {angle} degrees to radians = ##degrees_to_radians({angle})",
            f"The radian measure for {angle} degrees = ##degrees_to_radians({angle})",
            f"The radian value corresponding to {angle} degrees = ##degrees_to_radians({angle})",
            f"The angle conversion from degrees to radians for {angle} = ##degrees_to_radians({angle})",
            f"The value of radians after converting {angle} degrees = ##degrees_to_radians({angle})",
            f"The result of converting {angle} degrees to radians = ##degrees_to_radians({angle})",
            f"The radian measure for the input angle {angle} = ##degrees_to_radians({angle})",
            f"The radian value for the angle {angle} degrees = ##degrees_to_radians({angle})",
            f"The angle {angle} degrees in radians = ##degrees_to_radians({angle})",
            f"The equivalent radian value for {angle} degrees = ##degrees_to_radians({angle})",
            f"The radian equivalent of {angle} degrees = ##degrees_to_radians({angle})",
            f"The radian measurement for the angle {angle} = ##degrees_to_radians({angle})",
            f"The angle in radians corresponding to {angle} degrees = ##degrees_to_radians({angle})",
            f"The radian value for the input angle of {angle} degrees = ##degrees_to_radians({angle})",
            f"The radian representation of {angle} degrees = ##degrees_to_radians({angle})",
            f"The radian value of {angle} degrees = ##degrees_to_radians({angle})",
            f"The value of radians after converting {angle} degrees is = ##degrees_to_radians({angle})",
            f"The radian equivalent for the angle {angle} degrees = ##degrees_to_radians({angle})",
            f"The result of converting {angle} degrees to radians is = ##degrees_to_radians({angle})",
        ],
        [
            f"The list {lst_str} sorted in descending order = ##descending_sort({vector1_list})",
            f"descending_sort({lst_str}) = ##descending_sort({vector1_list})",
            f"The sorted version of the list {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"Calculation: descending_sort({lst_str}) = ##descending_sort({vector1_list})",
            f"The list {lst_str} arranged in decreasing order = ##descending_sort({vector1_list})",
            f"The outcome of sorting the elements in the list {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The result of arranging the numbers in {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The list {lst_str} organized in descending sequence = ##descending_sort({vector1_list})",
            f"The sorted list of numbers {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The list {lst_str} sorted from greatest to least = ##descending_sort({vector1_list})",
            f"The result of sorting the elements of the list {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The computed result of sorting {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The result of evaluating descending_sort({lst_str}) = ##descending_sort({vector1_list})",
            f"The ordered sequence of numbers in the list {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The outcome of arranging the elements {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The list {lst_str} in decreasing order is = ##descending_sort({vector1_list})",
            f"The list {lst_str} sorted in non-increasing order = ##descending_sort({vector1_list})",
            f"The sorted form of the list {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The value of descending_sort({lst_str}) is = ##descending_sort({vector1_list})",
            f"The outcome of sorting the list {lst_str} in descending order is = ##descending_sort({vector1_list})",
            f"The ordered arrangement of the numbers in the list {lst_str} in descending order = ##descending_sort({vector1_list})",
            f"The sorted list of {lst_str} in descending order is = ##descending_sort({vector1_list})",
            f"The computed sorted list of {lst_str} in descending order is = ##descending_sort({vector1_list})",
            f"The ordered sequence obtained from sorting the list {lst_str} in descending order is = ##descending_sort({vector1_list})",
            f"The descending sorted list of {lst_str} is = ##descending_sort({vector1_list})",
            f"The ordered form of the list {lst_str} in descending order is = ##descending_sort({vector1_list})",
            f"The result of sorting the list {lst_str} in descending order is = ##descending_sort({vector1_list})",
        ],
        [
            f"Dividing {x} by {y} = ##division({x},{y})",
            f"{x} / {y} = ##division({x},{y})",
            f"The result of dividing {x} by {y} = ##division({x},{y})",
            f"{x} divided by {y} equals? = ##division({x},{y})",
            f"Calculation: {x} / {y} = ##division({x},{y})",
            f"{x} divided by {y} = ##division({x},{y})",
            f"{x} over {y} = ##division({x},{y})",
            f"The quotient of {x} and {y} = ##division({x},{y})",
            f"{x} / {y} = = ##division({x},{y})",
            f"{x} divided by {y} gives = ##division({x},{y})",
            f"{x} over {y} is = ##division({x},{y})",
            f"{x} divided by {y} results in = ##division({x},{y})",
        ],
        [
            f"The Euler's totient function value for the integer {n} = ##euler_totient({n})",
            f"euler_totient({n}) = ##euler_totient({n})",
            f"The result of calculating Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"Calculation: euler_totient({n}) = ##euler_totient({n})",
            f"The value of Euler's totient function for the number {n} = ##euler_totient({n})",
            f"The outcome of finding the value of Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"The phi value of the integer {n} using Euler's totient function = ##euler_totient({n})",
            f"The result of determining Euler's totient function value for the integer {n} = ##euler_totient({n})",
            f"The computed result of calculating Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"The Euler's totient coefficient for the integer {n} = ##euler_totient({n})",
            f"The outcome of evaluating euler_totient({n}) = ##euler_totient({n})",
            f"The value obtained by calculating Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"The result of evaluating euler_totient({n}) = ##euler_totient({n})",
            f"The totient value of the integer {n} using Euler's totient function = ##euler_totient({n})",
            f"The computed Euler's totient function value of the integer {n} = ##euler_totient({n})",
            f"The Euler's totient coefficient of the integer {n} = ##euler_totient({n})",
            f"The calculated result of determining Euler's totient function value for the integer {n} = ##euler_totient({n})",
            f"The phi coefficient of the integer {n} using Euler's totient function = ##euler_totient({n})",
            f"The result obtained from calculating Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"The computed value of Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"The Euler's totient value for the number {n} is = ##euler_totient({n})",
            f"The result derived from calculating Euler's totient function for the integer {n} = ##euler_totient({n})",
            f"The computed phi value of the integer {n} using Euler's totient function = ##euler_totient({n})",
            f"The Euler's totient value obtained by evaluating euler_totient({n}) = ##euler_totient({n})",
            f"The calculated outcome of evaluating euler_totient({n}) = ##euler_totient({n})",
            f"The computed totient value of the integer {n} using Euler's totient function = ##euler_totient({n})",
        ],
        [
            f"{x} raised to the power of {y} = ##exponentiation({x},{y})",
            f"{x} ^ ({y}) = ##exponentiation({x},{y})",
            f"The result of {x} raised to the power of {y} = ##exponentiation({x},{y})",
            f"Calculation: {x} ^ {y} = ##exponentiation({x},{y})",
            f"{x} raised to {y} = ##exponentiation({x},{y})",
            f"{x} raised to the {y}th power = ##exponentiation({x},{y})",
            f"The value of {x} ^ ({y}) = ##exponentiation({x},{y})",
            f"{x} to the power of {y} is = ##exponentiation({x},{y})",
            f"{x} raised to the exponent {y} = ##exponentiation({x},{y})",
            f"{x} ^ ({y}) equals? = ##exponentiation({x},{y})",
            f"{x} raised to the {y} power = ##exponentiation({x},{y})",
            f"{x} to the {y} exponent = ##exponentiation({x},{y})",
            f"The exponentiation of {x} and {y} = ##exponentiation({x},{y})",
        ],
        [
            f"The factorial of {n} = ##factorial({n})",
            f"factorial({n}) = ##factorial({n})",
            f"The product of all positive integers up to {n} = ##factorial({n})",
            f"Calculation: factorial({n}) = ##factorial({n})",
            f"The value obtained by multiplying all integers from 1 to {n} = ##factorial({n})",
            f"The outcome of multiplying all numbers from 1 to {n} = ##factorial({n})",
            f"The result of the product of numbers from 1 to {n} = ##factorial({n})",
            f"The factorial value of {n} = ##factorial({n})",
            f"The total of multiplying integers from 1 to {n} = ##factorial({n})",
            f"The value of {n} factorial = ##factorial({n})",
            f"The computed result of {n}! = ##factorial({n})",
            f"The result of calculating the factorial of {n} = ##factorial({n})",
            f"The value achieved by multiplying numbers from 1 to {n} = ##factorial({n})",
            f"The product of all positive integers less than or equal to {n} = ##factorial({n})",
            f"The outcome of multiplying all positive integers from 1 to {n} = ##factorial({n})",
            f"The product of integers from 1 to {n} is = ##factorial({n})",
            f"The total of multiplying all numbers from 1 to {n} is = ##factorial({n})",
            f"The computed result of factorial({n}) is = ##factorial({n})",
            f"The outcome of the product of all numbers from 1 to {n} is = ##factorial({n})",
            f"The factorial of the integer {n} is = ##factorial({n})",
            f"The value of the factorial of {n} is = ##factorial({n})",
            f"The product of all integers from 1 to {n} is = ##factorial({n})",
            f"The value obtained by multiplying all positive integers from 1 to {n} = ##factorial({n})",
            f"The calculated result of {n} factorial is = ##factorial({n})",
            f"The outcome of calculating factorial({n}) is = ##factorial({n})",
        ],
        [
            f"The integer part of the floating-point number {x} = ##float_to_int({x})",
            f"float_to_int({x}) = ##float_to_int({x})",
            f"The result of converting the floating-point value {x} to an integer = ##float_to_int({x})",
            f"Calculation: float_to_int({x}) = ##float_to_int({x})",
            f"The whole number portion of the float {x} = ##float_to_int({x})",
            f"The outcome of truncating the decimal part of the floating-point number {x} = ##float_to_int({x})",
            f"The integer that represents the floor value of the float {x} = ##float_to_int({x})",
            f"The result of rounding down the floating-point number {x} to an integer = ##float_to_int({x})",
            f"The computed result of converting the float {x} to an integer = ##float_to_int({x})",
            f"The integer obtained by discarding the decimal part of the float {x} = ##float_to_int({x})",
            f"The outcome of evaluating float_to_int({x}) = ##float_to_int({x})",
            f"The integer value obtained by truncating the decimal part of the float {x} = ##float_to_int({x})",
            f"The result of evaluating float_to_int({x}) = ##float_to_int({x})",
            f"The integer that represents the largest integer less than or equal to the float {x} = ##float_to_int({x})",
            f"The computed integer value of the float {x} = ##float_to_int({x})",
            f"The integer obtained by removing the decimal part of the floating-point value {x} = ##float_to_int({x})",
            f"The calculated result of converting the float {x} to an integer = ##float_to_int({x})",
            f"The integer part of the number {x} is = ##float_to_int({x})",
            f"The result derived from truncating the decimal part of the float {x} = ##float_to_int({x})",
            f"The computed integer part of the floating-point number {x} = ##float_to_int({x})",
            f"The integer obtained by rounding down the float {x} = ##float_to_int({x})",
            f"The integer obtained from truncating the decimal part of the float {x} = ##float_to_int({x})",
            f"The calculated outcome of evaluating float_to_int({x}) = ##float_to_int({x})",
            f"The integer value that corresponds to the floor value of the float {x} = ##float_to_int({x})",
            f"The calculated integer part of the floating-point number {x} = ##float_to_int({x})",
            f"The calculated integer obtained by truncating the decimal part of the float {x} = ##float_to_int({x})",
        ],
        [
            f"The floor division of {n} by {r} = ##floor_division({n},{r})",
            f"{n} // {r} = ##floor_division({n},{r})",
            f"The result of floor dividing {n} by {r} = ##floor_division({n},{r})",
            f"{n} divided by {r} using floor division = ##floor_division({n},{r})",
            f"Calculation: {n} // {r} = ##floor_division({n},{r})",
            f"The floor quotient of {n} and {r} = ##floor_division({n},{r})",
            f"{n} floor divided by {r} = ##floor_division({n},{r})",
            f"{n} divided by {r} using the floor division operator = ##floor_division({n},{r})",
            f"The integer division result of {n} by {r} = ##floor_division({n},{r})",
            f"{n} // {r} equals? = ##floor_division({n},{r})",
            f"{n} divided by {r} using floor division gives = ##floor_division({n},{r})",
            f"The largest integer quotient of {n} and {r} = ##floor_division({n},{r})",
            f"The floor division of {n} and {r} is = ##floor_division({n},{r})",
            f"{n} // {r} is = ##floor_division({n},{r})",
        ],
        [
            f"The largest integer less than or equal to {x} = ##floor({x})",
            f"floor({x}) = ##floor({x})",
            f"The greatest whole number that is not greater than {x} = ##floor({x})",
            f"Calculation: floor({x}) = ##floor({x})",
            f"The integer immediately below {x} = ##floor({x})",
            f"The largest integer that is equal to or smaller than {x} = ##floor({x})",
            f"The largest integer that is not larger than {x} = ##floor({x})",
            f"The largest integer less than {x} = ##floor({x})",
            f"The largest integer smaller than or equal to {x} = ##floor({x})",
            f"The largest integer that is not greater than {x} is = ##floor({x})",
            f"The next lower integer before {x} = ##floor({x})",
            f"The largest integer equal to or smaller than {x} = ##floor({x})",
            f"The largest integer smaller than {x} is = ##floor({x})",
            f"The largest integer less than or equal to the input value {x} = ##floor({x})",
            f"The integer just below {x} = ##floor({x})",
            f"The greatest whole number less than or equal to {x} = ##floor({x})",
            f"The largest integer not greater than {x} = ##floor({x})",
            f"The largest integer smaller than or equal to the value {x} = ##floor({x})",
            f"The previous integer less than or equal to {x} = ##floor({x})",
            f"The integer that is equal to or smaller than {x} = ##floor({x})",
            f"The largest integer that is not larger than {x} is = ##floor({x})",
            f"The largest integer immediately below {x} = ##floor({x})",
            f"The largest integer less than {x} is = ##floor({x})",
            f"The largest integer that is less than or equal to {x} = ##floor({x})",
            f"The largest integer that is at most {x} = ##floor({x})",
            f"The floor value of {x} is = ##floor({x})",
            f"The result of calculating floor({x}) is = ##floor({x})",
            f"The previous integer below {x} = ##floor({x})",
        ],
        [
            f"The greatest common divisor of {n} and {r} = ##gcd({n}, {r})",
            f"gcd({n}, {r}) = ##gcd({n}, {r})",
            f"The largest number that divides both {n} and {r} = ##gcd({n}, {r})",
            f"Calculation: gcd({n}, {r}) = ##gcd({n}, {r})",
            f"The highest common factor of {n} and {r} = ##gcd({n}, {r})",
            f"The greatest common factor of {n} and {r} = ##gcd({n}, {r})",
            f"The greatest common divisor for the numbers {n} and {r} = ##gcd({n}, {r})",
            f"The result of calculating the greatest common divisor for {n} and {r} = ##gcd({n}, {r})",
            f"The greatest number that divides {n} and {r} = ##gcd({n}, {r})",
            f"The common divisor of {n} and {r} with the highest value = ##gcd({n}, {r})",
            f"The largest divisor shared by {n} and {r} = ##gcd({n}, {r})",
            f"The greatest common divisor of the integers {n} and {r} = ##gcd({n}, {r})",
            f"The maximum factor that divides both {n} and {r} = ##gcd({n}, {r})",
            f"The greatest divisor that divides both {n} and {r} = ##gcd({n}, {r})",
            f"The greatest number that can divide both {n} and {r} = ##gcd({n}, {r})",
            f"The highest value divisor that divides {n} and {r} = ##gcd({n}, {r})",
            f"The largest number that can evenly divide both {n} and {r} = ##gcd({n}, {r})",
            f"The common factor of {n} and {r} with the highest value = ##gcd({n}, {r})",
            f"The greatest shared divisor of {n} and {r} = ##gcd({n}, {r})",
            f"The highest factor that divides both {n} and {r} = ##gcd({n}, {r})",
            f"The largest common factor for the numbers {n} and {r} = ##gcd({n}, {r})",
            f"The highest number that divides both {n} and {r} evenly = ##gcd({n}, {r})",
            f"The greatest common divisor for {n} and {r} is = ##gcd({n}, {r})",
            f"The result of calculating gcd({n}, {r}) is = ##gcd({n}, {r})",
            f"The maximum common divisor of {n} and {r} is = ##gcd({n}, {r})",
            f"The greatest common divisor for the integers {n} and {r} is = ##gcd({n}, {r})",
            f"The largest factor that divides both {n} and {r} evenly = ##gcd({n}, {r})",
            f"The highest shared divisor of {n} and {r} is = ##gcd({n}, {r})",
        ],
        [
            f"The geometric mean of the numbers in the list {lst_str} = ##geometric_mean({vector1_list})",
            f"geometric_mean({lst_str}) = ##geometric_mean({vector1_list})",
            f"The result of calculating the geometric mean of {lst_str} = ##geometric_mean({vector1_list})",
            f"Calculation: geometric_mean({lst_str}) = ##geometric_mean({vector1_list})",
            f"The mean value obtained by using the geometric mean formula for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The outcome of finding the geometric mean of the provided numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The geometric mean value of the numbers in the list {lst_str} = ##geometric_mean({vector1_list})",
            f"The mean value calculated using the geometric mean approach for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The computed result of determining the geometric mean of the values {lst_str} = ##geometric_mean({vector1_list})",
            f"The mean value derived using the geometric mean formula for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The average value obtained by using the geometric mean method for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The outcome of evaluating geometric_mean({lst_str}) = ##geometric_mean({vector1_list})",
            f"The value calculated by finding the geometric mean of the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The result of evaluating geometric_mean({lst_str}) = ##geometric_mean({vector1_list})",
            f"The value obtained by applying the geometric mean formula to the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The computed geometric mean value of the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The mean value obtained through the geometric mean formula for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The result derived from calculating the geometric mean of the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The calculated outcome of evaluating geometric_mean({lst_str}) = ##geometric_mean({vector1_list})",
            f"The average value of the numbers calculated using geometric_mean for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The computed value of the geometric mean of the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The calculated result of determining the geometric mean of the provided values {lst_str} = ##geometric_mean({vector1_list})",
            f"The mean value derived from the geometric mean of the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The value obtained through the geometric mean calculation for the numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The result obtained by finding the geometric mean of the provided numbers {lst_str} = ##geometric_mean({vector1_list})",
            f"The computed mean value of the numbers using the geometric mean formula for the numbers {lst_str} = ##geometric_mean({vector1_list})",
        ],
        [
            f"The sum of a geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"geometric_series_sum({x}, {y}, {n}) = ##geometric_series_sum({x}, {y}, {n})",
            f"The result of calculating the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"Calculation: geometric_series_sum({x}, {y}, {n}) = ##geometric_series_sum({x}, {y}, {n})",
            f"The total sum of a geometric sequence with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The outcome of finding the sum of a geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The cumulative value of a geometric progression with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The result of determining the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The computed result of calculating the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The summation of a geometric progression with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The outcome of evaluating geometric_series_sum({x}, {y}, {n}) = ##geometric_series_sum({x}, {y}, {n})",
            f"The value obtained by calculating the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The result of evaluating geometric_series_sum({x}, {y}, {n}) = ##geometric_series_sum({x}, {y}, {n})",
            f"The total accumulation of a geometric sequence with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The computed sum of the geometric progression with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The overall sum of a geometric sequence with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The calculated result of determining the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The cumulative total of a geometric sequence with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The result obtained from calculating the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The computed summation of a geometric sequence with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The summation value of the geometric progression with initial term {x}, ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The calculated outcome of evaluating geometric_series_sum({x}, {y}, {n}) = ##geometric_series_sum({x}, {y}, {n})",
            f"The cumulative result of a geometric sequence with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The calculated sum of the geometric progression with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
            f"The calculated value of the sum of the geometric series with initial term {x}, common ratio {y}, and {n} terms = ##geometric_series_sum({x}, {y}, {n})",
        ],
        [
            "The mathematical constant e = ##get_e()",
            "get_e() = ##get_e()",
            "The value of e = ##get_e()",
            "Calculation: get_e() = ##get_e()",
            "The base of the natural logarithm = ##get_e()",
            "The outcome of evaluating get_e() = ##get_e()",
            "The well-known constant representing the base of the natural logarithm = ##get_e()",
            "The result of obtaining the value of e = ##get_e()",
            "The computed result of evaluating get_e() = ##get_e()",
            "The constant e used in calculus and mathematics = ##get_e()",
            "The outcome of calculating the value of e = ##get_e()",
            "The value of the mathematical constant representing the base of the natural logarithm = ##get_e()",
            "The numerical value of the constant e = ##get_e()",
            "The result of evaluating get_e() = ##get_e()",
            "The value of e approximated as = ##get_e()",
            "The result derived from evaluating get_e() = ##get_e()",
            "The well-known constant used to represent the base of the natural logarithm = ##get_e()",
            "The value of the constant e is = ##get_e()",
            "The computed value of e used in mathematics = ##get_e()",
            "The result of determining the value of e = ##get_e()",
            "The calculated result of get_e() is = ##get_e()",
            "The well-known mathematical constant representing the base of the natural logarithm = ##get_e()",
            "The numerical approximation of the constant e = ##get_e()",
            "The value of e is commonly approximated as = ##get_e()",
            "The calculated value of the mathematical constant e = ##get_e()",
            "The constant e is approximately = ##get_e()",
            "The value of e rounded to = ##get_e()",
            "The calculated value of e is = ##get_e()",
            "The outcome of evaluating get_e() is = ##get_e()",
            "The outcome of calculating the constant e = ##get_e()",
            "The outcome of evaluating get_e() is = ##get_e()",
        ],
        [
            "The mathematical constant pi (π) = ##get_pi()",
            "get_pi() = ##get_pi()",
            "The value of pi (π) = ##get_pi()",
            "Calculation: get_pi() = ##get_pi()",
            "The ratio of a circle's circumference to its diameter = ##get_pi()",
            "The outcome of evaluating get_pi() = ##get_pi()",
            "The well-known constant representing the circle's ratio of circumference to diameter = ##get_pi()",
            "The result of obtaining the value of pi (π) = ##get_pi()",
            "The computed result of evaluating get_pi() = ##get_pi()",
            "The constant pi (π) used in geometry and mathematics = ##get_pi()",
            "The outcome of calculating the value of pi (π) = ##get_pi()",
            "The value of the mathematical constant representing the circle's ratio = ##get_pi()",
            "The numerical value of the constant pi (π) = ##get_pi()",
            "The result of evaluating get_pi() = ##get_pi()",
            "The value of pi (π) approximated as = ##get_pi()",
            "The result derived from evaluating get_pi() = ##get_pi()",
            "The well-known constant used to represent the ratio of a circle's circumference to its diameter = ##get_pi()",
            "The value of the constant pi (π) is = ##get_pi()",
            "The computed value of pi (π) used in mathematics = ##get_pi()",
            "The result of determining the value of pi (π) = ##get_pi()",
            "The calculated result of get_pi() is = ##get_pi()",
            "The well-known mathematical constant representing the ratio of a circle's circumference to its diameter = ##get_pi()",
            "The numerical approximation of the constant pi (π) = ##get_pi()",
            "The value of pi (π) is commonly approximated as = ##get_pi()",
            "The calculated value of the mathematical constant pi (π) = ##get_pi()",
            "The constant pi (π) is approximately = ##get_pi()",
            "The value of pi (π) rounded to = ##get_pi()",
            "The calculated value of pi (π) is = ##get_pi()",
            "The outcome of evaluating get_pi() is = ##get_pi()",
            "The outcome of calculating the constant pi (π) = ##get_pi()",
            "The outcome of evaluating get_pi() is = ##get_pi()",
        ],
        [
            f"The greater of {x} and {y} = ##greatest_value({x}, {y})",
            f"greatest_value({x}, {y}) = ##greatest_value({x}, {y})",
            f"The larger value between {x} and {y} = ##greatest_value({x}, {y})",
            f"Calculation: greatest_value({x}, {y}) = ##greatest_value({x}, {y})",
            f"The higher of the two numbers {x} and {y} = ##greatest_value({x}, {y})",
            f"The maximum value between {x} and {y} = ##greatest_value({x}, {y})",
            f"The greater number among {x} and {y} = ##greatest_value({x}, {y})",
            f"The result of selecting the larger value from {x} and {y} = ##greatest_value({x}, {y})",
            f"The more significant value of {x} and {y} = ##greatest_value({x}, {y})",
            f"The outcome of comparing {x} and {y} and selecting the greater = ##greatest_value({x}, {y})",
            f"The larger value among {x} and {y} = ##greatest_value({x}, {y})",
            f"The number that is greater between {x} and {y} = ##greatest_value({x}, {y})",
            f"The greater value of the two numbers {x} and {y} = ##greatest_value({x}, {y})",
            f"The maximum of the numbers {x} and {y} = ##greatest_value({x}, {y})",
            f"The larger of the values {x} and {y} = ##greatest_value({x}, {y})",
            f"The result of picking the larger value from {x} and {y} = ##greatest_value({x}, {y})",
            f"The higher value between {x} and {y} = ##greatest_value({x}, {y})",
            f"The greater of the two values {x} and {y} = ##greatest_value({x}, {y})",
            f"The greater value of the pair {x} and {y} = ##greatest_value({x}, {y})",
            f"The outcome of choosing the larger number from {x} and {y} = ##greatest_value({x}, {y})",
            f"The larger value in the pair {x} and {y} = ##greatest_value({x}, {y})",
            f"The result of finding the maximum value between {x} and {y} = ##greatest_value({x}, {y})",
            f"The greater of the two inputs {x} and {y} = ##greatest_value({x}, {y})",
            f"The more substantial value among {x} and {y} = ##greatest_value({x}, {y})",
            f"The result of evaluating greatest_value({x}, {y}) is = ##greatest_value({x}, {y})",
        ],
        [
            f"The hyperbolic cosine of {x} = ##hyperbolic_cosine({x})",
            f"hyperbolic_cosine({x}) = ##hyperbolic_cosine({x})",
            f"The value of the hyperbolic cosine function for {x} = ##hyperbolic_cosine({x})",
            f"Calculation: hyperbolic_cosine({x}) = ##hyperbolic_cosine({x})",
            f"The hyperbolic cosine value for {x} is = ##hyperbolic_cosine({x})",
            f"The result of applying the hyperbolic cosine function to {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic function corresponding to {x} = ##hyperbolic_cosine({x})",
            f"The value of the hyperbolic function at {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic function applied to the input {x} = ##hyperbolic_cosine({x})",
            f"The value of cosh({x}) = ##hyperbolic_cosine({x})",
            f"The hyperbolic function evaluated at {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic function output for {x} = ##hyperbolic_cosine({x})",
            f"The result of the hyperbolic cosine function at {x} = ##hyperbolic_cosine({x})",
            f"The value of the cosh function for the input {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic cosine of the input {x} = ##hyperbolic_cosine({x})",
            f"The value of the hyperbolic_cosine function at {x} = ##hyperbolic_cosine({x})",
            f"The cosh function output for {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic cosine value of {x} = ##hyperbolic_cosine({x})",
            f"The value of the hyperbolic_cosine function for the input {x} = ##hyperbolic_cosine({x})",
            f"The value of the hyperbolic_cosine function evaluated at {x} = ##hyperbolic_cosine({x})",
            f"The value of cosh(x) for the given input {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic cosine function value for {x} = ##hyperbolic_cosine({x})",
            f"The value of cosh(x) at the input {x} = ##hyperbolic_cosine({x})",
            f"The hyperbolic function value for the input {x} = ##hyperbolic_cosine({x})",
            f"The value of the hyperbolic cosine function at {x} is = ##hyperbolic_cosine({x})",
            f"The cosh value for {x} = ##hyperbolic_cosine({x})",
        ],
        [
            f"The hyperbolic sine of {x} = ##hyperbolic_sine({x})",
            f"hyperbolic_sine({x}) = ##hyperbolic_sine({x})",
            f"The value of the hyperbolic sine function for {x} = ##hyperbolic_sine({x})",
            f"Calculation: hyperbolic_sine({x}) = ##hyperbolic_sine({x})",
            f"The hyperbolic sine value for {x} is = ##hyperbolic_sine({x})",
            f"The result of applying the hyperbolic sine function to {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic function corresponding to {x} = ##hyperbolic_sine({x})",
            f"The value of the hyperbolic function at {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic function applied to the input {x} = ##hyperbolic_sine({x})",
            f"The value of sinh({x}) = ##hyperbolic_sine({x})",
            f"The hyperbolic function evaluated at {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic function output for {x} = ##hyperbolic_sine({x})",
            f"The result of the hyperbolic sine function at {x} = ##hyperbolic_sine({x})",
            f"The value of the sinh function for the input {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic sine of the input {x} = ##hyperbolic_sine({x})",
            f"The value of the hyperbolic_sine function at {x} = ##hyperbolic_sine({x})",
            f"The sinh function output for {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic sine value of {x} = ##hyperbolic_sine({x})",
            f"The value of the hyperbolic_sine function for the input {x} = ##hyperbolic_sine({x})",
            f"The value of the hyperbolic_sine function evaluated at {x} = ##hyperbolic_sine({x})",
            f"The value of sinh(x) for the given input {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic sine function value for {x} = ##hyperbolic_sine({x})",
            f"The value of sinh(x) at the input {x} = ##hyperbolic_sine({x})",
            f"The hyperbolic function value for the input {x} = ##hyperbolic_sine({x})",
            f"The value of the hyperbolic sine function at {x} is = ##hyperbolic_sine({x})",
            f"The sinh value for {x} = ##hyperbolic_sine({x})",
        ],
        [
            f"The hyperbolic tangent of {x} = ##hyperbolic_tangent({x})",
            f"hyperbolic_tangent({x}) = ##hyperbolic_tangent({x})",
            f"The value of the hyperbolic tangent function for {x} = ##hyperbolic_tangent({x})",
            f"Calculation: hyperbolic_tangent({x}) = ##hyperbolic_tangent({x})",
            f"The hyperbolic tangent value for {x} is = ##hyperbolic_tangent({x})",
            f"The result of applying the hyperbolic tangent function to {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic function corresponding to {x} = ##hyperbolic_tangent({x})",
            f"The value of the hyperbolic function at {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic function applied to the input {x} = ##hyperbolic_tangent({x})",
            f"The value of tanh({x}) = ##hyperbolic_tangent({x})",
            f"The hyperbolic function evaluated at {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic function output for {x} = ##hyperbolic_tangent({x})",
            f"The result of the hyperbolic tangent function at {x} = ##hyperbolic_tangent({x})",
            f"The value of the tanh function for the input {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic tangent of the input {x} = ##hyperbolic_tangent({x})",
            f"The value of the hyperbolic_tangent function at {x} = ##hyperbolic_tangent({x})",
            f"The tanh function output for {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic tangent value of {x} = ##hyperbolic_tangent({x})",
            f"The value of the hyperbolic_tangent function for the input {x} = ##hyperbolic_tangent({x})",
            f"The value of the hyperbolic_tangent function evaluated at {x} = ##hyperbolic_tangent({x})",
            f"The value of tanh(x) for the given input {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic tangent function value for {x} = ##hyperbolic_tangent({x})",
            f"The value of tanh(x) at the input {x} = ##hyperbolic_tangent({x})",
            f"The hyperbolic function value for the input {x} = ##hyperbolic_tangent({x})",
            f"The value of the hyperbolic tangent function at {x} is = ##hyperbolic_tangent({x})",
            f"The tanh value for {x} = ##hyperbolic_tangent({x})",
            f"The output of the hyperbolic tangent function at {x} = ##hyperbolic_tangent({x})",
        ],
        [
            f"The length of the hypotenuse in a right triangle with perpendicular sides of lengths {x} and {y} = ##hypotenuse({x}, {y})",
            f"hypotenuse({x}, {y}) = ##hypotenuse({x}, {y})",
            f"The result of calculating the length of the hypotenuse for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"Calculation: hypotenuse({x}, {y}) = ##hypotenuse({x}, {y})",
            f"The length of the diagonal side in a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The outcome of finding the hypotenuse length for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The length of the longest side in a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The result of determining the hypotenuse length for a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The computed result of calculating the hypotenuse length for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The length of the slanted side in a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The outcome of evaluating hypotenuse({x}, {y}) = ##hypotenuse({x}, {y})",
            f"The value obtained by finding the length of the hypotenuse for a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The result of evaluating hypotenuse({x}, {y}) = ##hypotenuse({x}, {y})",
            f"The length of the inclined side in a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The computed length of the hypotenuse for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The length of the diagonal side obtained from a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The calculated result of determining the hypotenuse length for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The length of the slanted side derived from a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The result obtained from calculating the hypotenuse length for a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The computed hypotenuse length for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The length of the inclined side calculated from a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The calculated outcome of evaluating hypotenuse({x}, {y}) = ##hypotenuse({x}, {y})",
            f"The length of the diagonal side of a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
            f"The computed hypotenuse value for a right triangle with legs {x} and {y} = ##hypotenuse({x}, {y})",
            f"The calculated length of the hypotenuse for a right triangle with sides {x} and {y} = ##hypotenuse({x}, {y})",
        ],
        [
            f"The floating-point representation of the integer {n} = ##int_to_float({n})",
            f"int_to_float({n}) = ##int_to_float({n})",
            f"The result of converting the integer value {n} to a floating-point value = ##int_to_float({n})",
            f"Calculation: int_to_float({n}) = ##int_to_float({n})",
            f"The decimal representation of the integer {n} = ##int_to_float({n})",
            f"The outcome of converting the integer {n} to a floating-point number = ##int_to_float({n})",
            f"The floating-point number that corresponds to the integer {n} = ##int_to_float({n})",
            f"The result of converting the integer value {n} to a float = ##int_to_float({n})",
            f"The computed result of converting the integer {n} to a floating-point value = ##int_to_float({n})",
            f"The floating-point equivalent of the integer {n} = ##int_to_float({n})",
            f"The outcome of evaluating int_to_float({n}) = ##int_to_float({n})",
            f"The floating-point number obtained by representing the integer {n} = ##int_to_float({n})",
            f"The result of evaluating int_to_float({n}) = ##int_to_float({n})",
            f"The decimal value that corresponds to the integer {n} = ##int_to_float({n})",
            f"The computed floating-point representation of the integer {n} = ##int_to_float({n})",
            f"The floating-point value obtained by converting the integer {n} = ##int_to_float({n})",
            f"The calculated result of converting the integer {n} to a float = ##int_to_float({n})",
            f"The floating-point value for the given integer {n} is = ##int_to_float({n})",
            f"The result derived from converting the integer {n} to a floating-point value = ##int_to_float({n})",
            f"The computed floating-point equivalent of the integer {n} = ##int_to_float({n})",
            f"The floating-point value obtained by representing the integer {n} = ##int_to_float({n})",
            f"The floating-point value that corresponds to the integer {n} = ##int_to_float({n})",
            f"The calculated outcome of evaluating int_to_float({n}) = ##int_to_float({n})",
            f"The decimal number that represents the integer {n} = ##int_to_float({n})",
            f"The calculated floating-point representation of the integer {n} = ##int_to_float({n})",
            f"The calculated floating-point value obtained by converting the integer {n} = ##int_to_float({n})",
        ],
        [
            f"The multiplicative inverse of the number {x} = ##invert_number({x})",
            f"invert_number({x}) = ##invert_number({x})",
            f"The result of calculating the reciprocal of the number {x} = ##invert_number({x})",
            f"Calculation: invert_number({x}) = ##invert_number({x})",
            f"The reciprocal value of the number {x} = ##invert_number({x})",
            f"The outcome of finding the multiplicative inverse of the number {x} = ##invert_number({x})",
            f"The number that, when multiplied by {x}, results in 1 = ##invert_number({x})",
            f"The result of determining the inverse of the number {x} = ##invert_number({x})",
            f"The computed result of calculating the multiplicative inverse of the number {x} = ##invert_number({x})",
            f"The value that, when multiplied by {x}, equals 1 = ##invert_number({x})",
            f"The outcome of evaluating invert_number({x}) = ##invert_number({x})",
            f"The value obtained by finding the reciprocal of the number {x} = ##invert_number({x})",
            f"The result of evaluating invert_number({x}) = ##invert_number({x})",
            f"The value that, when multiplied by {x}, gives the result 1 = ##invert_number({x})",
            f"The computed reciprocal value of the number {x} = ##invert_number({x})",
            f"The value that, when multiplied by {x}, gives the outcome 1 = ##invert_number({x})",
            f"The calculated result of determining the multiplicative inverse of the number {x} = ##invert_number({x})",
            f"The reciprocal number for the given number {x} = ##invert_number({x})",
            f"The result obtained from calculating the reciprocal of the number {x} = ##invert_number({x})",
            f"The computed value of the multiplicative inverse of the number {x} = ##invert_number({x})",
            f"The reciprocal of the number {x} is = ##invert_number({x})",
            f"The result derived from calculating the reciprocal of the number {x} = ##invert_number({x})",
            f"The computed inverse value of the number {x} = ##invert_number({x})",
            f"The calculated outcome of evaluating invert_number({x}) = ##invert_number({x})",
            f"The reciprocal fraction for the number {x} = ##invert_number({x})",
            f"The calculated inverse value of the number {x} = ##invert_number({x})",
        ],
        [
            f"Whether the number {n} is even = ##is_even({n})",
            f"is_even({n}) = ##is_even({n})",
            f"Whether {n} is divisible by 2 without remainder = ##is_even({n})",
            f"Calculation: is_even({n}) = ##is_even({n})",
            f"Whether the remainder of {n} divided by 2 is 0 = ##is_even({n})",
            f"Whether {n} is an even number = ##is_even({n})",
            f"Whether {n} is evenly divisible by 2 = ##is_even({n})",
            f"Whether {n} is a multiple of 2 = ##is_even({n})",
            f"Whether {n} is a whole number divisible by 2 = ##is_even({n})",
            f"Whether the integer {n} is an even number = ##is_even({n})",
            f"Whether {n} can be divided by 2 without leaving a remainder = ##is_even({n})",
            f"Whether {n} can be evenly divided by 2 = ##is_even({n})",
            f"Whether {n} is an integer that is divisible by 2 = ##is_even({n})",
            f"Whether the result of evaluating is_even({n}) is true = ##is_even({n})",
            f"Whether {n} is a number that is divisible by 2 = ##is_even({n})",
            f"Whether {n} is evenly divisible by 2 or not = ##is_even({n})",
            f"Whether {n} can be divided by 2 without having a remainder = ##is_even({n})",
            f"Whether {n} is an integer that can be divided by 2 = ##is_even({n})",
            f"Whether {n} is a whole number that is divisible by 2 = ##is_even({n})",
            f"Whether the value of is_even({n}) is true or not = ##is_even({n})",
            f"Whether {n} is evenly divisible by 2 or not = ##is_even({n})",
            f"Whether {n} is a number that can be divided by 2 = ##is_even({n})",
            f"Whether the result of evaluating {n} % 2 == 0 is true = ##is_even({n})",
            f"Whether {n} is a multiple of 2 or not = ##is_even({n})",
            f"Whether the integer {n} is divisible by 2 or not = ##is_even({n})",
            f"Whether {n} is a whole number that can be divided by 2 = ##is_even({n})",
        ],
        [
            f"Whether the number {n} is odd = ##is_odd({n})",
            f"is_odd({n}) = ##is_odd({n})",
            f"Whether {n} is not divisible by 2 without remainder = ##is_odd({n})",
            f"Calculation: is_odd({n}) = ##is_odd({n})",
            f"Whether the remainder of {n} divided by 2 is not 0 = ##is_odd({n})",
            f"Whether {n} is not an even number = ##is_odd({n})",
            f"Whether {n} is not evenly divisible by 2 = ##is_odd({n})",
            f"Whether {n} is not a multiple of 2 = ##is_odd({n})",
            f"Whether {n} is not a whole number divisible by 2 = ##is_odd({n})",
            f"Whether the integer {n} is not an even number = ##is_odd({n})",
            f"Whether {n} cannot be divided by 2 without leaving a remainder = ##is_odd({n})",
            f"Whether {n} cannot be evenly divided by 2 = ##is_odd({n})",
            f"Whether {n} is not an integer that is divisible by 2 = ##is_odd({n})",
            f"Whether the result of evaluating is_odd({n}) is true = ##is_odd({n})",
            f"Whether {n} is not a number that is divisible by 2 = ##is_odd({n})",
            f"Whether {n} is not evenly divisible by 2 or not = ##is_odd({n})",
            f"Whether {n} cannot be divided by 2 without having a remainder = ##is_odd({n})",
            f"Whether {n} is not an integer that can be divided by 2 = ##is_odd({n})",
            f"Whether {n} is not a whole number that is divisible by 2 = ##is_odd({n})",
            f"Whether the value of is_odd({n}) is true or not = ##is_odd({n})",
            f"Whether {n} is not evenly divisible by 2 or not = ##is_odd({n})",
            f"Whether {n} is not a number that can be divided by 2 = ##is_odd({n})",
            f"Whether the result of evaluating {n} % 2 != 0 is true = ##is_odd({n})",
            f"Whether {n} is not a multiple of 2 or not = ##is_odd({n})",
            f"Whether the integer {n} is not divisible by 2 or not = ##is_odd({n})",
            f"Whether {n} is not a whole number that can be divided by 2 = ##is_odd({n})",
        ],
    ]
    return random.choice(examples)


if __name__ == "__main__":
    from masked_token_sample_generator import MaskedTokenSamplesGenerator

    masked_example = MaskedTokenSamplesGenerator.create_masked_token_batches(
        get_batch_sixteen_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        masked_example,
        PretrainTasks.MASKED_TOKEN_PREDICTION,
    )
    print(sample)

    from next_token_sample_generator import NextTokenSamplesGenerator

    next_token_example = NextTokenSamplesGenerator.create_next_token_batches(
        get_batch_sixteen_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        next_token_example,
        PretrainTasks.NEXT_TOKEN_PREDICTION
    )
    print(sample)
