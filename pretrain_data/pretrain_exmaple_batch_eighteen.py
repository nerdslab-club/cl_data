import math
import random

from cl_data.src.constants import PretrainTasks
from cl_data.src.random_value_generator import RandomValueGenerator
from cl_data.src.utility import Utility


def get_batch_eighteen_example_paragraph():
    n = random.randint(2, 10)
    r = random.randint(1, n)
    mod = random.randint(2, 100)
    a = RandomValueGenerator.generate_random_integer(-10, 100)
    b = RandomValueGenerator.generate_random_integer(-10, 100)
    angle = random.uniform(0.0, 360.0)

    x = random.uniform(0.0, 2 * math.pi)
    f = random.uniform(-10.0, 50.0)
    g = random.uniform(-10.0, 50.0)
    vector = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 10), -10, 100
    )
    lst_str = " , ".join(str(num) for num in vector)

    input_str = "".join(random.choices("abcdefghijklmnopqrstuvwxyz", k=random.randint(1, 10)))
    examples = [
        [
            f"The number of permutations of {r} items taken from a set of {n} items = ##permutation({n}, {r})",
            f"permutation({n}, {r}) = ##permutation({n}, {r})",
            f"The result of calculating the permutations of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"Calculation: permutation({n}, {r}) = ##permutation({n}, {r})",
            f"The count of possible arrangements of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The outcome of finding the number of permutations of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The total ways to arrange {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The result of determining the permutations of {r} items chosen from {n} items = ##permutation({n}, {r})",
            f"The computed result of calculating the permutations of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The number of possible orders of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The outcome of evaluating permutation({n}, {r}) = ##permutation({n}, {r})",
            f"The value obtained by calculating the permutations of {r} items from {n} items = ##permutation({n}, {r})",
            f"The result of evaluating permutation({n}, {r}) = ##permutation({n}, {r})",
            f"The count of arrangements of {r} items selected from a set of {n} items = ##permutation({n}, {r})",
            f"The computed number of permutations of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The total possible orders of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The calculated result of determining the permutations of {r} items chosen from {n} items = ##permutation({n}, {r})",
            f"The number of ways to arrange {r} items out of {n} items = ##permutation({n}, {r})",
            f"The result obtained from calculating the permutations of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The computed permutation count of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The number of distinct orders of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The calculated outcome of evaluating permutation({n}, {r}) = ##permutation({n}, {r})",
            f"The total permutations of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The computed permutation value of {r} items from a set of {n} items = ##permutation({n}, {r})",
            f"The calculated count of permutations of {r} items chosen from {n} items = ##permutation({n}, {r})",
        ],
        [
            f"Calculating the value of 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The result of evaluating 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"Calculation: positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The expression 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"The outcome of evaluating positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The result obtained by calculating 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"The value of 2 times {a} times {b} = ##positive_2ab({a}, {b})",
            f"The computed result of evaluating 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"The product of 2 times {a} times {b} = ##positive_2ab({a}, {b})",
            f"The outcome of determining 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"The numerical value of 2 * {a} times {b} = ##positive_2ab({a}, {b})",
            f"The result of evaluating positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The value of 2 * {a} * {b} is = ##positive_2ab({a}, {b})",
            f"The result derived from evaluating positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The calculated result of 2 * {a} times {b} = ##positive_2ab({a}, {b})",
            f"The value of 2 times {a} times {b} is = ##positive_2ab({a}, {b})",
            f"The value of 2 * {a} * {b} equals = ##positive_2ab({a}, {b})",
            f"The value of 2 * {a} times {b} is = ##positive_2ab({a}, {b})",
            f"The computed value of 2 * {a} * {b} = ##positive_2ab({a}, {b})",
            f"The calculated outcome of 2 * {a} times {b} = ##positive_2ab({a}, {b})",
            f"The outcome of evaluating positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The outcome of determining the product of 2 times {a} times {b} = ##positive_2ab({a}, {b})",
            f"The outcome of evaluating positive_2ab({a}, {b}) = ##positive_2ab({a}, {b})",
        ],
        [
            f"The modular exponentiation of {n} raised to the power {r} modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"pow_mod({n}, {r}, {mod}) = ##pow_mod({n}, {r}, {mod})",
            f"The result of raising {n} to the power {r} and then taking modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"Calculation: pow_mod({n}, {r}, {mod}) = ##pow_mod({n}, {r}, {mod})",
            f"The value of ({n}^{r}) % {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The value of {n} raised to the power {r} modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The modular result of {n}^{r} % {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The remainder when {n}^{r} is divided by {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The value of ({n}^{r}) mod {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The result of raising {n} to the power {r} and then finding the remainder when divided by {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The value of {n} raised to the power of {r} and then taken modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The outcome of ({n}^{r}) % {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The outcome of raising {n} to the power {r} and then taking modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The value of {n} raised to the power {r} and then reduced modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The modular exponentiation result of {n} raised to the power {r} modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The outcome of raising {n} to the power {r} and then finding the modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The remainder when raising {n} to the power {r} divided by {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The result of {n}^{r} modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The modular value of raising {n} to the power {r} with modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The result of {n}^{r} % {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The modular result of {n} raised to the power of {r} with modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The outcome of ({n}^{r}) modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The value of pow_mod({n}, {r}, {mod}) is = ##pow_mod({n}, {r}, {mod})",
            f"The outcome of raising {n} to the power {r} and then reducing modulo {mod} = ##pow_mod({n}, {r}, {mod})",
            f"The result of raising {n} to the power {r} modulo {mod} is = ##pow_mod({n}, {r}, {mod})",
        ],
        [
            f"10 raised to the power of {a} = ##power_of_ten({a})",
            f"power_of_ten({a}) = ##power_of_ten({a})",
            f"The result of 10 raised to the power of {a} = ##power_of_ten({a})",
            f"Calculation: power_of_ten({a}) = ##power_of_ten({a})",
            f"The value obtained by exponentiating 10 with the power of {a} = ##power_of_ten({a})",
            f"The outcome of evaluating 10 raised to the power of {a} = ##power_of_ten({a})",
            f"The result of 10 raised to the exponent {a} = ##power_of_ten({a})",
            f"The value of 10 to the power of {a} = ##power_of_ten({a})",
            f"The computed result of raising 10 to the power of {a} = ##power_of_ten({a})",
            f"The value obtained by raising 10 to the power of {a} = ##power_of_ten({a})",
            f"The outcome of finding 10 raised to the power of {a} = ##power_of_ten({a})",
            f"The computed value of power_of_ten({a}) is = ##power_of_ten({a})",
            f"The result of evaluating 10 raised to the power of {a} is = ##power_of_ten({a})",
            f"The value calculated by exponentiation 10 with the power of {a} is = ##power_of_ten({a})",
            f"The computed result of 10 raised to the power of {a} is = ##power_of_ten({a})",
            f"The calculated value of 10 to the power of {a} is = ##power_of_ten({a})",
            f"The outcome of finding 10 raised to the exponent {a} is = ##power_of_ten({a})",
            f"The value obtained by raising 10 to the exponent {a} is = ##power_of_ten({a})",
            f"The result of 10 raised to the power of {a} is = ##power_of_ten({a})",
            f"The outcome of evaluating power_of_ten({a}) is = ##power_of_ten({a})",
            f"The value of 10 to the power of {a} is = ##power_of_ten({a})",
            f"The computed outcome of evaluating 10 raised to the power of {a} is = ##power_of_ten({a})",
            f"The calculated result of raising 10 to the power of {a} is = ##power_of_ten({a})",
            f"The value of 10 raised to the power of {a} is = ##power_of_ten({a})",
            f"The result of exponentiation 10 with the power of {a} is = ##power_of_ten({a})",
        ],
        [
            f"The prime factors of {n} = ##prime_factors({n})",
            f"prime_factors({n}) = ##prime_factors({n})",
            f"The factors of {n} that are prime numbers = ##prime_factors({n})",
            f"Calculation: prime_factors({n}) = ##prime_factors({n})",
            f"The prime numbers that divide {n} = ##prime_factors({n})",
            f"The list of prime factors for {n} = ##prime_factors({n})",
            f"The result of finding the prime factors of {n} = ##prime_factors({n})",
            f"The prime divisors of {n} = ##prime_factors({n})",
            f"The factors that are prime numbers for the value {n} = ##prime_factors({n})",
            f"The prime factorization of {n} = ##prime_factors({n})",
            f"The result of decomposing {n} into prime factors = ##prime_factors({n})",
            f"The prime numbers that can divide {n} = ##prime_factors({n})",
            f"The outcome of determining the prime factors of {n} = ##prime_factors({n})",
            f"The prime factors of the number {n} are = ##prime_factors({n})",
            f"The prime factors of the integer {n} = ##prime_factors({n})",
            f"The prime numbers that are divisors of {n} = ##prime_factors({n})",
            f"The list of prime divisors for the value {n} = ##prime_factors({n})",
            f"The calculated prime factors of {n} are = ##prime_factors({n})",
            f"The prime factorization result of {n} is = ##prime_factors({n})",
            f"The prime factor decomposition of {n} is = ##prime_factors({n})",
            f"The prime divisors of {n} are = ##prime_factors({n})",
            f"The prime factors for the integer {n} are = ##prime_factors({n})",
        ],
        [
            f"The product of the numbers {lst_str} = ##product({vector})",
            f"product({vector}) = ##product({vector})",
            f"The result of multiplying the numbers {lst_str} = ##product({vector})",
            f"Calculation: product({vector}) = ##product({vector})",
            f"The value obtained by multiplying the numbers {lst_str} = ##product({vector})",
            f"The outcome of multiplying the elements in the list {lst_str} = ##product({vector})",
            f"The total value of multiplying the numbers {lst_str} = ##product({vector})",
            f"The result of the multiplication of {lst_str} = ##product({vector})",
            f"The value achieved by multiplying the numbers {lst_str} = ##product({vector})",
            f"The product value of the numbers {lst_str} = ##product({vector})",
            f"The product obtained from the numbers {lst_str} = ##product({vector})",
            f"The final value after multiplying the numbers {lst_str} = ##product({vector})",
            f"The result of calculating the product of {lst_str} = ##product({vector})",
            f"The outcome of the multiplication of the elements {lst_str} = ##product({vector})",
            f"The value calculated by multiplying the numbers {lst_str} = ##product({vector})",
            f"The value of the product of the numbers {lst_str} = ##product({vector})",
            f"The total obtained from the multiplication of {lst_str} = ##product({vector})",
            f"The computed result of the product of {lst_str} = ##product({vector})",
            f"The product of the elements {lst_str} is = ##product({vector})",
            f"The product value of the list {lst_str} = ##product({vector})",
            f"The result of product({vector}) is = ##product({vector})",
            f"The value from the multiplication of {lst_str} is = ##product({vector})",
            f"The calculated result of multiplying the numbers {lst_str} = ##product({vector})",
            f"The value achieved by product({vector}) is = ##product({vector})",
        ],
        [
            f"Convert {x} radians to degrees = ##radians_to_degrees({x})",
            f"radians_to_degrees({x}) = ##radians_to_degrees({x})",
            f"The value of {x} radians in degrees = ##radians_to_degrees({x})",
            f"Calculation: radians_to_degrees({x}) = ##radians_to_degrees({x})",
            f"The equivalent degrees for {x} radians = ##radians_to_degrees({x})",
            f"Converting {x} radians to degrees = ##radians_to_degrees({x})",
            f"The degree measure for {x} radians = ##radians_to_degrees({x})",
            f"The degree value corresponding to {x} radians = ##radians_to_degrees({x})",
            f"The angle conversion from radians to degrees for {x} = ##radians_to_degrees({x})",
            f"The value of degrees after converting {x} radians = ##radians_to_degrees({x})",
            f"The result of converting {x} radians to degrees = ##radians_to_degrees({x})",
            f"The degree measure for the input angle {x} = ##radians_to_degrees({x})",
            f"The degree value for the angle {x} radians = ##radians_to_degrees({x})",
            f"The angle {x} radians in degrees = ##radians_to_degrees({x})",
            f"The equivalent degree value for {x} radians = ##radians_to_degrees({x})",
            f"The degree equivalent of {x} radians = ##radians_to_degrees({x})",
            f"The degree measurement for the angle {x} = ##radians_to_degrees({x})",
            f"The angle in degrees corresponding to {x} radians = ##radians_to_degrees({x})",
            f"The degree value for the input angle of {x} radians = ##radians_to_degrees({x})",
            f"The degree representation of {x} radians = ##radians_to_degrees({x})",
            f"The angle conversion from radians to degrees yields = ##radians_to_degrees({x})",
            f"The degree value of {x} radians = ##radians_to_degrees({x})",
            f"The value of degrees after converting {x} radians is = ##radians_to_degrees({x})",
            f"The degree equivalent for the angle {x} radians = ##radians_to_degrees({x})",
            f"The result of converting {x} radians to degrees is = ##radians_to_degrees({x})",
        ],
        [
            f"The Rectified Linear Unit (ReLU) activation of {f} = ##relu({f})",
            f"relu({f}) = ##relu({f})",
            f"The result of applying ReLU to {f} = ##relu({f})",
            f"Calculation: relu({f}) = ##relu({f})",
            f"The output of the ReLU activation function for the input {f} = ##relu({f})",
            f"The outcome of applying the ReLU activation to {f} = ##relu({f})",
            f"The value obtained by applying ReLU to {f} = ##relu({f})",
            f"The ReLU value of {f} = ##relu({f})",
            f"The outcome of the ReLU operation on {f} = ##relu({f})",
            f"The result of applying the Rectified Linear Unit function to {f} = ##relu({f})",
            f"The value after applying the ReLU activation to {f} = ##relu({f})",
            f"The computed result of the ReLU activation on {f} = ##relu({f})",
            f"The result of passing {f} through the ReLU activation = ##relu({f})",
            f"The output obtained by applying ReLU to the value {f} = ##relu({f})",
            f"The ReLU activation result of {f} is = ##relu({f})",
            f"The value after the ReLU operation on {f} is = ##relu({f})",
            f"The result of evaluating relu({f}) is = ##relu({f})",
            f"The outcome of applying the ReLU function to {f} is = ##relu({f})",
            f"The ReLU value of the input {f} is = ##relu({f})",
            f"The value obtained by passing {f} through the ReLU activation is = ##relu({f})",
            f"The outcome of applying ReLU({f}) is = ##relu({f})",
            f"The calculated result of applying ReLU to {f} is = ##relu({f})",
            f"The ReLU output of {f} is = ##relu({f})",
            f"The value of relu({f}) is = ##relu({f})",
            f"The ReLU result of applying to {f} is = ##relu({f})",
            f"The outcome of evaluating the ReLU activation on {f} is = ##relu({f})",
        ],
        [
            f"Reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"reverse_string('{input_str}') = ##reverse_string('{input_str}')",
            f"The result of reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"Calculation: reverse_string('{input_str}') = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The outcome of reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The string '{input_str}' in reverse order = ##reverse_string('{input_str}')",
            f"The result of determining the reverse of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The computed result of reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The reverse of the given string '{input_str}' = ##reverse_string('{input_str}')",
            f"The outcome of evaluating reverse_string('{input_str}') = ##reverse_string('{input_str}')",
            f"The value obtained by reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The result of evaluating reverse_string('{input_str}') = ##reverse_string('{input_str}')",
            f"The string '{input_str}' reversed = ##reverse_string('{input_str}')",
            f"The computed reversed string of '{input_str}' = ##reverse_string('{input_str}')",
            f"The string '{input_str}' in reverse = ##reverse_string('{input_str}')",
            f"The calculated result of determining the reverse of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed version of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The outcome of evaluating reverse_string('{input_str}') = ##reverse_string('{input_str}')",
            f"The computed reversed form of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The calculated outcome of reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The computed reverse of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The calculated reverse of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The outcome of finding the reverse of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The calculated reverse version of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The calculated reversed string of '{input_str}' = ##reverse_string('{input_str}')",
            f"The outcome of evaluating reverse_string('{input_str}') = ##reverse_string('{input_str}')",
            f"The outcome of calculating the reverse of the string '{input_str}' = ##reverse_string('{input_str}')",
        ],
        [
            f"The integer closest to {f} after rounding = ##round({f})",
            f"round({f}) = ##round({f})",
            f"The nearest whole number to {f} = ##round({f})",
            f"Calculation: round({f}) = ##round({f})",
            f"The integer that is closest to {f} and has the same magnitude = ##round({f})",
            f"The number rounded to the nearest integer value = ##round({f})",
            f"The integer that is nearest to {f} after rounding = ##round({f})",
            f"The value of {f} rounded to the nearest whole number = ##round({f})",
            f"The integer value that is nearest to {f} = ##round({f})",
            f"The result of rounding {f} to the nearest integer = ##round({f})",
            f"The closest whole number to the decimal {f} = ##round({f})",
            f"The closest integer to {f} after rounding = ##round({f})",
            f"The integer that is closest to {f} is = ##round({f})",
            f"The nearest whole number value for the decimal {f} = ##round({f})",
            f"The integer value closest to {f} = ##round({f})",
            f"The value of {f} rounded to the closest integer = ##round({f})",
            f"The result of rounding the decimal {f} to the nearest whole number = ##round({f})",
            f"The whole number that is nearest to {f} after rounding = ##round({f})",
            f"The integer that is nearest to the number {f} = ##round({f})",
            f"The value of {f} rounded to the nearest integer is = ##round({f})",
            f"The result of rounding {f} is = ##round({f})",
            f"The integer that is closest to the input value {f} = ##round({f})",
            f"The nearest integer to the number {f} is = ##round({f})",
            f"The integer that is nearest to {f} is = ##round({f})",
            f"The value of rounding {f} to the nearest integer = ##round({f})",
            f"The integer value nearest to {f} = ##round({f})",
            f"The round value of {f} is = ##round({f})",
            f"The result of calculating round({f}) is = ##round({f})",
        ],
        [
            f"The sigmoid function value of the number {f} = ##sigmoid({f})",
            f"sigmoid({f}) = ##sigmoid({f})",
            f"The result of evaluating the sigmoid function for the number {f} = ##sigmoid({f})",
            f"Calculation: sigmoid({f}) = ##sigmoid({f})",
            f"The value of the sigmoid curve at the point {f} = ##sigmoid({f})",
            f"The outcome of calculating the sigmoid function value for the number {f} = ##sigmoid({f})",
            f"The logistic sigmoid value of the number {f} = ##sigmoid({f})",
            f"The result of determining the sigmoid value for the number {f} = ##sigmoid({f})",
            f"The computed result of evaluating the sigmoid function for the number {f} = ##sigmoid({f})",
            f"The value of the sigmoid function at the input {f} = ##sigmoid({f})",
            f"The outcome of evaluating sigmoid({f}) = ##sigmoid({f})",
            f"The value obtained by calculating the sigmoid function for the number {f} = ##sigmoid({f})",
            f"The result of evaluating sigmoid({f}) = ##sigmoid({f})",
            f"The sigmoid curve's value at the input {f} = ##sigmoid({f})",
            f"The computed sigmoid value of the number {f} = ##sigmoid({f})",
            f"The sigmoid function value at the point {f} = ##sigmoid({f})",
            f"The calculated result of determining the sigmoid value for the number {f} = ##sigmoid({f})",
            f"The logistic sigmoid function value for the number {f} = ##sigmoid({f})",
            f"The outcome of calculating the sigmoid value for the number {f} = ##sigmoid({f})",
            f"The computed value of the sigmoid function at the point {f} = ##sigmoid({f})",
            f"The sigmoid value for the number {f} is = ##sigmoid({f})",
            f"The result derived from evaluating the sigmoid function for the number {f} = ##sigmoid({f})",
            f"The computed sigmoid curve value of the number {f} = ##sigmoid({f})",
            f"The sigmoid value obtained by evaluating sigmoid({f}) = ##sigmoid({f})",
            f"The calculated outcome of evaluating sigmoid({f}) = ##sigmoid({f})",
            f"The logistic sigmoid value at the input {f} = ##sigmoid({f})",
            f"The calculated sigmoid curve value of the number {f} = ##sigmoid({f})",
        ],
        [
            f"The sine of {angle} degrees = ##sine({angle})",
            f"sin({angle}) = ##sine({angle})",
            f"The result of taking the sine of {angle} degrees = ##sine({angle})",
            f"Calculation: sin({angle} °) = ##sine({angle})",
            f"The sine value of {angle} ° is = ##sine({angle})",
            f"The value of sin({angle} °) = ##sine({angle})",
            f"The trigonometric sine function applied to {angle} ° = ##sine({angle})",
            f"The sine of {angle} ° equals? = ##sine({angle})",
            f"The sine of the angle {angle} ° = ##sine({angle})",
            f"The sine function output for {angle} ° = ##sine({angle})",
            f"The sine of {angle} degrees is = ##sine({angle})",
        ],
        [
            f"The smaller of {f} and {g} = ##smallest_value({f}, {g})",
            f"smallest_value({f}, {g}) = ##smallest_value({f}, {g})",
            f"The lesser value between {f} and {g} = ##smallest_value({f}, {g})",
            f"Calculation: smallest_value({f}, {g}) = ##smallest_value({f}, {g})",
            f"The lower of the two numbers {f} and {g} = ##smallest_value({f}, {g})",
            f"The minimum value between {f} and {g} = ##smallest_value({f}, {g})",
            f"The smaller number among {f} and {g} = ##smallest_value({f}, {g})",
            f"The result of selecting the smaller value from {f} and {g} = ##smallest_value({f}, {g})",
            f"The less significant value of {f} and {g} = ##smallest_value({f}, {g})",
            f"The outcome of comparing {f} and {g} and selecting the smaller = ##smallest_value({f}, {g})",
            f"The lesser value among {f} and {g} = ##smallest_value({f}, {g})",
            f"The number that is smaller between {f} and {g} = ##smallest_value({f}, {g})",
            f"The smaller value of the two numbers {f} and {g} = ##smallest_value({f}, {g})",
            f"The minimum of the numbers {f} and {g} = ##smallest_value({f}, {g})",
            f"The lesser of the values {f} and {g} = ##smallest_value({f}, {g})",
            f"The result of picking the smaller value from {f} and {g} = ##smallest_value({f}, {g})",
            f"The lower value between {f} and {g} = ##smallest_value({f}, {g})",
            f"The smaller of the two values {f} and {g} = ##smallest_value({f}, {g})",
            f"The smaller value of the pair {f} and {g} = ##smallest_value({f}, {g})",
            f"The outcome of choosing the smaller number from {f} and {g} = ##smallest_value({f}, {g})",
            f"The smaller value in the pair {f} and {g} = ##smallest_value({f}, {g})",
            f"The result of finding the minimum value between {f} and {g} = ##smallest_value({f}, {g})",
            f"The lesser of the two inputs {f} and {g} = ##smallest_value({f}, {g})",
            f"The less substantial value among {f} and {g} = ##smallest_value({f}, {g})",
            f"The result of evaluating smallest_value({f}, {g}) is = ##smallest_value({f}, {g})",
        ],
        [
            f"The square of the number {f} = ##square({f})",
            f"square({f}) = ##square({f})",
            f"The result of squaring {f} = ##square({f})",
            f"Calculation: square({f}) = ##square({f})",
            f"The value obtained by multiplying {f} by itself = ##square({f})",
            f"The outcome of calculating the square of {f} = ##square({f})",
            f"The squared value of {f} = ##square({f})",
            f"The result of squaring the number {f} = ##square({f})",
            f"The computed result of squaring {f} = ##square({f})",
            f"The value of {f} squared = ##square({f})",
            f"The product of {f} and itself = ##square({f})",
            f"The squared result of the number {f} = ##square({f})",
            f"The outcome of evaluating square({f}) = ##square({f})",
            f"The computed value of {f} squared is = ##square({f})",
            f"The value obtained by raising {f} to the power of 2 = ##square({f})",
            f"The outcome of finding the square of {f} is = ##square({f})",
            f"The squared value obtained by squaring {f} = ##square({f})",
            f"The result of raising {f} to the power of 2 = ##square({f})",
            f"The squared outcome of the number {f} is = ##square({f})",
            f"The value of the number {f} squared is = ##square({f})",
            f"The computed squared value of {f} is = ##square({f})",
            f"The squared result of {f} is = ##square({f})",
            f"The calculated outcome of squaring the number {f} is = ##square({f})",
            f"The squared value of {f} is = ##square({f})",
            f"The value calculated by squaring {f} is = ##square({f})",
        ],
        [
            f"The square of the integer {a} = ##square_int({a})",
            f"square_int({a}) = ##square_int({a})",
            f"The result of squaring {a} = ##square_int({a})",
            f"Calculation: square_int({a}) = ##square_int({a})",
            f"The value obtained by multiplying {a} by itself = ##square_int({a})",
            f"The outcome of calculating the square of {a} = ##square_int({a})",
            f"The squared value of {a} = ##square_int({a})",
            f"The result of squaring the integer {a} = ##square_int({a})",
            f"The computed result of squaring {a} = ##square_int({a})",
            f"The value of {a} squared = ##square_int({a})",
            f"The product of {a} and itself = ##square_int({a})",
            f"The squared result of the number {a} = ##square_int({a})",
            f"The outcome of evaluating square_int({a}) = ##square_int({a})",
            f"The computed value of {a} squared is = ##square_int({a})",
            f"The value obtained by raising {a} to the power of 2 = ##square_int({a})",
            f"The outcome of finding the square of {a} is = ##square_int({a})",
            f"The squared value obtained by squaring {a} = ##square_int({a})",
            f"The result of raising {a} to the power of 2 = ##square_int({a})",
            f"The squared outcome of the number {a} is = ##square_int({a})",
            f"The value of the integer {a} squared is = ##square_int({a})",
            f"The computed squared value of {a} is = ##square_int({a})",
            f"The squared result of {a} is = ##square_int({a})",
            f"The calculated outcome of squaring the number {a} is = ##square_int({a})",
            f"The squared value of {a} is = ##square_int({a})",
            f"The value calculated by squaring {a} is = ##square_int({a})",
        ],
        [
            f"The square root of {f} = ##square_root({f})",
            f"√ {f} = ##square_root({f})",
            f"The result of taking the square root of {f} = ##square_root({f})",
            f"Calculation: √ {f} = ##square_root({f})",
            f"The square root of {f} is = ##square_root({f})",
            f"The positive square root of {f} = ##square_root({f})",
            f"The value of √ {f} = ##square_root({f})",
            f"The non-negative square root of {f} = ##square_root({f})",
            f"The square root of {f} equals? = ##square_root({f})",
            f"The radical of {f} = ##square_root({f})",
            f"The square root of {f} is approximately = ##square_root({f})",
            f"The principal square root of {f} = ##square_root({f})",
            f"The square root of {f} gives = ##square_root({f})",
        ],
        [
            f"Subtracting {b} from {a} = ##subtraction({a},{b})",
            f"{a} - {b} = ##subtraction({a},{b})",
            f"Taking away {b} from {a} ... = ##subtraction({a},{b})",
            f"The result of subtracting {b} from {a} = ##subtraction({a},{b})",
            f"{a} minus {b} equals? = ##subtraction({a},{b})",
            f"Calculation: {a} - {b} = ##subtraction({a},{b})",
            f"{b} subtracted from {a} is? = ##subtraction({a},{b})",
            f"Subtracting {b} from {a} = ##subtraction({a},{b})",
            f"{a} minus {b} = ##subtraction({a},{b})",
            f"The difference between {a} and {b} = ##subtraction({a},{b})",
            f"{a} - {b} = = ##subtraction({a},{b})",
            f"{a} take away {b} = ##subtraction({a},{b})",
            f"{a} - {b} results in = ##subtraction({a},{b})",
            f"{b} removed from {a} = ##subtraction({a},{b})",
        ],
        [
            f"The sum of the lst_str {lst_str} = ##sum({vector})",
            f"sum({lst_str}) = ##sum({vector})",
            f"The result of calculating the sum of the lst_str {lst_str} = ##sum({vector})",
            f"Calculation: sum({lst_str}) = ##sum({vector})",
            f"The total value of the lst_str {lst_str} = ##sum({vector})",
            f"The outcome of finding the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The summation value of the lst_str {lst_str} = ##sum({vector})",
            f"The result of determining the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The computed result of calculating the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The sum of the given lst_str {lst_str} = ##sum({vector})",
            f"The outcome of evaluating sum({lst_str}) = ##sum({vector})",
            f"The value obtained by calculating the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The result of evaluating sum({lst_str}) = ##sum({vector})",
            f"The summation of the given lst_str {lst_str} = ##sum({vector})",
            f"The computed sum value of the lst_str {lst_str} = ##sum({vector})",
            f"The total value of the given lst_str {lst_str} = ##sum({vector})",
            f"The calculated result of determining the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The sum of the lst_str {lst_str} is = ##sum({vector})",
            f"The result derived from calculating the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The computed summation value of the lst_str {lst_str} = ##sum({vector})",
            f"The calculated outcome of evaluating sum({lst_str}) = ##sum({vector})",
            f"The computed total value of the lst_str {lst_str} = ##sum({vector})",
            f"The calculated sum value of the lst_str {lst_str} = ##sum({vector})",
            f"The calculated summation value of the lst_str {lst_str} = ##sum({vector})",
            f"The outcome of finding the summation value of the lst_str {lst_str} = ##sum({vector})",
            f"The calculated total value of the lst_str {lst_str} = ##sum({vector})",
            f"The calculated value of the sum of the lst_str {lst_str} = ##sum({vector})",
            f"The outcome of evaluating sum({lst_str}) = ##sum({vector})",
            f"The outcome of calculating the sum value of the lst_str {lst_str} = ##sum({vector})",
        ],
        [
            f"The sum of the digits of the number {a} = ##sum_of_digits({a})",
            f"sum_of_digits({a}) = ##sum_of_digits({a})",
            f"The result of adding up the digits of the number {a} = ##sum_of_digits({a})",
            f"Calculation: sum_of_digits({a}) = ##sum_of_digits({a})",
            f"The sum obtained by adding the digits of the number {a} = ##sum_of_digits({a})",
            f"The outcome of computing the sum of the digits of the number {a} = ##sum_of_digits({a})",
            f"The total of the digits in the number {a} = ##sum_of_digits({a})",
            f"The result of summing up the individual digits of the number {a} = ##sum_of_digits({a})",
            f"The computed result of calculating the sum of the digits of the number {a} = ##sum_of_digits({a})",
            f"The sum of the individual digits in the number {a} = ##sum_of_digits({a})",
            f"The outcome of evaluating sum_of_digits({a}) = ##sum_of_digits({a})",
            f"The value obtained by adding the digits of the number {a} = ##sum_of_digits({a})",
            f"The result of evaluating sum_of_digits({a}) = ##sum_of_digits({a})",
            f"The total obtained by adding the digits of the number {a} = ##sum_of_digits({a})",
            f"The computed sum of the digits of the number {a} = ##sum_of_digits({a})",
            f"The sum obtained from adding the digits of the number {a} = ##sum_of_digits({a})",
            f"The calculated result of summing the digits of the number {a} = ##sum_of_digits({a})",
            f"The sum calculated by adding the digits of the number {a} = ##sum_of_digits({a})",
            f"The result derived from summing the digits of the number {a} = ##sum_of_digits({a})",
            f"The calculated outcome of evaluating sum_of_digits({a}) = ##sum_of_digits({a})",
            f"The total value of the digits in the number {a} = ##sum_of_digits({a})",
            f"The computed sum result of sum_of_digits({a}) = ##sum_of_digits({a})",
            f"The calculated total obtained by adding the digits of the number {a} = ##sum_of_digits({a})",
            f"The sum of the digits of the number {a} is = ##sum_of_digits({a})",
            f"The result of summing the individual digits in the number {a} = ##sum_of_digits({a})",
            f"The computed total of the digits in the number {a} = ##sum_of_digits({a})",
        ],
        [
            f"The tangent of {angle} degrees = ##tangent({angle})",
            f"tan({angle} °) = ##tangent({angle})",
            f"The result of taking the tangent of {angle} degrees = ##tangent({angle})",
            f"Calculation: tan({angle} °) = ##tangent({angle})",
            f"The tangent value of {angle}° is = ##tangent({angle})",
            f"The value of tan({angle} °) = ##tangent({angle})",
            f"The trigonometric tangent function applied to {angle} ° = ##tangent({angle})",
            f"The tangent of {angle} ° equals? = ##tangent({angle})",
            f"The ratio of the length of the side opposite the angle to the length of the adjacent side = ##tangent({angle})",
            f"The tangent of the angle {angle} ° = ##tangent({angle})",
            f"The tangent function output for {angle} ° = ##tangent({angle})",
            f"The tangent of {angle} degrees is = ##tangent({angle})",
            f"The slope of the line passing through the origin and the point on the unit circle = ##tangent({angle})",
            f"The vertical displacement of a point on the unit circle from the origin = ##tangent({angle})",
            f"The value of the trigonometric function that relates to the angle {angle} ° = ##tangent({angle})",
            f"The result of dividing the sine of the angle by the cosine of the angle = ##tangent({angle})",
            f"The tangent of an angle can be written as sin({angle} °) / cos({angle} °) = ##tangent({angle})",
        ],
        [
            f"Calculating the value of ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The result of evaluating ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"Calculation: x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The expression ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The outcome of evaluating x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The result obtained by calculating ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The value of ({n} + {a}) multiplied by ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The computed result of evaluating ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The product of ({n} + {a}) and ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The outcome of determining ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The numerical value of ({n} + {a}) times ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The result of evaluating x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The value of ({n} + {a}) * ({n} + {b}) is = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The result derived from evaluating x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The calculated result of ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The value of ({n} + {a}) multiplied by ({n} + {b}) is = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The value of ({n} + {a}) * ({n} + {b}) equals = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The value of ({n} + {a}) times ({n} + {b}) is = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The computed value of ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The calculated outcome of ({n} + {a}) * ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The outcome of evaluating x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The outcome of determining the product of ({n} + {a}) and ({n} + {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
            f"The outcome of evaluating x_plus_a_times_x_plus_b({n}, {a}, {b}) = ##x_plus_a_times_x_plus_b({n}, {a}, {b})",
        ],
        [
            f"Calculating the value of {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The result of evaluating {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"Calculation: x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The expression {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The outcome of evaluating x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The result obtained by calculating {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The value of {n} squared plus the product of ({a} + {b}) and ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The computed result of evaluating {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The sum of {n} squared and the product of ({a} + {b}) and ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The outcome of determining {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The numerical value of {n} squared plus the product of ({a} + {b}) and ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The result of evaluating x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The value of {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) is = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The result derived from evaluating x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The calculated result of {n} squared plus the product of ({a} + {b}) and ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The value of {n} squared plus the product of ({a} + {b}) and ({n} + {a} * {b}) is = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The value of {n}^2 plus the product of ({a} + {b}) and ({n} + {a} * {b}) equals = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The value of {n}^2 plus the product of ({a} + {b}) and ({n} + {a} * {b}) is = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The computed value of {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The calculated outcome of {n}^2 + ({a} + {b}) * ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The outcome of evaluating x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The outcome of determining the sum of {n} squared and the product of ({a} + {b}) and ({n} + {a} * {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
            f"The outcome of evaluating x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({n}, {a}, {b})",
        ],
    ]
    return random.choice(examples)


if __name__ == "__main__":
    from masked_token_sample_generator import MaskedTokenSamplesGenerator

    masked_example = MaskedTokenSamplesGenerator.create_masked_token_batches(
        get_batch_eighteen_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        masked_example,
        PretrainTasks.MASKED_TOKEN_PREDICTION,
    )
    print(sample)

    from next_token_sample_generator import NextTokenSamplesGenerator

    next_token_example = NextTokenSamplesGenerator.create_next_token_batches(
        get_batch_eighteen_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        next_token_example,
        PretrainTasks.NEXT_TOKEN_PREDICTION
    )
    print(sample)
