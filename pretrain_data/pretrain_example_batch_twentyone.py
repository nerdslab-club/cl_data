import random

from src.constants import PretrainTasks
from src.random_value_generator import RandomValueGenerator
from src.utility import Utility


def get_batch_twenty_example_paragraph():
    str1 = RandomValueGenerator.generate_random_string()
    str2 = RandomValueGenerator.generate_random_string()

    a = RandomValueGenerator.generate_random_integer(1, 20)
    b = RandomValueGenerator.generate_random_integer(1, 20)
    f1 = RandomValueGenerator.generate_random_float(-10.0, 100.0)
    f2 = RandomValueGenerator.generate_random_float(-10.0, 100.0)
    base = random.uniform(2, 10)
    degrees = RandomValueGenerator.generate_random_float(0.0, 360.0)
    value = RandomValueGenerator.generate_random_float(-10, 10, round_to=2)

    angle = RandomValueGenerator.generate_random_float(0, 360, round_to=2)

    vector = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 6), -10, 100
    )
    lst_str = ", ".join(str(num) for num in vector)

    vector1 = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 6), -10, 100
    )
    lst_str1 = ", ".join(str(num) for num in vector1)
    examples = [
        [
            f"Check if the strings '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}')",
            f"CHECK_SAME_STRING('{str1}', '{str2}') = ##check_same_string('{str1}', '{str2}')",
            f"Determine if '{str1}' is the same as '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"Verify if the strings '{str1}' and '{str2}' are identical = ##check_same_string('{str1}', '{str2}')",
            f"Check if '{str1}' is equal to '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"The result of checking if '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}')",
            f"Performing the check_same_string operation for '{str1}' and '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"Are '{str1}' and '{str2}' the same? = ##check_same_string('{str1}', '{str2}')",
            f"CHECK_SAME_STRING operation: '{str1}', '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"The result after checking if '{str1}' and '{str2}' are the same, what is it? = ##check_same_string('{str1}', '{str2}')",
            f"Do '{str1}' and '{str2}' represent the same string? = ##check_same_string('{str1}', '{str2}')",
            f"Let's check if '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}')",
            f"The check_same_string result for '{str1}' and '{str2}', is it true? = ##check_same_string('{str1}', '{str2}')",
            f"Checking if '{str1}' is the same as '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"The check_same_string result after checking if '{str1}' is the same as '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"The result after checking if '{str1}' and '{str2}' are the same, what is its value? = ##check_same_string('{str1}', '{str2}')",
            f"Let's determine if '{str1}' is the same as '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"The check_same_string result for '{str1}' and '{str2}' = ##check_same_string('{str1}', '{str2}')",
            f"The check_same_string result for '{str1}' and '{str2}', what is the result? = ##check_same_string('{str1}', '{str2}')",
            f"Do '{str1}' and '{str2}' correspond to the same string? = ##check_same_string('{str1}', '{str2}')",
            f"The result after checking if '{str1}' and '{str2}' are the same and provide the result = ##check_same_string('{str1}', '{str2}')",
            f"CHECK_SAME_STRING('{str1}', '{str2}'), what does it yield? = ##check_same_string('{str1}', '{str2}')",
            f"Checking if '{str1}' and '{str2}' are the same, ignoring case = ##check_same_string('{str1}', '{str2}')",
            f"The result after checking if '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}')",
            f"Check if '{str1}' and '{str2}' are the same, find the answer = ##check_same_string('{str1}', '{str2}')",
            f"Checking if '{str1}' and '{str2}' represent the same string, what does it give? = ##check_same_string('{str1}', '{str2}')",
            f"Let's find the result after checking if '{str1}' and '{str2}' are the same = ##check_same_string('{str1}', '{str2}')",
            f"The check_same_string result for '{str1}' and '{str2}', what is the output? = ##check_same_string('{str1}', '{str2}')",
            f"The result after checking if '{str1}' and '{str2}' are the same, what is it? = ##check_same_string('{str1}', '{str2}')",
        ],
        [
            f"Calculate the area of a circle with radius {f1} = ##circle_area({f1})",
            f"CIRCLE_AREA({f1}) = ##circle_area({f1})",
            f"Determine the area of a circle with radius {f1} = ##circle_area({f1})",
            f"Find the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The result of calculating the area of a circle with radius {f1} = ##circle_area({f1})",
            f"Performing the circle area calculation for the radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1} = ##circle_area({f1})",
            f"CIRCLE_AREA calculation: {f1} = ##circle_area({f1})",
            f"The result after calculating the area of a circle with radius {f1}, what is it? = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what does it give? = ##circle_area({f1})",
            f"Let's calculate the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, result is = ##circle_area({f1})",
            f"Calculating the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area result after calculating the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what is its value? = ##circle_area({f1})",
            f"Let's determine the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what is the result? = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what does it give? = ##circle_area({f1})",
            f"The area of a circle with radius {f1} and provide the result = ##circle_area({f1})",
            f"CIRCLE_AREA({f1}), what does it yield? = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, ignoring order = ##circle_area({f1})",
            f"The result after calculating the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what is it? = ##circle_area({f1})",
            f"Calculate the area of a circle with radius {f1}, find the answer = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what does it give? = ##circle_area({f1})",
            f"Let's find the result after calculating the area of a circle with radius {f1} = ##circle_area({f1})",
            f"The area of a circle with radius {f1}, what is the output? = ##circle_area({f1})",
            f"The result after calculating the area of a circle with radius {f1}, what is it? = ##circle_area({f1})",
        ],
        [
            f"Calculate the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"COMBINATION({a}, {b}) = ##combination({a}, {b})",
            f"Determine the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"Find the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The result of calculating the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"Performing the combination operation for {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"COMBINATION calculation: ({a}, {b}) = ##combination({a}, {b})",
            f"The result after calculating the combination of {a} objects taken {b} at a time, what is it? = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what does it give? = ##combination({a}, {b})",
            f"Let's calculate the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, result is = ##combination({a}, {b})",
            f"Calculating the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination result after calculating the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what is its value? = ##combination({a}, {b})",
            f"Let's determine the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what is the result? = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what does it give? = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time and provide the result = ##combination({a}, {b})",
            f"COMBINATION({a}, {b}), what does it yield? = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, ignoring order = ##combination({a}, {b})",
            f"The result after calculating the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what is it? = ##combination({a}, {b})",
            f"Calculate the combination of {a} objects taken {b} at a time, find the answer = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what does it give? = ##combination({a}, {b})",
            f"Let's find the result after calculating the combination of {a} objects taken {b} at a time = ##combination({a}, {b})",
            f"The combination of {a} objects taken {b} at a time, what is the output? = ##combination({a}, {b})",
            f"The result after calculating the combination of {a} objects taken {b} at a time, what is it? = ##combination({a}, {b})",
        ],
        [
            f"Calculate the cosine of {angle} degrees = ##cosine({angle})",
            f"Cosine value for {angle} degrees = ##cosine({angle})",
            f"The result of cosine({angle}) = ##cosine({angle})",
            f"Cos({angle}), what is it? = ##cosine({angle})",
            f"Find the cosine of {angle} degrees = ##cosine({angle})",
            f"Compute cos({angle}) = ##cosine({angle})",
            f"Cosine of {angle} degrees = ##cosine({angle})",
            f"The cosine value when angle is {angle} = ##cosine({angle})",
            f"Value of cos({angle}) = ##cosine({angle})",
            f"Cosine function for {angle} = ##cosine({angle})",
            f"The cos of {angle} degrees = ##cosine({angle})",
            f"Evaluate cos({angle}) = ##cosine({angle})",
            f"Cos({angle}), find the result = ##cosine({angle})",
            f"The cosine of the angle {angle} = ##cosine({angle})",
            f"Cosine({angle}), what does it give? = ##cosine({angle})",
            f"Cosine of the angle {angle}, calculate = ##cosine({angle})",
            f"Find cos({angle}) = ##cosine({angle})",
            f"Cos({angle}) value = ##cosine({angle})",
            f"The result of cos({angle}) calculation = ##cosine({angle})",
            f"Cosine function value at {angle} degrees = ##cosine({angle})",
        ],
        [
            f"Calculate the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"COSINE_SIMILARITY({vector}, {vector1}) = ##cosine_similarity({vector}, {vector1})",
            f"Determine the cosine similarity for vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"Find the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The result of calculating the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"Performing the cosine similarity calculation for vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"COSINE_SIMILARITY calculation: ({lst_str}, {lst_str1}) = ##cosine_similarity({vector}, {vector1})",
            f"The result after calculating the cosine similarity between vectors {lst_str} and {lst_str1}, what is it? = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what does it give? = ##cosine_similarity({vector}, {vector1})",
            f"Let's calculate the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, result is = ##cosine_similarity({vector}, {vector1})",
            f"Calculating the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity result after calculating between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what is its value? = ##cosine_similarity({vector}, {vector1})",
            f"Let's determine the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what is the result? = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what does it give? = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1} and provide the result = ##cosine_similarity({vector}, {vector1})",
            f"COSINE_SIMILARITY({vector}, {vector1}), what does it yield? = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, ignoring order = ##cosine_similarity({vector}, {vector1})",
            f"The result after calculating the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what is it? = ##cosine_similarity({vector}, {vector1})",
            f"Calculate the cosine similarity between vectors {lst_str} and {lst_str1}, find the answer = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what does it give? = ##cosine_similarity({vector}, {vector1})",
            f"Let's find the result after calculating the cosine similarity between vectors {lst_str} and {lst_str1} = ##cosine_similarity({vector}, {vector1})",
            f"The cosine similarity between vectors {lst_str} and {lst_str1}, what is the output? = ##cosine_similarity({vector}, {vector1})",
            f"The result after calculating the cosine similarity between vectors {lst_str} and {lst_str1}, what is it? = ##cosine_similarity({vector}, {vector1})",
        ],
        [
            f"Calculate the cube of the number {f1} = ##cube({f1})",
            f"CUBE({f1}) = ##cube({f1})",
            f"Find the cube value for the number {f1} = ##cube({f1})",
            f"The result of cubing the number {f1} = ##cube({f1})",
            f"Performing the cube operation on the number {f1} = ##cube({f1})",
            f"The cube of the number {f1} = ##cube({f1})",
            f"CUBE calculation: {f1} = ##cube({f1})",
            f"The result after cubing the number {f1}, what is it? = ##cube({f1})",
            f"The cube value of {f1}, what does it give? = ##cube({f1})",
            f"Let's find the cube value of {f1} = ##cube({f1})",
            f"Cube the number {f1}, result is = ##cube({f1})",
            f"Calculating the cube for the number {f1} = ##cube({f1})",
            f"The cubed result after cubing the number {f1} = ##cube({f1})",
            f"The cube of the number {f1}, what is its value? = ##cube({f1})",
            f"Let's determine the cube of the number {f1} = ##cube({f1})",
            f"The cube value of {f1} = ##cube({f1})",
            f"Cube {f1}, what is the result? = ##cube({f1})",
            f"The cube of the number {f1}, what does it give? = ##cube({f1})",
            f"Cube {f1} and provide the result = ##cube({f1})",
            f"CUBE({f1}), what does it yield? = ##cube({f1})",
            f"The cube value of {f1}, ignoring order = ##cube({f1})",
            f"The result after cubing the number {f1} = ##cube({f1})",
            f"The cube of the number {f1}, what is it? = ##cube({f1})",
            f"Calculate the cube for the number {f1}, find the answer = ##cube({f1})",
            f"The cube value of {f1}, what does it give? = ##cube({f1})",
            f"Let's find the result after cubing the number {f1} = ##cube({f1})",
            f"Cube {f1}, what is the output? = ##cube({f1})",
            f"The cubed result after cubing the number {f1}, what is it? = ##cube({f1})",
        ],
        [
            f"Calculate the cube root of the number {f1} = ##cube_root({f1})",
            f"CUBE_ROOT({f1}) = ##cube_root({f1})",
            f"Find the cube root value for the number {f1} = ##cube_root({f1})",
            f"The result of taking the cube root of {f1} = ##cube_root({f1})",
            f"Performing the cube root operation on the number {f1} = ##cube_root({f1})",
            f"The cube root of the number {f1} = ##cube_root({f1})",
            f"CUBE_ROOT calculation: {f1} = ##cube_root({f1})",
            f"The result after taking the cube root of {f1}, what is it? = ##cube_root({f1})",
            f"The cube root value of {f1}, what does it give? = ##cube_root({f1})",
            f"Let's find the cube root value of {f1} = ##cube_root({f1})",
            f"Cube root of {f1}, result is = ##cube_root({f1})",
            f"Calculating the cube root for the number {f1} = ##cube_root({f1})",
            f"The cube root result after taking the cube root of {f1} = ##cube_root({f1})",
            f"The cube root of the number {f1}, what is its value? = ##cube_root({f1})",
            f"Let's determine the cube root of the number {f1} = ##cube_root({f1})",
            f"The cube root value of {f1} = ##cube_root({f1})",
            f"Cube root {f1}, what is the result? = ##cube_root({f1})",
            f"The cube root of the number {f1}, what does it give? = ##cube_root({f1})",
            f"Cube root {f1} and provide the result = ##cube_root({f1})",
            f"CUBE_ROOT({f1}), what does it yield? = ##cube_root({f1})",
            f"The cube root value of {f1}, ignoring order = ##cube_root({f1})",
            f"The result after taking the cube root of {f1} = ##cube_root({f1})",
            f"The cube root of the number {f1}, what is it? = ##cube_root({f1})",
            f"Calculate the cube root for the number {f1}, find the answer = ##cube_root({f1})",
            f"The cube root value of {f1}, what does it give? = ##cube_root({f1})",
            f"Let's find the result after taking the cube root of {f1} = ##cube_root({f1})",
            f"Cube root {f1}, what is the output? = ##cube_root({f1})",
            f"The cube root result after taking the cube root of {f1}, what is it? = ##cube_root({f1})",
        ],
        [
            f"Convert the decimal number {a} to binary = ##decimal_to_binary({a})",
            f"DECIMAL_TO_BINARY({a}) = ##decimal_to_binary({a})",
            f"Translate the decimal number {a} to binary representation = ##decimal_to_binary({a})",
            f"Convert the decimal number {a} to its binary equivalent = ##decimal_to_binary({a})",
            f"The binary representation corresponding to the decimal number {a} = ##decimal_to_binary({a})",
            f"Converting the decimal number {a} to binary = ##decimal_to_binary({a})",
            f"DECIMAL_TO_BINARY calculation: {a} = ##decimal_to_binary({a})",
            f"The result after converting the decimal number {a} to binary, what is it? = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what does it give? = ##decimal_to_binary({a})",
            f"Let's convert the decimal number {a} to binary = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, result is = ##decimal_to_binary({a})",
            f"Translating the decimal number {a} to binary representation = ##decimal_to_binary({a})",
            f"The binary result after converting the decimal number {a} = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what is its value? = ##decimal_to_binary({a})",
            f"Let's determine the binary representation of the decimal number {a} = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a} = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what is the result? = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what does it give? = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a} and provide the result = ##decimal_to_binary({a})",
            f"DECIMAL_TO_BINARY({a}), what does it yield? = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, ignoring order = ##decimal_to_binary({a})",
            f"The result after converting the decimal number {a} to binary = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what is it? = ##decimal_to_binary({a})",
            f"Calculate the binary representation of the decimal number {a}, find the answer = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what does it give? = ##decimal_to_binary({a})",
            f"Let's find the result after converting the decimal number {a} to binary = ##decimal_to_binary({a})",
            f"The binary representation of the decimal number {a}, what is the output? = ##decimal_to_binary({a})",
            f"The result after converting the decimal number {a} to binary, what is it? = ##decimal_to_binary({a})",
        ],
        [
            f"Converting {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"{degrees} degrees in radians = ##degrees_to_radians({degrees})",
            f"Transform {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"The result of converting {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"{degrees} degrees as radians = ##degrees_to_radians({degrees})",
            f"Radians equivalent of {degrees} degrees = ##degrees_to_radians({degrees})",
            f"Convert {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"{degrees} degrees represented in radians = ##degrees_to_radians({degrees})",
            f"{degrees} degrees, what is it in radians? = ##degrees_to_radians({degrees})",
            f"Calculation: {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"{degrees} degrees in radians, what does it give? = ##degrees_to_radians({degrees})",
            f"{degrees} degrees to radians, find the result = ##degrees_to_radians({degrees})",
            f"Radians: {degrees} degrees = ##degrees_to_radians({degrees})",
            f"Let's convert {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"Find the radians for {degrees} degrees = ##degrees_to_radians({degrees})",
            f"{degrees} degrees, its radians? = ##degrees_to_radians({degrees})",
            f"{degrees} degrees in radians, result is = ##degrees_to_radians({degrees})",
            f"Convert {degrees} degrees into radians = ##degrees_to_radians({degrees})",
            f"The radians when you have {degrees} degrees = ##degrees_to_radians({degrees})",
            f"{degrees} degrees to radians, find the answer = ##degrees_to_radians({degrees})",
            f"Transformation: {degrees} degrees to radians = ##degrees_to_radians({degrees})",
            f"{degrees} degrees represented as radians = ##degrees_to_radians({degrees})",
            f"The radians for {degrees} degrees, what is it? = ##degrees_to_radians({degrees})",
            f"Convert {degrees} degrees to radians and tell the result = ##degrees_to_radians({degrees})",
            f"Let's find the radians for {degrees} degrees = ##degrees_to_radians({degrees})",
            f"{degrees} degrees, what will be its radians? = ##degrees_to_radians({degrees})",
        ],
        [
            f"Sort the list {lst_str} in descending order = ##descending_sort({vector})",
            f"DESCENDING_SORT({vector}) = ##descending_sort({vector})",
            f"Arrange the elements in {lst_str} in descending order = ##descending_sort({vector})",
            f"The result of sorting {lst_str} in descending order = ##descending_sort({vector})",
            f"Perform descending sort on the list {lst_str} = ##descending_sort({vector})",
            f"Sorting {lst_str} in descending order = ##descending_sort({vector})",
            f"The sorted version of {lst_str} in descending order = ##descending_sort({vector})",
            f"DESCENDING_SORT calculation: {lst_str} = ##descending_sort({vector})",
            f"The result after arranging {lst_str} in descending order, what is it? = ##descending_sort({vector})",
            f"The sorted order of {lst_str} in descending fashion, what does it give? = ##descending_sort({vector})",
            f"Let's sort {lst_str} in descending order = ##descending_sort({vector})",
            f"Sort the list {lst_str} in descending order, result is = ##descending_sort({vector})",
            f"Calculating the descending sort for {lst_str} = ##descending_sort({vector})",
            f"The sorted result after sorting {lst_str} in descending order = ##descending_sort({vector})",
            f"The arrangement of {lst_str} in descending order, what is its value? = ##descending_sort({vector})",
            f"Let's determine the sorted order of {lst_str} in descending fashion = ##descending_sort({vector})",
            f"The sorted version of {lst_str} in descending order = ##descending_sort({vector})",
            f"Sort {lst_str} in descending order, what is the result? = ##descending_sort({vector})",
            f"The arrangement of {lst_str} in descending order, what does it give? = ##descending_sort({vector})",
            f"Sort {lst_str} in descending order and provide the result = ##descending_sort({vector})",
            f"DESCENDING_SORT({vector}), what does it yield? = ##descending_sort({vector})",
            f"The sorted order of {lst_str} in descending fashion, ignoring order = ##descending_sort({vector})",
            f"The result after sorting {lst_str} in descending order = ##descending_sort({vector})",
            f"The arrangement of {lst_str} in descending order, what is it? = ##descending_sort({vector})",
            f"Calculate the descending sort for {lst_str}, find the answer = ##descending_sort({vector})",
            f"The sorted order of {lst_str} in descending fashion, what does it give? = ##descending_sort({vector})",
            f"Let's find the result after sorting {lst_str} in descending order = ##descending_sort({vector})",
            f"Sort {lst_str} in descending order, what is the output? = ##descending_sort({vector})",
            f"The sorted result after sorting {lst_str} in descending order, what is it? = ##descending_sort({vector})",
        ],
        [
            f"Dividing {f1} by {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2} = ##division({f1},{f2})",
            f"{f1} over {f2} = ##division({f1},{f2})",
            f"The result of {f1} divided by {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2}, what is it? = ##division({f1},{f2})",
            f"Calculation: {f1} / {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2}, equals? = ##division({f1},{f2})",
            f"Taking {f1} and dividing by {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2}, the answer? = ##division({f1},{f2})",
            f"{f1} and {f2} division = ##division({f1},{f2})",
            f"The division of {f1} and {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2} is? = ##division({f1},{f2})",
            f"{f1} divided by {f2} is equal to? = ##division({f1},{f2})",
            f"{f1} and {f2} divided, the result? = ##division({f1},{f2})",
            f"{f1} divided by {f2}, find the result = ##division({f1},{f2})",
            f"Quotient: {f1} / {f2} = ##division({f1},{f2})",
            f"Let's divide {f1} by {f2} = ##division({f1},{f2})",
            f"Find the result of {f1} divided by {f2} = ##division({f1},{f2})",
            f"{f1} and {f2}, their division? = ##division({f1},{f2})",
            f"{f1} divided by {f2}, result is = ##division({f1},{f2})",
            f"{f1} and {f2}, what will be the quotient? = ##division({f1},{f2})",
            f"Division: {f1} / {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2}, result? = ##division({f1},{f2})",
            f"{f1} separated into {f2} parts = ##division({f1},{f2})",
            f"{f1} distributed over {f2} = ##division({f1},{f2})",
            f"{f1} split into {f2} groups = ##division({f1},{f2})",
            f"The result when {f1} is divided by {f2} = ##division({f1},{f2})",
            f"{f1} divided by {f2}, in decimal = ##division({f1},{f2})",
            f"The quotient when {f1} is divided by {f2} = ##division({f1},{f2})",
        ],
        [
            f"Calculate the Euler's totient function value for {a} = ##euler_totient({a})",
            f"EULER_TOTIENT({a}) = ##euler_totient({a})",
            f"Determine the result of Euler's totient function for {a} = ##euler_totient({a})",
            f"Find the Euler's totient value for {a} = ##euler_totient({a})",
            f"The result of applying Euler's totient function to {a} = ##euler_totient({a})",
            f"Performing Euler's totient function operation for {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a} = ##euler_totient({a})",
            f"EULER_TOTIENT calculation: {a} = ##euler_totient({a})",
            f"The result after applying Euler's totient function to {a}, what is it? = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what does it give? = ##euler_totient({a})",
            f"Let's calculate the Euler's totient value for {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a}, result is = ##euler_totient({a})",
            f"Calculating the Euler's totient value for {a} = ##euler_totient({a})",
            f"The Euler's totient result after applying Euler's totient function to {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what is its value? = ##euler_totient({a})",
            f"Let's determine the Euler's totient value for {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what is the result? = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what does it give? = ##euler_totient({a})",
            f"The Euler's totient value for {a} and provide the result = ##euler_totient({a})",
            f"EULER_TOTIENT({a}), what does it yield? = ##euler_totient({a})",
            f"The Euler's totient value for {a}, ignoring order = ##euler_totient({a})",
            f"The result after applying Euler's totient function to {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what is it? = ##euler_totient({a})",
            f"Calculate the Euler's totient value for {a}, find the answer = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what does it give? = ##euler_totient({a})",
            f"Let's find the result after applying Euler's totient function to {a} = ##euler_totient({a})",
            f"The Euler's totient value for {a}, what is the output? = ##euler_totient({a})",
            f"The result after applying Euler's totient function to {a}, what is it? = ##euler_totient({a})",
        ],
        [
            f"Raising {f1} to the power of {f2} = ##exponentiation({f1},{f2})",
            f"{f1} raised to the power of {f2} = ##exponentiation({f1},{f2})",
            f"{f1} to the power of {f2} = ##exponentiation({f1},{f2})",
            f"{f1} exponentiated by {f2} = ##exponentiation({f1},{f2})",
            f"The result of {f1} raised to {f2} = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2}, what is it? = ##exponentiation({f1},{f2})",
            f"Calculation: {f1} ** {f2} = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2}, equals? = ##exponentiation({f1},{f2})",
            f"Taking {f1} and exponentiating by {f2} = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2}, the answer? = ##exponentiation({f1},{f2})",
            f"{f1} to the power of {f2}, find the result = ##exponentiation({f1},{f2})",
            f"{f1} and {f2} exponentiation = ##exponentiation({f1},{f2})",
            f"The exponentiation of {f1} and {f2} = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2} is? = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2} is equal to? = ##exponentiation({f1},{f2})",
            f"{f1} and {f2} exponentiated, the result? = ##exponentiation({f1},{f2})",
            f"Exponentiation: {f1} ** {f2} = ##exponentiation({f1},{f2})",
            f"Let's raise {f1} to the power of {f2} = ##exponentiation({f1},{f2})",
            f"Find the result of {f1} raised to {f2} = ##exponentiation({f1},{f2})",
            f"{f1} and {f2}, their exponentiation? = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2}, result is = ##exponentiation({f1},{f2})",
            f"{f1} and {f2}, what will be the result? = ##exponentiation({f1},{f2})",
            f"Exponentiation: {f1} ** {f2}, what is it? = ##exponentiation({f1},{f2})",
            f"{f1} raised to {f2}, result? = ##exponentiation({f1},{f2})",
            f"{f1} exponentiated by {f2}, the outcome? = ##exponentiation({f1},{f2})",
        ],
        [
            f"The factorial of {a} = ##factorial({a})",
            f"FACTORIAL({a}) = ##factorial({a})",
            f"Find the factorial of {a} = ##factorial({a})",
            f"The result of FACTORIAL({a}) = ##factorial({a})",
            f"Calculate the factorial of {a} = ##factorial({a})",
            f"Finding FACTORIAL for {a} = ##factorial({a})",
            f"The product of all positive integers up to {a} = ##factorial({a})",
            f"FACTORIAL calculation: {a} = ##factorial({a})",
            f"The factorial of {a}, what is it? = ##factorial({a})",
            f"The factorial of {a}, what does it give? = ##factorial({a})",
            f"Let's find the factorial of {a} = ##factorial({a})",
            f"Find the FACTORIAL for {a} = ##factorial({a})",
            f"The factorial of {a}, result is = ##factorial({a})",
            f"Calculating the factorial of {a} = ##factorial({a})",
            f"The result of multiplying all positive integers up to {a} = ##factorial({a})",
            f"The factorial of {a}, what is its value? = ##factorial({a})",
            f"Let's determine the factorial of {a} = ##factorial({a})",
            f"The product of all integers from 1 to {a} = ##factorial({a})",
            f"{a}!, what is its value? = ##factorial({a})",
            f"Finding the factorial of {a} = ##factorial({a})",
            f"The factorial of {a}, what is its value? = ##factorial({a})",
            f"Find the factorial of {a} and provide the result = ##factorial({a})",
            f"FACTORIAL({a}), what does it yield? = ##factorial({a})",
            f"The factorial of {a}, ignoring order = ##factorial({a})",
            f"The result of multiplying all integers from 1 to {a} = ##factorial({a})",
            f"The product of all positive integers less than or equal to {a} = ##factorial({a})",
            f"The factorial of {a}, what is it? = ##factorial({a})",
            f"Calculate the factorial of {a}, find the answer = ##factorial({a})",
            f"The factorial of {a}, what does it give? = ##factorial({a})",
            f"Let's find the result of multiplying all integers up to {a} = ##factorial({a})",
            f"{a}!, its value, what is the result? = ##factorial({a})",
        ],
        [
            f"Convert the float value {f1} to an integer = ##float_to_int({f1})",
            f"FLOAT_TO_INT({f1}) = ##float_to_int({f1})",
            f"Change the float value {f1} to an integer = ##float_to_int({f1})",
            f"Find the integer equivalent of the float value {f1} = ##float_to_int({f1})",
            f"The result of converting the float value {f1} to an integer = ##float_to_int({f1})",
            f"Performing the float to integer conversion on the value {f1} = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1} = ##float_to_int({f1})",
            f"FLOAT_TO_INT calculation: {f1} = ##float_to_int({f1})",
            f"The result after converting the float value {f1} to an integer, what is it? = ##float_to_int({f1})",
            f"The integer equivalent of {f1}, what does it give? = ##float_to_int({f1})",
            f"Let's convert the float value {f1} to an integer = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, result is = ##float_to_int({f1})",
            f"Converting the float value {f1} to an integer = ##float_to_int({f1})",
            f"The conversion result after converting the float value {f1} to an integer = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, what is its value? = ##float_to_int({f1})",
            f"Let's determine the integer equivalent of the float value {f1} = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1} = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, what is the result? = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, what does it give? = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1} and provide the result = ##float_to_int({f1})",
            f"FLOAT_TO_INT({f1}), what does it yield? = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, ignoring order = ##float_to_int({f1})",
            f"The result after converting the float value {f1} to an integer = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, what is it? = ##float_to_int({f1})",
            f"Convert the float value {f1} to an integer, find the answer = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, what does it give? = ##float_to_int({f1})",
            f"Let's find the result after converting the float value {f1} = ##float_to_int({f1})",
            f"The integer equivalent of the float value {f1}, what is the output? = ##float_to_int({f1})",
            f"The result after converting the float value {f1} to an integer, what is it? = ##float_to_int({f1})",
        ],
        [
            f"Floor dividing {a} by {b} = ##floor_division({a},{b})",
            f"{a} floor divided by {b} = ##floor_division({a},{b})",
            f"{a} divided by {b} using floor division = ##floor_division({a},{b})",
            f"The result of {a} floor divided by {b} = ##floor_division({a},{b})",
            f"{a} divided by {b} using floor division, what is it? = ##floor_division({a},{b})",
            f"Calculation: {a} // {b} = ##floor_division({a},{b})",
            f"{a} floor divided by {b}, equals? = ##floor_division({a},{b})",
            f"Taking {a} and floor dividing by {b} = ##floor_division({a},{b})",
            f"{a} divided by {b} with floor division, the answer? = ##floor_division({a},{b})",
            f"Quotient when {a} is floor divided by {b} = ##floor_division({a},{b})",
            f"{a} and {b} floor division = ##floor_division({a},{b})",
            f"The floor division of {a} and {b} = ##floor_division({a},{b})",
            f"{a} divided by {b} using floor division, is? = ##floor_division({a},{b})",
            f"{a} divided by {b} using floor division, result is = ##floor_division({a},{b})",
            f"{a} and {b} floor divided, the result? = ##floor_division({a},{b})",
            f"Floor division: {a} // {b} = ##floor_division({a},{b})",
            f"Let's floor divide {a} by {b} = ##floor_division({a},{b})",
            f"Find the result of {a} divided by {b} using floor division = ##floor_division({a},{b})",
            f"{a} and {b}, their floor division? = ##floor_division({a},{b})",
            f"{a} divided by {b} using floor division, the outcome? = ##floor_division({a},{b})",
            f"{a} and {b}, what will be the quotient using floor division? = ##floor_division({a},{b})",
            f"Floor division calculation: {a} // {b} = ##floor_division({a},{b})",
            f"{a} divided by {b} using floor division, result? = ##floor_division({a},{b})",
            f"{a} divided into {b} parts using floor division = ##floor_division({a},{b})",
            f"{a} distributed over {b} with floor division = ##floor_division({a},{b})",
            f"The result when {a} is divided by {b} using floor division = ##floor_division({a},{b})",
            f"{a} divided by {b} with floor division, in whole numbers = ##floor_division({a},{b})",
            f"The quotient when {a} is floor divided by {b} = ##floor_division({a},{b})",
        ],
        [
            f"The floor of {f1} = ##floor({f1})",
            f"FLOOR({f1}) = ##floor({f1})",
            f"Round down {f1} to the nearest whole number = ##floor({f1})",
            f"The largest integer less than or equal to {f1} = ##floor({f1})",
            f"The result of FLOOR({f1}) = ##floor({f1})",
            f"Find the floor of {f1} = ##floor({f1})",
            f"Rounding down {f1} = ##floor({f1})",
            f"{f1}, rounded down to the nearest integer = ##floor({f1})",
            f"The largest whole number not greater than {f1} = ##floor({f1})",
            f"FLOOR calculation: {f1} = ##floor({f1})",
            f"The largest integer less than or equal to {f1}, what is it? = ##floor({f1})",
            f"The largest integer less than or equal to {f1}, what does it give? = ##floor({f1})",
            f"Let's round down {f1} to the nearest whole number = ##floor({f1})",
            f"Find the FLOOR for {f1} = ##floor({f1})",
            f"The largest integer less than or equal to {f1}, result is = ##floor({f1})",
            f"Rounding {f1} down = ##floor({f1})",
            f"{f1}, what is its floor? = ##floor({f1})",
            f"The largest whole number not greater than {f1}, find the answer = ##floor({f1})",
            f"Calculate FLOOR({f1}) = ##floor({f1})",
            f"Round {f1} down to the nearest integer = ##floor({f1})",
            f"The largest integer less than or equal to {f1}, what is its value? = ##floor({f1})",
            f"Rounding down operation for {f1} = ##floor({f1})",
            f"Let's determine the floor of {f1} = ##floor({f1})",
            f"{f1}, rounded down, what is the result? = ##floor({f1})",
            f"The largest whole number not greater than {f1}, what is it? = ##floor({f1})",
            f"Find the floor of {f1} and provide the result = ##floor({f1})",
            f"FLOOR({f1}), what does it yield? = ##floor({f1})",
            f"Rounded down value for {f1} = ##floor({f1})",
        ],
        [
            f"The greatest common divisor of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"GCD of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"Find the greatest common divisor of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"The result of finding GCD({f1}, {f2}) = ##gcd({f1}, {f2})",
            f"GCD for {f1} and {f2} = ##gcd({f1}, {f2})",
            f"Calculate the greatest common divisor of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"Finding GCD for {f1} and {f2} = ##gcd({f1}, {f2})",
            f"{f1} and {f2}, what is their greatest common divisor? = ##gcd({f1}, {f2})",
            f"GCD calculation: {f1} and {f2} = ##gcd({f1}, {f2})",
            f"The common factor of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"The largest number that divides both {f1} and {f2} = ##gcd({f1}, {f2})",
            f"GCD({f1}, {f2}), what does it give? = ##gcd({f1}, {f2})",
            f"The GCD for {f1} and {f2} = ##gcd({f1}, {f2})",
            f"Let's find the greatest common divisor of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"Find the GCD for {f1} and {f2} = ##gcd({f1}, {f2})",
            f"{f1} and {f2}, their GCD? = ##gcd({f1}, {f2})",
            f"The greatest common divisor when you have {f1} and {f2} = ##gcd({f1}, {f2})",
            f"GCD({f1}, {f2}), result is = ##gcd({f1}, {f2})",
            f"Common divisor of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"The divisor common to {f1} and {f2} = ##gcd({f1}, {f2})",
            f"GCD of {f1} and {f2}, find the answer = ##gcd({f1}, {f2})",
            f"Calculate GCD({f1}, {f2}) = ##gcd({f1}, {f2})",
            f"The common factor for {f1} and {f2} = ##gcd({f1}, {f2})",
            f"Let's determine the GCD of {f1} and {f2} = ##gcd({f1}, {f2})",
            f"{f1} and {f2}, what is their common divisor? = ##gcd({f1}, {f2})",
            f"GCD calculation for {f1} and {f2} = ##gcd({f1}, {f2})",
            f"The greatest common divisor of numbers {f1} and {f2} = ##gcd({f1}, {f2})",
            f"GCD: {f1} and {f2} = ##gcd({f1}, {f2})",
        ],
        [
            f"Calculate the geometric mean of the list {lst_str} = ##geometric_mean({vector})",
            f"GEOMETRIC_MEAN({vector}) = ##geometric_mean({vector})",
            f"Determine the geometric mean of the elements in the list {lst_str} = ##geometric_mean({vector})",
            f"Find the geometric mean value for the list {lst_str} = ##geometric_mean({vector})",
            f"The result of calculating the geometric mean of {lst_str} = ##geometric_mean({vector})",
            f"Performing the geometric mean operation on the list {lst_str} = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str} = ##geometric_mean({vector})",
            f"GEOMETRIC_MEAN calculation: {lst_str} = ##geometric_mean({vector})",
            f"The result after calculating the geometric mean of {lst_str}, what is it? = ##geometric_mean({vector})",
            f"The geometric mean value of {lst_str}, what does it give? = ##geometric_mean({vector})",
            f"Let's find the geometric mean value of the list {lst_str} = ##geometric_mean({vector})",
            f"Geometric mean of the list {lst_str}, result is = ##geometric_mean({vector})",
            f"Calculating the geometric mean for the list {lst_str} = ##geometric_mean({vector})",
            f"The geometric mean result after calculating the geometric mean of {lst_str} = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str}, what is its value? = ##geometric_mean({vector})",
            f"Let's determine the geometric mean of the list {lst_str} = ##geometric_mean({vector})",
            f"The geometric mean value of the list {lst_str} = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str}, what is the result? = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str}, what does it give? = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str} and provide the result = ##geometric_mean({vector})",
            f"GEOMETRIC_MEAN({vector}), what does it yield? = ##geometric_mean({vector})",
            f"The geometric mean value of the list {lst_str}, ignoring order = ##geometric_mean({vector})",
            f"The result after calculating the geometric mean of {lst_str} = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str}, what is it? = ##geometric_mean({vector})",
            f"Calculate the geometric mean of the list {lst_str}, find the answer = ##geometric_mean({vector})",
            f"The geometric mean of the list {lst_str}, what does it give? = ##geometric_mean({vector})",
            f"Let's find the result after calculating the geometric mean of {lst_str} = ##geometric_mean({vector})",
            f"Geometric mean of the list {lst_str}, what is the output? = ##geometric_mean({vector})",
            f"The result after calculating the geometric mean of {lst_str}, what is it? = ##geometric_mean({vector})",
        ],
        [
            f"Calculate the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"GEOMETRIC_SERIES_SUM({f1}, {f2}, {a}) = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Determine the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Find the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The result of calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Performing the geometric series sum operation for initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"GEOMETRIC_SERIES_SUM calculation: ({f1}, {f2}, {a}) = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The result after calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what is it? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what does it give? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Let's calculate the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, result is = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum result after calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what is its value? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Let's determine the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what is the result? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what does it give? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms and provide the result = ##geometric_series_sum({f1}, {f2}, {a})",
            f"GEOMETRIC_SERIES_SUM({f1}, {f2}, {a}), what does it yield? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, ignoring order = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The result after calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what is it? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Calculate the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, find the answer = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what does it give? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"Let's find the result after calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what is the output? = ##geometric_series_sum({f1}, {f2}, {a})",
            f"The result after calculating the sum of a geometric series with initial term {f1}, common ratio {f2}, and {a} terms, what is it? = ##geometric_series_sum({f1}, {f2}, {a})",
        ],
        [
            "Get the mathematical constant e = ##get_e()",
            "GET_E() = ##get_e()",
            "Retrieve the value of e = ##get_e()",
            "Obtain the constant e = ##get_e()",
            "The result of calling the get_e function = ##get_e()",
            "Performing the get_e operation = ##get_e()",
            "The value of the mathematical constant e = ##get_e()",
            "GET_E operation = ##get_e()",
            "The result after calling the get_e function, what is it? = ##get_e()",
            "What is the value of e? = ##get_e()",
            "Let's get the value of e = ##get_e()",
            "The constant e, what is its value? = ##get_e()",
            "Getting the value of e = ##get_e()",
            "The value of e, result is = ##get_e()",
            "Obtaining the constant e, what does it give? = ##get_e()",
            "Let's determine the value of e = ##get_e()",
            "The constant e = ##get_e()",
            "The value of e, what is the result? = ##get_e()",
            "The constant e, what does it give? = ##get_e()",
            "The constant e and provide the result = ##get_e()",
            "GET_E(), what does it yield? = ##get_e()",
            "The constant e, ignoring order = ##get_e()",
            "The result after calling the get_e function = ##get_e()",
            "Call get_e, find the answer = ##get_e()",
            "Calling get_e, what does it give? = ##get_e()",
            "Let's find the result after calling the get_e function = ##get_e()",
            "The constant e, what is the output? = ##get_e()",
            "The result after calling the get_e function, what is it? = ##get_e()",
        ],
        [
            "Get the mathematical constant pi = ##get_pi()",
            "GET_PI() = ##get_pi()",
            "Retrieve the value of pi = ##get_pi()",
            "Obtain the constant pi = ##get_pi()",
            "The result of calling the get_pi function = ##get_pi()",
            "Performing the get_pi operation = ##get_pi()",
            "The value of the mathematical constant pi = ##get_pi()",
            "GET_PI operation = ##get_pi()",
            "The result after calling the get_pi function, what is it? = ##get_pi()",
            "What is the value of pi? = ##get_pi()",
            "Let's get the value of pi = ##get_pi()",
            "The constant pi, what is its value? = ##get_pi()",
            "Getting the value of pi = ##get_pi()",
            "The value of pi, result is = ##get_pi()",
            "Obtaining the constant pi, what does it give? = ##get_pi()",
            "Let's determine the value of pi = ##get_pi()",
            "The constant pi = ##get_pi()",
            "The value of pi, what is the result? = ##get_pi()",
            "The constant pi, what does it give? = ##get_pi()",
            "The constant pi and provide the result = ##get_pi()",
            "GET_PI(), what does it yield? = ##get_pi()",
            "The constant pi, ignoring order = ##get_pi()",
            "The result after calling the get_pi function = ##get_pi()",
            "Call get_pi, find the answer = ##get_pi()",
            "Calling get_pi, what does it give? = ##get_pi()",
            "Let's find the result after calling the get_pi function = ##get_pi()",
            "The constant pi, what is the output? = ##get_pi()",
            "The result after calling the get_pi function, what is it? = ##get_pi()",
        ],
        [
            f"The greater value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"GREATEST_VALUE({f1}, {f2}) = ##greatest_value({f1}, {f2})",
            f"Find the greatest value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"The result of GREATEST_VALUE({f1}, {f2}) = ##greatest_value({f1}, {f2})",
            f"The larger value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"Calculate the greatest value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"Finding greatest value for {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"The value greater than or equal to both {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"The maximum value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"greatest value calculation: {f1}, {f2} = ##greatest_value({f1}, {f2})",
            f"The larger value between {f1} and {f2}, what is it? = ##greatest_value({f1}, {f2})",
            f"The larger value between {f1} and {f2}, what does it give? = ##greatest_value({f1}, {f2})",
            f"Let's find the greatest value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"Find the greatest value for {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"The larger value between {f1} and {f2}, result is = ##greatest_value({f1}, {f2})",
            f"Calculating the greatest value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"The value greater than or equal to both {f1} and {f2}, what is it? = ##greatest_value({f1}, {f2})",
            f"The maximum value between {f1} and {f2}, find the answer = ##greatest_value({f1}, {f2})",
            f"Calculate greatest value({f1}, {f2}) = ##greatest_value({f1}, {f2})",
            f"The greater value between {f1} and {f2}, what is its value? = ##greatest_value({f1}, {f2})",
            f"Let's determine the greatest value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"{f1} and {f2}, what is their larger value? = ##greatest_value({f1}, {f2})",
            f"Finding the greatest value between {f1} and {f2} = ##greatest_value({f1}, {f2})",
            f"The larger value between {f1} and {f2}, what is its value? = ##greatest_value({f1}, {f2})",
            f"Find the greatest value between {f1} and {f2} and provide the result = ##greatest_value({f1}, {f2})",
            f"greatest value({f1}, {f2}), what does it yield? = ##greatest_value({f1}, {f2})",
            f"The greater value between {f1} and {f2}, ignoring direction = ##greatest_value({f1}, {f2})",
        ],
        [
            f"Hyperbolic cosine of {value} = ##hyperbolic_cosine({value})",
            f"Cosh({value}) = ##hyperbolic_cosine({value})",
            f"The hyperbolic cosine value for {value} = ##hyperbolic_cosine({value})",
            f"Calculate hyperbolic cosine for {value} = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine function applied to {value} = ##hyperbolic_cosine({value})",
            f"Cosh({value}), what is it? = ##hyperbolic_cosine({value})",
            f"The result of cosh({value}) = ##hyperbolic_cosine({value})",
            f"Find the hyperbolic cosine of {value} = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine value when input is {value} = ##hyperbolic_cosine({value})",
            f"Input: {value}, hyperbolic cosine? = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine of {value}, tell me = ##hyperbolic_cosine({value})",
            f"Cosh({value}), the answer? = ##hyperbolic_cosine({value})",
            f"Calculate cosh({value}) = ##hyperbolic_cosine({value})",
            f"The hyperbolic cosine for input {value} = ##hyperbolic_cosine({value})",
            f"What is cosh({value})? = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine of {value}, result? = ##hyperbolic_cosine({value})",
            f"Cosh({value}), find the value = ##hyperbolic_cosine({value})",
            f"The hyperbolic cosine value for input {value} = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine of input {value}, what does it give? = ##hyperbolic_cosine({value})",
            f"Find cosh({value}) = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine function for input {value} = ##hyperbolic_cosine({value})",
            f"Hyperbolic cosine of {value}, what is the result? = ##hyperbolic_cosine({value})",
        ],
        [
            f"Hyperbolic sine of {value} = ##hyperbolic_sine({value})",
            f"Sinh({value}) = ##hyperbolic_sine({value})",
            f"The hyperbolic sine value for {value} = ##hyperbolic_sine({value})",
            f"Calculate hyperbolic sine for {value} = ##hyperbolic_sine({value})",
            f"Hyperbolic sine function applied to {value} = ##hyperbolic_sine({value})",
            f"Sinh({value}), what is it? = ##hyperbolic_sine({value})",
            f"The result of sinh({value}) = ##hyperbolic_sine({value})",
            f"Find the hyperbolic sine of {value} = ##hyperbolic_sine({value})",
            f"Hyperbolic sine value when input is {value} = ##hyperbolic_sine({value})",
            f"Input: {value}, hyperbolic sine? = ##hyperbolic_sine({value})",
            f"Hyperbolic sine of {value}, tell me = ##hyperbolic_sine({value})",
            f"Sinh({value}), the answer? = ##hyperbolic_sine({value})",
            f"Calculate sinh({value}) = ##hyperbolic_sine({value})",
            f"The hyperbolic sine for input {value} = ##hyperbolic_sine({value})",
            f"What is sinh({value})? = ##hyperbolic_sine({value})",
            f"Hyperbolic sine of {value}, result? = ##hyperbolic_sine({value})",
            f"Sinh({value}), find the value = ##hyperbolic_sine({value})",
            f"The hyperbolic sine value for input {value} = ##hyperbolic_sine({value})",
            f"Hyperbolic sine of input {value}, what does it give? = ##hyperbolic_sine({value})",
            f"Find sinh({value}) = ##hyperbolic_sine({value})",
            f"Hyperbolic sine function for input {value} = ##hyperbolic_sine({value})",
            f"Hyperbolic sine of {value}, what is the result? = ##hyperbolic_sine({value})",
        ],
        [
            f"Hyperbolic tangent of {value} = ##hyperbolic_tangent({value})",
            f"Tanh({value}) = ##hyperbolic_tangent({value})",
            f"The hyperbolic tangent value for {value} = ##hyperbolic_tangent({value})",
            f"Calculate hyperbolic tangent for {value} = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent function applied to {value} = ##hyperbolic_tangent({value})",
            f"Tanh({value}), what is it? = ##hyperbolic_tangent({value})",
            f"The result of tanh({value}) = ##hyperbolic_tangent({value})",
            f"Find the hyperbolic tangent of {value} = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent value when input is {value} = ##hyperbolic_tangent({value})",
            f"Input: {value}, hyperbolic tangent? = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent of {value}, tell me = ##hyperbolic_tangent({value})",
            f"Tanh({value}), the answer? = ##hyperbolic_tangent({value})",
            f"Calculate tanh({value}) = ##hyperbolic_tangent({value})",
            f"The hyperbolic tangent for input {value} = ##hyperbolic_tangent({value})",
            f"What is tanh({value})? = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent of {value}, result? = ##hyperbolic_tangent({value})",
            f"Tanh({value}), find the value = ##hyperbolic_tangent({value})",
            f"The hyperbolic tangent value for input {value} = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent of input {value}, what does it give? = ##hyperbolic_tangent({value})",
            f"Find tanh({value}) = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent function for input {value} = ##hyperbolic_tangent({value})",
            f"Hyperbolic tangent of {value}, what is the result? = ##hyperbolic_tangent({value})",
        ],
        [
            f"Calculate the hypotenuse for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"HYPOTENUSE({f1}, {f2}) = ##hypotenuse({f1}, {f2})",
            f"Determine the hypotenuse for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"Find the hypotenuse value for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The result of calculating the hypotenuse for sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"Performing the hypotenuse operation on the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"HYPOTENUSE calculation: ({f1}, {f2}) = ##hypotenuse({f1}, {f2})",
            f"The result after calculating the hypotenuse for sides {f1} and {f2}, what is it? = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse value of sides {f1} and {f2}, what does it give? = ##hypotenuse({f1}, {f2})",
            f"Let's calculate the hypotenuse for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse value for the sides {f1} and {f2}, result is = ##hypotenuse({f1}, {f2})",
            f"Calculating the hypotenuse for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse result after calculating the hypotenuse for sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for sides {f1} and {f2}, what is its value? = ##hypotenuse({f1}, {f2})",
            f"Let's determine the hypotenuse for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse value for the sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for the sides {f1} and {f2}, what is the result? = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for the sides {f1} and {f2}, what does it give? = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for the sides {f1} and {f2} and provide the result = ##hypotenuse({f1}, {f2})",
            f"HYPOTENUSE({f1}, {f2}), what does it yield? = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse value for the sides {f1} and {f2}, ignoring order = ##hypotenuse({f1}, {f2})",
            f"The result after calculating the hypotenuse for sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for the sides {f1} and {f2}, what is it? = ##hypotenuse({f1}, {f2})",
            f"Calculate the hypotenuse for the sides {f1} and {f2}, find the answer = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for the sides {f1} and {f2}, what does it give? = ##hypotenuse({f1}, {f2})",
            f"Let's find the result after calculating the hypotenuse for sides {f1} and {f2} = ##hypotenuse({f1}, {f2})",
            f"The hypotenuse for the sides {f1} and {f2}, what is the output? = ##hypotenuse({f1}, {f2})",
            f"The result after calculating the hypotenuse for sides {f1} and {f2}, what is it? = ##hypotenuse({f1}, {f2})",
        ],
        [
            f"Convert the integer value {a} to a float = ##int_to_float({a})",
            f"INT_TO_FLOAT({a}) = ##int_to_float({a})",
            f"Change the integer value {a} to a float = ##int_to_float({a})",
            f"Find the float equivalent of the integer value {a} = ##int_to_float({a})",
            f"The result of converting the integer value {a} to a float = ##int_to_float({a})",
            f"Performing the integer to float conversion on the value {a} = ##int_to_float({a})",
            f"The float equivalent of the integer value {a} = ##int_to_float({a})",
            f"INT_TO_FLOAT calculation: {a} = ##int_to_float({a})",
            f"The result after converting the integer value {a} to a float, what is it? = ##int_to_float({a})",
            f"The float equivalent of {a}, what does it give? = ##int_to_float({a})",
            f"Let's convert the integer value {a} to a float = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, result is = ##int_to_float({a})",
            f"Converting the integer value {a} to a float = ##int_to_float({a})",
            f"The conversion result after converting the integer value {a} to a float = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, what is its value? = ##int_to_float({a})",
            f"Let's determine the float equivalent of the integer value {a} = ##int_to_float({a})",
            f"The float equivalent of the integer value {a} = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, what is the result? = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, what does it give? = ##int_to_float({a})",
            f"The float equivalent of the integer value {a} and provide the result = ##int_to_float({a})",
            f"INT_TO_FLOAT({a}), what does it yield? = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, ignoring order = ##int_to_float({a})",
            f"The result after converting the integer value {a} to a float = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, what is it? = ##int_to_float({a})",
            f"Convert the integer value {a} to a float, find the answer = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, what does it give? = ##int_to_float({a})",
            f"Let's find the result after converting the integer value {a} = ##int_to_float({a})",
            f"The float equivalent of the integer value {a}, what is the output? = ##int_to_float({a})",
            f"The result after converting the integer value {a} to a float, what is it? = ##int_to_float({a})",
        ],
        [
            f"Invert the number {f1} = ##invert_number({f1})",
            f"INVERT_NUMBER({f1}) = ##invert_number({f1})",
            f"Reverse the digits of the number {f1} = ##invert_number({f1})",
            f"Find the inverted value of the number {f1} = ##invert_number({f1})",
            f"The result of inverting the number {f1} = ##invert_number({f1})",
            f"Performing the invert operation on the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1} = ##invert_number({f1})",
            f"INVERT_NUMBER calculation: {f1} = ##invert_number({f1})",
            f"The result after inverting the number {f1}, what is it? = ##invert_number({f1})",
            f"The inverted value of {f1}, what does it give? = ##invert_number({f1})",
            f"Let's invert the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1}, result is = ##invert_number({f1})",
            f"Inverting the number {f1} = ##invert_number({f1})",
            f"The inverted result after inverting the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1}, what is its value? = ##invert_number({f1})",
            f"Let's determine the inverted value of the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1}, what is the result? = ##invert_number({f1})",
            f"The inverted value of the number {f1}, what does it give? = ##invert_number({f1})",
            f"The inverted value of the number {f1} and provide the result = ##invert_number({f1})",
            f"INVERT_NUMBER({f1}), what does it yield? = ##invert_number({f1})",
            f"The inverted value of the number {f1}, ignoring order = ##invert_number({f1})",
            f"The result after inverting the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1}, what is it? = ##invert_number({f1})",
            f"Invert the number {f1}, find the answer = ##invert_number({f1})",
            f"The inverted value of the number {f1}, what does it give? = ##invert_number({f1})",
            f"Let's find the result after inverting the number {f1} = ##invert_number({f1})",
            f"The inverted value of the number {f1}, what is the output? = ##invert_number({f1})",
            f"The result after inverting the number {f1}, what is it? = ##invert_number({f1})",
        ],
        [
            f"Determine if the integer {a} is even = ##is_even({a})",
            f"IS_EVEN({a}) = ##is_even({a})",
            f"Check if {a} is an even number = ##is_even({a})",
            f"Is {a} an even number? = ##is_even({a})",
            f"Verify whether {a} is an even number = ##is_even({a})",
            f"Checking if {a} is even = ##is_even({a})",
            f"IS_EVEN calculation: {a} = ##is_even({a})",
            f"Is {a} divisible by 2? = ##is_even({a})",
            f"Check if {a} is an even integer = ##is_even({a})",
            f"Let's determine if {a} is an even number = ##is_even({a})",
            f"Is {a} even or odd? = ##is_even({a})",
            f"Determine the evenness of {a} = ##is_even({a})",
            f"Checking the evenness of {a} = ##is_even({a})",
            f"Is {a} divisible evenly by 2? = ##is_even({a})",
            f"Check if {a} is an even or odd number = ##is_even({a})",
            f"Determine whether {a} is even = ##is_even({a})",
            f"Verify if {a} is an even number = ##is_even({a})",
            f"Check if {a} is an even or odd integer = ##is_even({a})",
            f"IS_EVEN({a}), what does it yield? = ##is_even({a})",
            f"Checking the divisibility of {a} by 2 = ##is_even({a})",
            f"Is {a} an even number or not? = ##is_even({a})",
            f"Determine if {a} is divisible by 2 = ##is_even({a})",
            f"Check if {a} is an even or odd number, result is = ##is_even({a})",
            f"Let's find out if {a} is an even number = ##is_even({a})",
            f"Is {a} divisible by 2 without remainder? = ##is_even({a})",
            f"Check if {a} is an even integer or not = ##is_even({a})",
            f"Verify the evenness of {a} = ##is_even({a})",
            f"IS_EVEN({a}), is it true or false? = ##is_even({a})",
            f"Determine if {a} is divisible evenly by 2 = ##is_even({a})",
            f"Is {a} an even or odd integer? = ##is_even({a})",
            f"Check if {a} is divisible by 2, what is the answer? = ##is_even({a})",
        ],
        [
            f"Determine if the integer {a} is odd = ##is_odd({a})",
            f"IS_ODD({a}) = ##is_odd({a})",
            f"Check if {a} is an odd number = ##is_odd({a})",
            f"Is {a} an odd number? = ##is_odd({a})",
            f"Verify whether {a} is an odd number = ##is_odd({a})",
            f"Checking if {a} is odd = ##is_odd({a})",
            f"IS_ODD calculation: {a} = ##is_odd({a})",
            f"Is {a} not divisible by 2? = ##is_odd({a})",
            f"Check if {a} is an odd integer = ##is_odd({a})",
            f"Let's determine if {a} is an odd number = ##is_odd({a})",
            f"Is {a} even or odd? = ##is_odd({a})",
            f"Determine the oddness of {a} = ##is_odd({a})",
            f"Checking the oddness of {a} = ##is_odd({a})",
            f"Is {a} not divisible evenly by 2? = ##is_odd({a})",
            f"Check if {a} is an even or odd number = ##is_odd({a})",
            f"Determine whether {a} is odd = ##is_odd({a})",
            f"Verify if {a} is an odd number = ##is_odd({a})",
            f"Check if {a} is an even or odd integer = ##is_odd({a})",
            f"IS_ODD({a}), what does it yield? = ##is_odd({a})",
            f"Checking the non-divisibility of {a} by 2 = ##is_odd({a})",
            f"Is {a} an odd number or not? = ##is_odd({a})",
            f"Determine if {a} is not divisible by 2 = ##is_odd({a})",
            f"Check if {a} is an even or odd number, result is = ##is_odd({a})",
            f"Let's find out if {a} is an odd number = ##is_odd({a})",
            f"Is {a} not divisible by 2 without remainder? = ##is_odd({a})",
            f"Check if {a} is an odd integer or not = ##is_odd({a})",
            f"Verify the oddness of {a} = ##is_odd({a})",
            f"IS_ODD({a}), is it true or false? = ##is_odd({a})",
            f"Determine if {a} is not divisible evenly by 2 = ##is_odd({a})",
            f"Is {a} an even or odd integer? = ##is_odd({a})",
            f"Check if {a} is not divisible by 2, what is the answer? = ##is_odd({a})",
        ],
        [
            f"Check if {a} is a perfect cube = ##is_perfect_cube({a})",
            f"IS_PERFECT_CUBE({a}) = ##is_perfect_cube({a})",
            f"Determine if {a} is a perfect cube = ##is_perfect_cube({a})",
            f"The result of is perfect cube({a}) = ##is_perfect_cube({a})",
            f"Verify whether {a} is a perfect cube = ##is_perfect_cube({a})",
            f"Checking is perfect cube for {a} = ##is_perfect_cube({a})",
            f"Decide if {a} is a perfect cube = ##is_perfect_cube({a})",
            f"is perfect cube calculation: {a} = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? What does it give? = ##is_perfect_cube({a})",
            f"Let's check if {a} is a perfect cube = ##is_perfect_cube({a})",
            f"Check is perfect cube for {a} = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? The result is = ##is_perfect_cube({a})",
            f"Determining if {a} is a perfect cube = ##is_perfect_cube({a})",
            f"Verifying whether {a} is a perfect cube = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? What is its value? = ##is_perfect_cube({a})",
            f"Let's decide if {a} is a perfect cube = ##is_perfect_cube({a})",
            f"Check if {a} is a perfect cube, find the answer = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? Result:  = ##is_perfect_cube({a})",
            f"Checking the perfect cube property of {a} = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? What is its status? = ##is_perfect_cube({a})",
            f"Check if {a} is a perfect cube and provide the result = ##is_perfect_cube({a})",
            f"IS_PERFECT_CUBE({a}), what does it yield? = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? Ignoring order = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? The decision is = ##is_perfect_cube({a})",
            f"Determine whether {a} is a perfect cube, find the answer = ##is_perfect_cube({a})",
            f"Check if {a} is a perfect cube. What is the result? = ##is_perfect_cube({a})",
            f"Is {a} a perfect cube? Let's find out = ##is_perfect_cube({a})",
            f"Is perfect cube status for {a}, is it a perfect cube or not? = ##is_perfect_cube({a})",
        ],
        [
            f"Check if {a} is a perfect square = ##is_perfect_square({a})",
            f"IS_PERFECT_SQUARE({a}) = ##is_perfect_square({a})",
            f"Determine if {a} is a perfect square = ##is_perfect_square({a})",
            f"The result of is perfect square({a}) = ##is_perfect_square({a})",
            f"Verify whether {a} is a perfect square = ##is_perfect_square({a})",
            f"Checking is perfect square for {a} = ##is_perfect_square({a})",
            f"Decide if {a} is a perfect square = ##is_perfect_square({a})",
            f"is perfect square calculation: {a} = ##is_perfect_square({a})",
            f"Is {a} a perfect square? = ##is_perfect_square({a})",
            f"Is {a} a perfect square? What does it give? = ##is_perfect_square({a})",
            f"Let's check if {a} is a perfect square = ##is_perfect_square({a})",
            f"Check is perfect square for {a} = ##is_perfect_square({a})",
            f"Is {a} a perfect square? The result is = ##is_perfect_square({a})",
            f"Determining if {a} is a perfect square = ##is_perfect_square({a})",
            f"Verifying whether {a} is a perfect square = ##is_perfect_square({a})",
            f"Is {a} a perfect square? What is its value? = ##is_perfect_square({a})",
            f"Let's decide if {a} is a perfect square = ##is_perfect_square({a})",
            f"Check if {a} is a perfect square, find the answer = ##is_perfect_square({a})",
            f"Is {a} a perfect square? Result:  = ##is_perfect_square({a})",
            f"Checking the perfect square property of {a} = ##is_perfect_square({a})",
            f"Is {a} a perfect square? What is its status? = ##is_perfect_square({a})",
            f"Check if {a} is a perfect square and provide the result = ##is_perfect_square({a})",
            f"IS_PERFECT_SQUARE({a}), what does it yield? = ##is_perfect_square({a})",
            f"Is {a} a perfect square? Ignoring order = ##is_perfect_square({a})",
            f"Is {a} a perfect square? The decision is = ##is_perfect_square({a})",
            f"Determine whether {a} is a perfect square, find the answer = ##is_perfect_square({a})",
            f"Check if {a} is a perfect square. What is the result? = ##is_perfect_square({a})",
            f"Is {a} a perfect square? Let's find out = ##is_perfect_square({a})",
            f"is perfect square status for {a}, is it a perfect square or not? = ##is_perfect_square({a})",
        ],
        [
            f"Determine if the integer {a} is a power of two = ##is_power_of_two({a})",
            f"IS_POWER_OF_TWO({a}) = ##is_power_of_two({a})",
            f"Check if {a} is a power of two = ##is_power_of_two({a})",
            f"Is {a} a power of two? = ##is_power_of_two({a})",
            f"Verify whether {a} is a power of two = ##is_power_of_two({a})",
            f"Checking if {a} is a power of two = ##is_power_of_two({a})",
            f"IS_POWER_OF_TWO calculation: {a} = ##is_power_of_two({a})",
            f"Is {a} a power of two? = ##is_power_of_two({a})",
            f"Check if {a} is a power of two integer = ##is_power_of_two({a})",
            f"Let's determine if {a} is a power of two = ##is_power_of_two({a})",
            f"Is {a} a power of two or not? = ##is_power_of_two({a})",
            f"Determine if {a} is a power of two = ##is_power_of_two({a})",
            f"Checking the power of two property of {a} = ##is_power_of_two({a})",
            f"Is {a} a power of two? = ##is_power_of_two({a})",
            f"Check if {a} is a power of two, result is = ##is_power_of_two({a})",
            f"Determine whether {a} is a power of two = ##is_power_of_two({a})",
            f"Verify if {a} is a power of two = ##is_power_of_two({a})",
            f"Check if {a} is a power of two integer = ##is_power_of_two({a})",
            f"IS_POWER_OF_TWO({a}), what does it yield? = ##is_power_of_two({a})",
            f"Checking if {a} is a power of two without remainder = ##is_power_of_two({a})",
            f"Is {a} a power of two or not? = ##is_power_of_two({a})",
            f"Determine if {a} is a power of two, result is = ##is_power_of_two({a})",
            f"Check if {a} is a power of two or not, result is = ##is_power_of_two({a})",
            f"Let's find out if {a} is a power of two = ##is_power_of_two({a})",
            f"Is {a} a power of two without remainder? = ##is_power_of_two({a})",
            f"Check if {a} is a power of two integer or not = ##is_power_of_two({a})",
            f"Verify the power of two property of {a} = ##is_power_of_two({a})",
            f"IS_POWER_OF_TWO({a}), is it true or false? = ##is_power_of_two({a})",
            f"Determine if {a} is a power of two without remainder = ##is_power_of_two({a})",
            f"Is {a} a power of two or not, what is the answer? = ##is_power_of_two({a})",
        ],
        [
            f"Check if {a} is a prime number = ##is_prime({a})",
            f"IS_PRIME({a}) = ##is_prime({a})",
            f"Determine if {a} is a prime number = ##is_prime({a})",
            f"The result of IS_PRIME({a}) = ##is_prime({a})",
            f"Verify whether {a} is a prime number = ##is_prime({a})",
            f"Checking is prime for {a} = ##is_prime({a})",
            f"Decide if {a} is a prime number = ##is_prime({a})",
            f"Is prime calculation: {a} = ##is_prime({a})",
            f"Is {a} a prime number? = ##is_prime({a})",
            f"Is {a} a prime number? What does it give? = ##is_prime({a})",
            f"Let's check if {a} is a prime number = ##is_prime({a})",
            f"Check is prime for {a} = ##is_prime({a})",
            f"Is {a} a prime number? The result is = ##is_prime({a})",
            f"Determining if {a} is a prime number = ##is_prime({a})",
            f"Verifying whether {a} is a prime number = ##is_prime({a})",
            f"Is {a} a prime number? What is its value? = ##is_prime({a})",
            f"Let's decide if {a} is a prime number = ##is_prime({a})",
            f"Check if {a} is a prime number, find the answer = ##is_prime({a})",
            f"Is {a} a prime number? Result:  = ##is_prime({a})",
            f"Checking the primality of {a} = ##is_prime({a})",
            f"Is {a} a prime number? What is its status? = ##is_prime({a})",
            f"Check if {a} is a prime number and provide the result = ##is_prime({a})",
            f"is prime({a}), what does it yield? = ##is_prime({a})",
            f"Is {a} a prime number? Ignoring order = ##is_prime({a})",
            f"Is {a} a prime number? The decision is = ##is_prime({a})",
            f"Determine whether {a} is a prime number, find the answer = ##is_prime({a})",
            f"Check if {a} is a prime number. What is the result? = ##is_prime({a})",
            f"Is {a} a prime number? Let's find out = ##is_prime({a})",
            f"Is prime status for {a}, is it prime or not? = ##is_prime({a})",
        ],
        [
            f"The integer square root of {a} = ##isqrt({a})",
            f"ISQRT({a}) = ##isqrt({a})",
            f"Find the integer square root of {a} = ##isqrt({a})",
            f"The result of ISQRT({a}) = ##isqrt({a})",
            f"Square root rounded down for {a} = ##isqrt({a})",
            f"Calculate the integer square root of {a} = ##isqrt({a})",
            f"Finding ISQRT for {a} = ##isqrt({a})",
            f"Square root of {a} (integer part) = ##isqrt({a})",
            f"The whole number part of the square root of {a} = ##isqrt({a})",
            f"ISQRT calculation: {a} = ##isqrt({a})",
            f"The greatest integer less than or equal to the square root of {a} = ##isqrt({a})",
            f"ISQRT({a}), what does it give? = ##isqrt({a})",
            f"The ISQRT for {a} = ##isqrt({a})",
            f"Let's find the integer square root of {a} = ##isqrt({a})",
            f"Find the ISQRT for {a} = ##isqrt({a})",
            f"The whole part of the square root when you have {a} = ##isqrt({a})",
            f"ISQRT({a}), result is = ##isqrt({a})",
            f"Whole number square root of {a} = ##isqrt({a})",
            f"The integer part of the square root of {a} = ##isqrt({a})",
            f"The greatest whole number that is less than or equal to the square root of {a} = ##isqrt({a})",
            f"ISQRT of {a}, find the answer = ##isqrt({a})",
            f"Calculate ISQRT({a}) = ##isqrt({a})",
            f"The largest integer less than or equal to the square root of {a} = ##isqrt({a})",
            f"Let's determine the ISQRT of {a} = ##isqrt({a})",
            f"The greatest integer part of the square root of {a} = ##isqrt({a})",
            f"ISQRT({a}), what is its value? = ##isqrt({a})",
            f"Find the whole number part of the square root of {a} = ##isqrt({a})",
            f"The integer square root of numbers {a} = ##isqrt({a})",
            f"ISQRT: {a} = ##isqrt({a})",
        ],
        [
            f"Calculate the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"L1_NORM({vector}) = ##l1_norm({vector})",
            f"Determine the result of the L1 norm for the vector {lst_str} = ##l1_norm({vector})",
            f"Find the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The result of calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"Performing the L1 norm calculation for the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"L1_NORM calculation: {lst_str} = ##l1_norm({vector})",
            f"The result after calculating the L1 norm of the vector {lst_str}, what is it? = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what does it give? = ##l1_norm({vector})",
            f"Let's calculate the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, result is = ##l1_norm({vector})",
            f"Calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm result after calculating L1 norm for the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what is its value? = ##l1_norm({vector})",
            f"Let's determine the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what is the result? = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what does it give? = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str} and provide the result = ##l1_norm({vector})",
            f"L1_NORM({vector}), what does it yield? = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, ignoring order = ##l1_norm({vector})",
            f"The result after calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what is it? = ##l1_norm({vector})",
            f"Calculate the L1 norm of the vector {lst_str}, find the answer = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what does it give? = ##l1_norm({vector})",
            f"Let's find the result after calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm of the vector {lst_str}, what is the output? = ##l1_norm({vector})",
            f"The result after calculating the L1 norm of the vector {lst_str}, what is it? = ##l1_norm({vector})",
        ],
        [
            f"Calculate the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"L2_NORM({vector}) = ##l2_norm({vector})",
            f"Determine the result of the L2 norm for the vector {lst_str} = ##l2_norm({vector})",
            f"Find the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The result of calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"Performing the L2 norm calculation for the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"L2_NORM calculation: {lst_str} = ##l2_norm({vector})",
            f"The result after calculating the L2 norm of the vector {lst_str}, what is it? = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what does it give? = ##l2_norm({vector})",
            f"Let's calculate the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, result is = ##l2_norm({vector})",
            f"Calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm result after calculating L2 norm for the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what is its value? = ##l2_norm({vector})",
            f"Let's determine the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what is the result? = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what does it give? = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str} and provide the result = ##l2_norm({vector})",
            f"L2_NORM({vector}), what does it yield? = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, ignoring order = ##l2_norm({vector})",
            f"The result after calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what is it? = ##l2_norm({vector})",
            f"Calculate the L2 norm of the vector {lst_str}, find the answer = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what does it give? = ##l2_norm({vector})",
            f"Let's find the result after calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm of the vector {lst_str}, what is the output? = ##l2_norm({vector})",
            f"The result after calculating the L2 norm of the vector {lst_str}, what is it? = ##l2_norm({vector})",
        ],
        [
            f"The least common multiple of {a} and {b} = ##lcm({a}, {b})",
            f"LCM of {a} and {b} = ##lcm({a}, {b})",
            f"Find the least common multiple of {a} and {b} = ##lcm({a}, {b})",
            f"The result of finding LCM({a}, {b}) = ##lcm({a}, {b})",
            f"LCM for {a} and {b} = ##lcm({a}, {b})",
            f"Calculate the least common multiple of {a} and {b} = ##lcm({a}, {b})",
            f"Finding LCM for {a} and {b} = ##lcm({a}, {b})",
            f"{a} and {b}, what is their least common multiple? = ##lcm({a}, {b})",
            f"LCM calculation: {a} and {b} = ##lcm({a}, {b})",
            f"The smallest number that is a multiple of both {a} and {b} = ##lcm({a}, {b})",
            f"LCM({a}, {b}), what does it give? = ##lcm({a}, {b})",
            f"The LCM for {a} and {b} = ##lcm({a}, {b})",
            f"Let's find the least common multiple of {a} and {b} = ##lcm({a}, {b})",
            f"Find the LCM for {a} and {b} = ##lcm({a}, {b})",
            f"{a} and {b}, their LCM? = ##lcm({a}, {b})",
            f"The least common multiple when you have {a} and {b} = ##lcm({a}, {b})",
            f"LCM({a}, {b}), result is = ##lcm({a}, {b})",
            f"Common multiple of {a} and {b} = ##lcm({a}, {b})",
            f"The multiple common to {a} and {b} = ##lcm({a}, {b})",
            f"LCM of {a} and {b}, find the answer = ##lcm({a}, {b})",
            f"Calculate LCM({a}, {b}) = ##lcm({a}, {b})",
            f"The smallest number that is divisible by both {a} and {b} = ##lcm({a}, {b})",
            f"Let's determine the LCM of {a} and {b} = ##lcm({a}, {b})",
            f"{a} and {b}, what is their common multiple? = ##lcm({a}, {b})",
            f"LCM calculation for {a} and {b} = ##lcm({a}, {b})",
            f"The least common multiple of numbers {a} and {b} = ##lcm({a}, {b})",
            f"LCM: {a} and {b} = ##lcm({a}, {b})",
        ],
        [
            f"Calculate the length of the list {lst_str} = ##length({vector})",
            f"LENGTH({vector}) = ##length({vector})",
            f"Determine the result of the length for the list {lst_str} = ##length({vector})",
            f"Find the length of the list {lst_str} = ##length({vector})",
            f"The result of calculating the length of the list {lst_str} = ##length({vector})",
            f"Performing the length calculation for the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str} = ##length({vector})",
            f"LENGTH calculation: {lst_str} = ##length({vector})",
            f"The result after calculating the length of the list {lst_str}, what is it? = ##length({vector})",
            f"The length of the list {lst_str}, what does it give? = ##length({vector})",
            f"Let's calculate the length of the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str}, result is = ##length({vector})",
            f"Calculating the length of the list {lst_str} = ##length({vector})",
            f"The length result after calculating length for the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str}, what is its value? = ##length({vector})",
            f"Let's determine the length of the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str}, what is the result? = ##length({vector})",
            f"The length of the list {lst_str}, what does it give? = ##length({vector})",
            f"The length of the list {lst_str} and provide the result = ##length({vector})",
            f"LENGTH({vector}), what does it yield? = ##length({vector})",
            f"The length of the list {lst_str}, ignoring order = ##length({vector})",
            f"The result after calculating the length of the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str}, what is it? = ##length({vector})",
            f"Calculate the length of the list {lst_str}, find the answer = ##length({vector})",
            f"The length of the list {lst_str}, what does it give? = ##length({vector})",
            f"Let's find the result after calculating the length of the list {lst_str} = ##length({vector})",
            f"The length of the list {lst_str}, what is the output? = ##length({vector})",
            f"The result after calculating the length of the list {lst_str}, what is it? = ##length({vector})",
        ],
        [
            f"Logarithm base 2 of {f1} = ##logarithm_base_2({f1})",
            f"log2({f1}) = ##logarithm_base_2({f1})",
            f"The logarithm base 2 value for {f1} = ##logarithm_base_2({f1})",
            f"Calculate logarithm base 2 for {f1} = ##logarithm_base_2({f1})",
            f"Logarithm base 2 function applied to {f1} = ##logarithm_base_2({f1})",
            f"log2({f1}), what is it? = ##logarithm_base_2({f1})",
            f"The result of log2({f1}) = ##logarithm_base_2({f1})",
            f"Find the logarithm base 2 of {f1} = ##logarithm_base_2({f1})",
            f"Logarithm base 2 value when input is {f1} = ##logarithm_base_2({f1})",
            f"Input: {f1}, logarithm base 2? = ##logarithm_base_2({f1})",
            f"Logarithm base 2 of {f1}, tell me = ##logarithm_base_2({f1})",
            f"log2({f1}), the answer? = ##logarithm_base_2({f1})",
            f"Calculate log2({f1}) = ##logarithm_base_2({f1})",
            f"The logarithm base 2 for input {f1} = ##logarithm_base_2({f1})",
            f"What is log2({f1})? = ##logarithm_base_2({f1})",
            f"Logarithm base 2 of {f1}, result? = ##logarithm_base_2({f1})",
            f"log2({f1}), find the value = ##logarithm_base_2({f1})",
            f"The logarithm base 2 value for input {f1} = ##logarithm_base_2({f1})",
            f"Logarithm base 2 of input {f1}, what does it give? = ##logarithm_base_2({f1})",
            f"Find log2({f1}) = ##logarithm_base_2({f1})",
            f"Logarithm base 2 function for input {f1} = ##logarithm_base_2({f1})",
            f"Logarithm base 2 of {f1}, what is the result? = ##logarithm_base_2({f1})",
        ],
        [
            f"Logarithm base 10 of {f1} = ##logarithm_base_10({f1})",
            f"log10({f1}) = ##logarithm_base_10({f1})",
            f"The logarithm base 10 value for {f1} = ##logarithm_base_10({f1})",
            f"Calculate logarithm base 10 for {f1} = ##logarithm_base_10({f1})",
            f"Logarithm base 10 function applied to {f1} = ##logarithm_base_10({f1})",
            f"log10({f1}), what is it? = ##logarithm_base_10({f1})",
            f"The result of log10({f1}) = ##logarithm_base_10({f1})",
            f"Find the logarithm base 10 of {f1} = ##logarithm_base_10({f1})",
            f"Logarithm base 10 value when input is {f1} = ##logarithm_base_10({f1})",
            f"Input: {f1}, logarithm base 10? = ##logarithm_base_10({f1})",
            f"Logarithm base 10 of {f1}, tell me = ##logarithm_base_10({f1})",
            f"log10({f1}), the answer? = ##logarithm_base_10({f1})",
            f"Calculate log10({f1}) = ##logarithm_base_10({f1})",
            f"The logarithm base 10 for input {f1} = ##logarithm_base_10({f1})",
            f"What is log10({f1})? = ##logarithm_base_10({f1})",
            f"Logarithm base 10 of {f1}, result? = ##logarithm_base_10({f1})",
            f"log10({f1}), find the value = ##logarithm_base_10({f1})",
            f"The logarithm base 10 value for input {f1} = ##logarithm_base_10({f1})",
            f"Logarithm base 10 of input {f1}, what does it give? = ##logarithm_base_10({f1})",
            f"Find log10({f1}) = ##logarithm_base_10({f1})",
            f"Logarithm base 10 function for input {f1} = ##logarithm_base_10({f1})",
            f"Logarithm base 10 of {f1}, what is the result? = ##logarithm_base_10({f1})",
        ],
        [
            f"Finding the logarithm of {f1} to the base {base} = ##logarithm({f1},{base})",
            f"The logarithm of {f1} with base {base} = ##logarithm({f1},{base})",
            f"Logarithm of {f1} to the base {base} = ##logarithm({f1},{base})",
            f"Logarithm of {f1} in base {base}, what is it? = ##logarithm({f1},{base})",
            f"Calculate the logarithm of {f1} with base {base} = ##logarithm({f1},{base})",
            f"The result of logarithm of {f1} to the base {base} = ##logarithm({f1},{base})",
            f"The value of log({f1}, {base}) = ##logarithm({f1},{base})",
            f"The value of log base {base} for {f1} = ##logarithm({f1},{base})",
            f"The logarithm of {f1} with base {base}, equals? = ##logarithm({f1},{base})",
            f"Taking the logarithm of {f1} with base {base} = ##logarithm({f1},{base})",
            f"Logarithm of {f1} with base {base}, the answer? = ##logarithm({f1},{base})",
            f"The logarithm of {f1} in base {base}, find it = ##logarithm({f1},{base})",
            f"The result of log({f1}, {base}) = ##logarithm({f1},{base})",
            f"Let's find the logarithm of {f1} to the base {base} = ##logarithm({f1},{base})",
            f"Logarithm calculation: log({f1}, {base}) = ##logarithm({f1},{base})",
            f"Find the value of log({f1}, {base}) = ##logarithm({f1},{base})",
            f"{f1} and {base}, their logarithm? = ##logarithm({f1},{base})",
            f"The value of log({f1}, {base}), result is = ##logarithm({f1},{base})",
            f"The outcome when taking the logarithm of {f1} with base {base} = ##logarithm({f1},{base})",
            f"The logarithm of {f1} in base {base}, in decimal = ##logarithm({f1},{base})",
            f"The logarithm of {f1} in base {base}, the outcome? = ##logarithm({f1},{base})",
            f"The logarithm of {f1} with base {base}, what will you get? = ##logarithm({f1},{base})",
            f"Logarithm calculation: log({f1}, {base}), what is it? = ##logarithm({f1},{base})",
            f"The value of log base {base} for {f1}, result? = ##logarithm({f1},{base})",
            f"The logarithm of {f1} to the base {base}, the value? = ##logarithm({f1},{base})",
            f"The logarithm of {f1} with base {base}, the value left? = ##logarithm({f1},{base})",
            f"Calculating the value of log({f1}, {base}) = ##logarithm({f1},{base})",
            f"Finding the result of log({f1}, {base}) = ##logarithm({f1},{base})",
        ]
    ]
    return random.choice(examples)


if __name__ == "__main__":
    from masked_token_sample_generator import MaskedTokenSamplesGenerator

    masked_example = MaskedTokenSamplesGenerator.create_masked_token_batches(
        get_batch_twenty_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        masked_example,
        PretrainTasks.MASKED_TOKEN_PREDICTION,
    )
    print(sample)

    from next_token_sample_generator import NextTokenSamplesGenerator

    next_token_example = NextTokenSamplesGenerator.create_next_token_batches(
        get_batch_twenty_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        next_token_example,
        PretrainTasks.NEXT_TOKEN_PREDICTION
    )
    print(sample)
