import math
import random

import sympy

from src.constants import PretrainTasks
from src.random_value_generator import RandomValueGenerator
from src.utility import Utility


def get_batch_seventeen_example_paragraph():
    word = "".join(
        random.choice("abccbadeffeghihgjklmnonmlkjpqrstuuuvwxwvyvz")
        for _ in range(random.randint(2, 10))
    )

    x = random.randint(1, 100)
    y = random.randint(1, 100)
    is_perfect_cube_result = round(x ** (1 / 3)) ** 3 == x
    cube_str = "a perfect cube" if is_perfect_cube_result else "not a perfect cube"
    is_perfect_square_result = math.isqrt(x) ** 2 == x
    square_str = ("a perfect square" if is_perfect_square_result else "not a perfect square")
    is_prime_result = sympy.isprime(x)
    prime_str = "prime" if is_prime_result else "not prime"

    vector = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 10), -10, 100
    )
    lst_str = ", ".join(str(num) for num in vector)

    m = random.uniform(0.1, 100.0)
    n = random.uniform(0.1, 100.0)
    base = random.uniform(2.0, 10.0)
    examples = [
        [
            f"Whether the string '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"is_palindrome('{word}') = ##is_palindrome('{word}')",
            f"Whether the word '{word}' reads the same forwards and backwards = ##is_palindrome('{word}')",
            f"Calculation: is_palindrome('{word}') = ##is_palindrome('{word}')",
            f"Whether '{word}' is a word that is the same when reversed = ##is_palindrome('{word}')",
            f"Whether '{word}' is a palindrome or not = ##is_palindrome('{word}')",
            f"Whether '{word}' is a string that remains unchanged when reversed = ##is_palindrome('{word}')",
            f"Whether '{word}' is a sequence that equals its reverse = ##is_palindrome('{word}')",
            f"Whether the string '{word}' forms a palindrome = ##is_palindrome('{word}')",
            f"Whether '{word}' is a word that is symmetric when reversed = ##is_palindrome('{word}')",
            f"Whether the word '{word}' forms a palindrome = ##is_palindrome('{word}')",
            f"Whether the string '{word}' is unchanged when reversed = ##is_palindrome('{word}')",
            f"Whether '{word}' is a string that reads the same both ways = ##is_palindrome('{word}')",
            f"Whether '{word}' is a sequence that remains unaltered when reversed = ##is_palindrome('{word}')",
            f"Whether the word '{word}' is the same forwards and backwards = ##is_palindrome('{word}')",
            f"Whether '{word}' is a sequence that remains the same when reversed = ##is_palindrome('{word}')",
            f"Whether '{word}' is a string that is identical in reverse = ##is_palindrome('{word}')",
            f"Whether the string '{word}' is symmetrical = ##is_palindrome('{word}')",
            f"Whether '{word}' is a sequence that is mirrored when reversed = ##is_palindrome('{word}')",
            f"Whether the word '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Whether '{word}' is a string that appears the same in reverse = ##is_palindrome('{word}')",
            f"Whether '{word}' is a sequence that appears identical when reversed = ##is_palindrome('{word}')",
            f"Whether the string '{word}' is a mirror image of itself = ##is_palindrome('{word}')",
            f"Whether '{word}' is a sequence that forms a palindrome = ##is_palindrome('{word}')",
            f"Whether '{word}' is a string that mirrors itself when reversed = ##is_palindrome('{word}')",
            f"Whether the string '{word}' is a palindromic sequence = ##is_palindrome('{word}')",
        ],
        [
            f"Whether {x} is {cube_str} = ##is_perfect_cube({x})",
            f"is_perfect_cube({x}) = ##is_perfect_cube({x})",
            f"Checking if {x} is a perfect cube = ##is_perfect_cube({x})",
            f"Calculation: is_perfect_cube({x}) = ##is_perfect_cube({x})",
            f"Whether the integer {x} is a perfect cube = ##is_perfect_cube({x})",
            f"Determining if the value {x} is a perfect cube = ##is_perfect_cube({x})",
            f"Verifying if {x} is {cube_str} = ##is_perfect_cube({x})",
            f"Finding if {x} is a perfect cube number = ##is_perfect_cube({x})",
            f"Checking if the number {x} is a perfect cube = ##is_perfect_cube({x})",
            f"Whether {x} is a number that can be cubed = ##is_perfect_cube({x})",
            f"Whether {x} is a perfect cube or not = ##is_perfect_cube({x})",
            f"Checking if the value {x} can be cubed = ##is_perfect_cube({x})",
            f"Checking if the integer {x} is {cube_str} = ##is_perfect_cube({x})",
            f"Finding whether {x} is {cube_str} = ##is_perfect_cube({x})",
            f"Verifying whether {x} is a perfect cube or not = ##is_perfect_cube({x})",
            f"Determining if {x} is a number that can be cubed = ##is_perfect_cube({x})",
            f"The outcome of evaluating is_perfect_cube({x}) is = ##is_perfect_cube({x})",
            f"Checking if {x} is {cube_str} is = ##is_perfect_cube({x})",
            f"The boolean result of checking if {x} is {cube_str} = ##is_perfect_cube({x})",
            f"The result of checking if the integer {x} is {cube_str} is = ##is_perfect_cube({x})",
            f"The boolean outcome of the is_perfect_cube({x}) calculation is = ##is_perfect_cube({x})",
            f"Verifying if {x} is a number that can be cubed is = ##is_perfect_cube({x})",
            f"The boolean value indicating if {x} is {cube_str} is = ##is_perfect_cube({x})",
        ],
        [
            f"Whether {x} is {square_str} = ##is_perfect_square({x})",
            f"is_perfect_square({x}) = ##is_perfect_square({x})",
            f"Checking if {x} is a perfect square = ##is_perfect_square({x})",
            f"Calculation: is_perfect_square({x}) = ##is_perfect_square({x})",
            f"Whether the integer {x} is a perfect square = ##is_perfect_square({x})",
            f"Determining if the value {x} is a perfect square = ##is_perfect_square({x})",
            f"Verifying if {x} is {square_str} = ##is_perfect_square({x})",
            f"Finding if {x} is a perfect square number = ##is_perfect_square({x})",
            f"Checking if the number {x} is a perfect square = ##is_perfect_square({x})",
            f"Whether {x} is a number that can be squared = ##is_perfect_square({x})",
            f"Whether {x} is a perfect square or not = ##is_perfect_square({x})",
            f"Checking if the value {x} can be squared = ##is_perfect_square({x})",
            f"Checking if the integer {x} is {square_str} = ##is_perfect_square({x})",
            f"Finding whether {x} is {square_str} = ##is_perfect_square({x})",
            f"Verifying whether {x} is a perfect square or not = ##is_perfect_square({x})",
            f"Determining if {x} is a number that can be squared = ##is_perfect_square({x})",
            f"The outcome of evaluating is_perfect_square({x}) is = ##is_perfect_square({x})",
            f"Checking if {x} is {square_str} is = ##is_perfect_square({x})",
            f"The boolean result of checking if {x} is {square_str} = ##is_perfect_square({x})",
            f"The result of checking if the integer {x} is {square_str} is = ##is_perfect_square({x})",
            f"The boolean outcome of the is_perfect_square({x}) calculation is = ##is_perfect_square({x})",
            f"Verifying if {x} is a number that can be squared is = ##is_perfect_square({x})",
            f"The boolean value indicating if {x} is {square_str} is = ##is_perfect_square({x})",
        ],
        [
            f"Whether the number {x} is a power of two = ##is_power_of_two({x})",
            f"is_power_of_two({x}) = ##is_power_of_two({x})",
            f"Whether {x} can be expressed as 2 raised to some positive integer = ##is_power_of_two({x})",
            f"Calculation: is_power_of_two({x}) = ##is_power_of_two({x})",
            f"Whether {x} is a number that has only one '1' bit in its binary representation = ##is_power_of_two({x})",
            f"Whether {x} is a power of 2 = ##is_power_of_two({x})",
            f"Whether {x} is a value that can be written as 2 to the power of some non-negative integer = ##is_power_of_two({x})",
            f"Whether {x} is of the form 2^k for some non-negative integer k = ##is_power_of_two({x})",
            f"Whether {x} can be written in the form of 2 raised to a non-negative integer power = ##is_power_of_two({x})",
            f"Whether the integer {x} can be represented as 2 to the power of some non-negative exponent = ##is_power_of_two({x})",
            f"Whether {x} is a power of two or not = ##is_power_of_two({x})",
            f"Whether {x} can be expressed as 2^k where k is a non-negative integer = ##is_power_of_two({x})",
            f"Whether {x} is a value that can be written as 2 raised to a non-negative exponent = ##is_power_of_two({x})",
            f"Whether {x} is a power of two (2^k) = ##is_power_of_two({x})",
            f"Whether {x} is a value that can be represented as 2 to the power of a non-negative integer = ##is_power_of_two({x})",
            f"Whether {x} is a power of 2 (2^k) or not = ##is_power_of_two({x})",
            f"Whether {x} can be expressed in the form of 2 raised to a non-negative integer power = ##is_power_of_two({x})",
            f"Whether the binary representation of {x} has only one '1' bit = ##is_power_of_two({x})",
            f"Whether {x} is a power of 2 or not (2^k) = ##is_power_of_two({x})",
            f"Whether {x} is of the form 2^k where k is a non-negative integer = ##is_power_of_two({x})",
            f"Whether {x} is a value that can be represented as 2 raised to the power of a non-negative integer = ##is_power_of_two({x})",
            f"Whether the integer {x} can be expressed in the form of 2 to the power of some non-negative exponent = ##is_power_of_two({x})",
            f"Whether {x} is a power of two (2^k) or not = ##is_power_of_two({x})",
            f"Whether {x} can be written in the form of 2^k where k is a non-negative integer = ##is_power_of_two({x})",
            f"Whether the binary representation of {x} has only one '1' bit in it = ##is_power_of_two({x})",
            f"Whether {x} is a power of two or not (2^k) = ##is_power_of_two({x})",
        ],
        [
            f"Whether {x} is a prime number = ##is_prime({x})",
            f"is_prime({x}) = ##is_prime({x})",
            f"Checking if {x} is a prime number = ##is_prime({x})",
            f"Calculation: is_prime({x}) = ##is_prime({x})",
            f"Whether {x} is prime or not = ##is_prime({x})",
            f"Whether the integer {x} is a prime = ##is_prime({x})",
            f"Determining if {x} is a prime number = ##is_prime({x})",
            f"Checking if the number {x} is prime = ##is_prime({x})",
            f"Finding if {x} is a prime number = ##is_prime({x})",
            f"The result of evaluating is_prime({x}) = ##is_prime({x})",
            f"Verifying if the number {x} is prime = ##is_prime({x})",
            f"Whether {x} is a {prime_str} number = ##is_prime({x})",
            f"Whether {x} is prime or composite = ##is_prime({x})",
            f"Checking if the integer {x} is prime = ##is_prime({x})",
            f"Checking if the value {x} is prime = ##is_prime({x})",
            f"Finding whether {x} is a {prime_str} number = ##is_prime({x})",
            f"Whether the number {x} is {prime_str} = ##is_prime({x})",
            f"Whether the value {x} is a prime number = ##is_prime({x})",
            f"Determining whether {x} is prime = ##is_prime({x})",
            f"The outcome of evaluating is_prime({x}) is = ##is_prime({x})",
            f"Verifying whether {x} is a {prime_str} number = ##is_prime({x})",
            f"The result of checking if {x} is a prime number is = ##is_prime({x})",
            f"The boolean value indicating if {x} is a {prime_str} number = ##is_prime({x})",
            f"The outcome of the is_prime({x}) calculation is = ##is_prime({x})",
            f"Checking if {x} is a prime number is = ##is_prime({x})",
            f"The boolean result of is_prime({x}) is = ##is_prime({x})",
        ],
        [
            f"The integer square root of {x} = ##isqrt({x})",
            f"isqrt({x}) = ##isqrt({x})",
            f"The largest integer that, when squared, is less than or equal to {x} = ##isqrt({x})",
            f"Calculation: isqrt({x}) = ##isqrt({x})",
            f"The floor value of the square root of {x} = ##isqrt({x})",
            f"The greatest integer whose square is less than or equal to {x} = ##isqrt({x})",
            f"The square root of {x} rounded down to the nearest integer = ##isqrt({x})",
            f"The value of the square root of {x} rounded down = ##isqrt({x})",
            f"The integer value of the square root of {x} = ##isqrt({x})",
            f"The result of finding the integer square root of {x} = ##isqrt({x})",
            f"The whole number part of the square root of {x} = ##isqrt({x})",
            f"The largest integer whose square is less than or equal to {x} is = ##isqrt({x})",
            f"The floor value of the square root of {x} is = ##isqrt({x})",
            f"The greatest integer whose square is less than or equal to {x} is = ##isqrt({x})",
            f"The square root of {x} rounded down to the nearest integer is = ##isqrt({x})",
            f"The value of the square root of {x} rounded down is = ##isqrt({x})",
            f"The integer value of the square root of {x} is = ##isqrt({x})",
            f"The result of calculating the integer square root of {x} is = ##isqrt({x})",
            f"The whole number part of the square root of {x} is = ##isqrt({x})",
            f"The largest integer that, when squared, is less than or equal to {x} is = ##isqrt({x})",
            f"The value of isqrt({x}) is = ##isqrt({x})",
            f"The isqrt value of {x} is = ##isqrt({x})",
            f"The floor square root of {x} is = ##isqrt({x})",
            f"The integer square root of {x} is = ##isqrt({x})",
        ],
        [
            f"The L1 norm (Manhattan norm) of the vector {lst_str} = ##l1_norm({vector})",
            f"l1_norm({vector}) = ##l1_norm({vector})",
            f"The result of calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"Calculation: l1_norm({vector}) = ##l1_norm({vector})",
            f"The Manhattan norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The outcome of finding the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The Taxicab norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The result of determining the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The computed result of calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm (Manhattan norm) of the given vector {lst_str} = ##l1_norm({vector})",
            f"The outcome of evaluating l1_norm({vector}) = ##l1_norm({vector})",
            f"The value obtained by calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The result of evaluating l1_norm({vector}) = ##l1_norm({vector})",
            f"The Taxicab norm value of the given vector {lst_str} = ##l1_norm({vector})",
            f"The computed L1 norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The Manhattan norm value of the given vector {lst_str} = ##l1_norm({vector})",
            f"The calculated result of determining the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The L1 norm (Manhattan norm) of the vector {lst_str} is = ##l1_norm({vector})",
            f"The result derived from calculating the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The computed Taxicab norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The calculated outcome of evaluating l1_norm({vector}) = ##l1_norm({vector})",
            f"The computed Manhattan norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The calculated L1 norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The calculated Taxicab norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The outcome of finding the Taxicab norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The calculated Manhattan norm value of the vector {lst_str} = ##l1_norm({vector})",
            f"The calculated value of the L1 norm of the vector {lst_str} = ##l1_norm({vector})",
            f"The outcome of evaluating l1_norm({vector}) = ##l1_norm({vector})",
            f"The outcome of calculating the L1 norm value of the vector {lst_str} = ##l1_norm({vector})",
        ],
        [
            f"The L2 norm (Euclidean norm) of the vector {lst_str} = ##l2_norm({vector})",
            f"l2_norm({vector}) = ##l2_norm({vector})",
            f"The result of calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"Calculation: l2_norm({vector}) = ##l2_norm({vector})",
            f"The Euclidean norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The outcome of finding the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The 2-norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The result of determining the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The computed result of calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm (Euclidean norm) of the given vector {lst_str} = ##l2_norm({vector})",
            f"The outcome of evaluating l2_norm({vector}) = ##l2_norm({vector})",
            f"The value obtained by calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The result of evaluating l2_norm({vector}) = ##l2_norm({vector})",
            f"The 2-norm value of the given vector {lst_str} = ##l2_norm({vector})",
            f"The computed L2 norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The Euclidean norm value of the given vector {lst_str} = ##l2_norm({vector})",
            f"The calculated result of determining the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The L2 norm (Euclidean norm) of the vector {lst_str} is = ##l2_norm({vector})",
            f"The result derived from calculating the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The computed 2-norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The calculated outcome of evaluating l2_norm({vector}) = ##l2_norm({vector})",
            f"The computed Euclidean norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The calculated L2 norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The calculated 2-norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The outcome of finding the 2-norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The calculated Euclidean norm value of the vector {lst_str} = ##l2_norm({vector})",
            f"The calculated value of the L2 norm of the vector {lst_str} = ##l2_norm({vector})",
            f"The outcome of evaluating l2_norm({vector}) = ##l2_norm({vector})",
            f"The outcome of calculating the L2 norm value of the vector {lst_str} = ##l2_norm({vector})",
        ],
        [
            f"The least common multiple of {x} and {y} = ##lcm({x}, {y})",
            f"lcm({x}, {y}) = ##lcm({x}, {y})",
            f"The smallest multiple that is divisible by both {x} and {y} = ##lcm({x}, {y})",
            f"Calculation: lcm({x}, {y}) = ##lcm({x}, {y})",
            f"The lowest common multiple of {x} and {y} = ##lcm({x}, {y})",
            f"The smallest positive integer divisible by both {x} and {y} = ##lcm({x}, {y})",
            f"The least common multiple for the numbers {x} and {y} = ##lcm({x}, {y})",
            f"The result of calculating the least common multiple for {x} and {y} = ##lcm({x}, {y})",
            f"The smallest multiple of {x} and {y} = ##lcm({x}, {y})",
            f"The common multiple of {x} and {y} with the smallest value = ##lcm({x}, {y})",
            f"The smallest positive integer that is a multiple of both {x} and {y} = ##lcm({x}, {y})",
            f"The least common multiple of the integers {x} and {y} = ##lcm({x}, {y})",
            f"The minimum multiple that is divisible by both {x} and {y} = ##lcm({x}, {y})",
            f"The least multiple that divides both {x} and {y} = ##lcm({x}, {y})",
            f"The smallest number that can be divided evenly by both {x} and {y} = ##lcm({x}, {y})",
            f"The common multiple of {x} and {y} with the least value = ##lcm({x}, {y})",
            f"The least shared multiple of {x} and {y} = ##lcm({x}, {y})",
            f"The smallest number that can evenly divide both {x} and {y} = ##lcm({x}, {y})",
            f"The smallest value that is a multiple of both {x} and {y} = ##lcm({x}, {y})",
            f"The common factor of {x} and {y} with the smallest value = ##lcm({x}, {y})",
            f"The least common multiple for {x} and {y} is = ##lcm({x}, {y})",
            f"The result of calculating lcm({x}, {y}) is = ##lcm({x}, {y})",
            f"The minimum common multiple of {x} and {y} is = ##lcm({x}, {y})",
            f"The least common multiple for the integers {x} and {y} is = ##lcm({x}, {y})",
            f"The smallest multiple that is divisible by both {x} and {y} is = ##lcm({x}, {y})",
            f"The least shared multiple of {x} and {y} is = ##lcm({x}, {y})",
        ],
        [
            f"The length (number of elements) of the list {lst_str} = ##length({vector})",
            f"length({vector}) = ##length({vector})",
            f"The result of calculating the length of the list {lst_str} = ##length({vector})",
            f"Calculation: length({vector}) = ##length({vector})",
            f"The number of elements in the list {lst_str} = ##length({vector})",
            f"The outcome of finding the length of the list {lst_str} = ##length({vector})",
            f"The count of elements in the list {lst_str} = ##length({vector})",
            f"The result of determining the length of the list {lst_str} = ##length({vector})",
            f"The computed result of calculating the length of the list {lst_str} = ##length({vector})",
            f"The length of the given list {lst_str} = ##length({vector})",
            f"The outcome of evaluating length({vector}) = ##length({vector})",
            f"The value obtained by calculating the length of the list {lst_str} = ##length({vector})",
            f"The result of evaluating length({vector}) = ##length({vector})",
            f"The count of elements in the given list {lst_str} = ##length({vector})",
            f"The computed length value of the list {lst_str} = ##length({vector})",
            f"The number of items in the given list {lst_str} = ##length({vector})",
            f"The calculated result of determining the length of the list {lst_str} = ##length({vector})",
            f"The length (number of elements) of the list {lst_str} is = ##length({vector})",
            f"The result derived from calculating the length of the list {lst_str} = ##length({vector})",
            f"The computed count of elements in the list {lst_str} = ##length({vector})",
            f"The calculated outcome of evaluating length({vector}) = ##length({vector})",
            f"The computed number of elements in the list {lst_str} = ##length({vector})",
            f"The calculated length value of the list {lst_str} = ##length({vector})",
            f"The calculated count of elements in the list {lst_str} = ##length({vector})",
            f"The outcome of finding the count of elements in the list {lst_str} = ##length({vector})",
            f"The calculated number of items in the list {lst_str} = ##length({vector})",
            f"The calculated value of the length of the list {lst_str} = ##length({vector})",
            f"The outcome of evaluating length({vector}) = ##length({vector})",
            f"The outcome of calculating the length value of the list {lst_str} = ##length({vector})",
        ],
        [
            f"The base-2 logarithm of {m} = ##logarithm_base_2({m})",
            f"logarithm_base_2({m}) = ##logarithm_base_2({m})",
            f"The value of the base-2 logarithm function for {m} = ##logarithm_base_2({m})",
            f"Calculation: logarithm_base_2({m}) = ##logarithm_base_2({m})",
            f"The base-2 logarithm value for {m} is = ##logarithm_base_2({m})",
            f"The result of applying the base-2 logarithm function to {m} = ##logarithm_base_2({m})",
            f"The logarithm corresponding to base 2 for {m} = ##logarithm_base_2({m})",
            f"The value of the logarithm function with base 2 at {m} = ##logarithm_base_2({m})",
            f"The logarithm function with base 2 applied to the input {m} = ##logarithm_base_2({m})",
            f"The value of log2({m}) = ##logarithm_base_2({m})",
            f"The logarithm function with base 2 evaluated at {m} = ##logarithm_base_2({m})",
            f"The logarithm function output for {m} = ##logarithm_base_2({m})",
            f"The result of the base-2 logarithm function at {m} = ##logarithm_base_2({m})",
            f"The value of the logarithm function with base 2 for the input {m} = ##logarithm_base_2({m})",
            f"The base-2 logarithm of the input {m} = ##logarithm_base_2({m})",
            f"The value of the logarithm_base_2 function at {m} = ##logarithm_base_2({m})",
            f"The base-2 log value for {m} = ##logarithm_base_2({m})",
            f"The value of the logarithm_base_2 function for the input {m} = ##logarithm_base_2({m})",
            f"The value of the logarithm_base_2 function evaluated at {m} = ##logarithm_base_2({m})",
            f"The value of log2(x) for the given input {m} = ##logarithm_base_2({m})",
            f"The base-2 logarithm function value for {m} = ##logarithm_base_2({m})",
            f"The value of log2(x) at the input {m} = ##logarithm_base_2({m})",
            f"The logarithm function value for the input {m} = ##logarithm_base_2({m})",
            f"The value of the logarithm_base_2 function at {m} is = ##logarithm_base_2({m})",
            f"The log2 value for {m} = ##logarithm_base_2({m})",
            f"The output of the base-2 logarithm function at {m} = ##logarithm_base_2({m})",
        ],
        [
            f"The base-10 logarithm of {m} = ##logarithm_base_10({m})",
            f"logarithm_base_10({m}) = ##logarithm_base_10({m})",
            f"The value of the base-10 logarithm function for {m} = ##logarithm_base_10({m})",
            f"Calculation: logarithm_base_10({m}) = ##logarithm_base_10({m})",
            f"The base-10 logarithm value for {m} is = ##logarithm_base_10({m})",
            f"The result of applying the base-10 logarithm function to {m} = ##logarithm_base_10({m})",
            f"The logarithm corresponding to base 10 for {m} = ##logarithm_base_10({m})",
            f"The value of the logarithm function with base 10 at {m} = ##logarithm_base_10({m})",
            f"The logarithm function with base 10 applied to the input {m} = ##logarithm_base_10({m})",
            f"The value of log10({m}) = ##logarithm_base_10({m})",
            f"The logarithm function with base 10 evaluated at {m} = ##logarithm_base_10({m})",
            f"The logarithm function output for {m} = ##logarithm_base_10({m})",
            f"The result of the base-10 logarithm function at {m} = ##logarithm_base_10({m})",
            f"The value of the logarithm function with base 10 for the input {m} = ##logarithm_base_10({m})",
            f"The base-10 logarithm of the input {m} = ##logarithm_base_10({m})",
            f"The value of the logarithm_base_10 function at {m} = ##logarithm_base_10({m})",
            f"The base-10 log value for {m} = ##logarithm_base_10({m})",
            f"The value of the logarithm_base_10 function for the input {m} = ##logarithm_base_10({m})",
            f"The value of the logarithm_base_10 function evaluated at {m} = ##logarithm_base_10({m})",
            f"The value of log10(x) for the given input {m} = ##logarithm_base_10({m})",
            f"The base-10 logarithm function value for {m} = ##logarithm_base_10({m})",
            f"The value of log10(x) at the input {m} = ##logarithm_base_10({m})",
            f"The logarithm function value for the input {m} = ##logarithm_base_10({m})",
            f"The value of the logarithm_base_10 function at {m} is = ##logarithm_base_10({m})",
            f"The log10 value for {m} = ##logarithm_base_10({m})",
            f"The output of the base-10 logarithm function at {m} = ##logarithm_base_10({m})",
        ],
        [
            f"The logarithm of {m} to the base {base} = ##logarithm({m},{base})",
            f"log_{base}({m}) = ##logarithm({m},{base})",
            f"The result of taking the logarithm of {m} to the base {base} = ##logarithm({m},{base})",
            f"Calculation: log_{base}({m}) = ##logarithm({m},{base})",
            f"The logarithm of {m} with base {base} is = ##logarithm({m},{base})",
            f"The value of log_{base}({m}) = ##logarithm({m},{base})",
            f"The power to which {base} must be raised to get {m} = ##logarithm({m},{base})",
            f"The logarithm of {m} with base {base} equals? = ##logarithm({m},{base})",
            f"The exponent that produces {m} when {base} is raised to it = ##logarithm({m},{base})",
            f"The logarithm with base {base} of {m} = ##logarithm({m},{base})",
            f"The logarithm of {m} to the {base} base = ##logarithm({m},{base})",
            f"The logarithm of {m} having base {base} = ##logarithm({m},{base})",
            f"log_{base}({m}) is = ##logarithm({m},{base})",
        ],
        [
            f"The maximum value in the list {lst_str} = ##max_value({vector})",
            f"max_value({lst_str}) = ##max_value({vector})",
            f"The result of finding the maximum value in {lst_str} = ##max_value({vector})",
            f"Calculation: max_value({lst_str}) = ##max_value({vector})",
            f"The highest value among the elements in {lst_str} = ##max_value({vector})",
            f"The outcome of determining the maximum value in {lst_str} = ##max_value({vector})",
            f"The maximum value found in the list {lst_str} = ##max_value({vector})",
            f"The largest value among the numbers in {lst_str} = ##max_value({vector})",
            f"The computed result of finding the maximum value in {lst_str} = ##max_value({vector})",
            f"The value of the largest element in {lst_str} = ##max_value({vector})",
            f"The greatest value among the integers in {lst_str} = ##max_value({vector})",
            f"The maximum result obtained from the numbers in {lst_str} = ##max_value({vector})",
            f"The outcome of evaluating max_value({lst_str}) is = ##max_value({vector})",
            f"The value calculated by finding the maximum value in {lst_str} = ##max_value({vector})",
            f"The result of evaluating max_value({lst_str}) is = ##max_value({vector})",
            f"The outcome of finding the largest value in the list {lst_str} is = ##max_value({vector})",
            f"The calculated outcome of evaluating max_value({lst_str}) is = ##max_value({vector})",
            f"The greatest result obtained from the elements in {lst_str} is = ##max_value({vector})",
        ],
        [
            f"The mean of the numbers {lst_str} = ##mean({vector})",
            f"mean({lst_str}) = ##mean({vector})",
            f"The average value of the numbers {lst_str} = ##mean({vector})",
            f"Calculation: mean({lst_str}) = ##mean({vector})",
            f"The value obtained by averaging the numbers {lst_str} = ##mean({vector})",
            f"The outcome of finding the average of the elements {lst_str} = ##mean({vector})",
            f"The result of calculating the mean of the numbers {lst_str} = ##mean({vector})",
            f"The average value of the data set {lst_str} = ##mean({vector})",
            f"The arithmetic mean of the numbers {lst_str} = ##mean({vector})",
            f"The result of summing the numbers and dividing by the count = ##mean({vector})",
            f"The average obtained by summing and dividing the numbers {lst_str} = ##mean({vector})",
            f"The computed result of finding the mean of {lst_str} = ##mean({vector})",
            f"The result of averaging the values {lst_str} = ##mean({vector})",
            f"The value calculated by adding and dividing the numbers {lst_str} = ##mean({vector})",
            f"The average value of the list {lst_str} = ##mean({vector})",
            f"The outcome of calculating the average of {lst_str} = ##mean({vector})",
            f"The mean of the elements {lst_str} is = ##mean({vector})",
            f"The average value of the set {lst_str} = ##mean({vector})",
            f"The calculated result of mean({lst_str}) is = ##mean({vector})",
            f"The average of the numbers {lst_str} is = ##mean({vector})",
            f"The value of the mean of {lst_str} is = ##mean({vector})",
            f"The result of evaluating mean({lst_str}) is = ##mean({vector})",
            f"The outcome of finding the average of the numbers {lst_str} is = ##mean({vector})",
            f"The average value calculated from {lst_str} is = ##mean({vector})",
            f"The value of the average of the numbers {lst_str} is = ##mean({vector})",
        ],
        [
            f"The median of the numbers {lst_str} = ##median({vector})",
            f"median({lst_str}) = ##median({vector})",
            f"The middle value of the numbers {lst_str} = ##median({vector})",
            f"Calculation: median({lst_str}) = ##median({vector})",
            f"The value at the center of the sorted numbers {lst_str} = ##median({vector})",
            f"The value that separates the data set {lst_str} into two halves = ##median({vector})",
            f"The result of calculating the median of the elements {lst_str} = ##median({vector})",
            f"The middle value of the dataset {lst_str} = ##median({vector})",
            f"The median value of the numbers {lst_str} = ##median({vector})",
            f"The value that lies in the middle of the ordered numbers {lst_str} = ##median({vector})",
            f"The value obtained by sorting the numbers {lst_str} and taking the middle = ##median({vector})",
            f"The computed result of finding the median of {lst_str} = ##median({vector})",
            f"The result of evaluating median({lst_str}) = ##median({vector})",
            f"The outcome of determining the median of {lst_str} = ##median({vector})",
            f"The median of the set {lst_str} = ##median({vector})",
            f"The outcome of finding the middle value of {lst_str} = ##median({vector})",
            f"The value at the center of the sorted set {lst_str} is = ##median({vector})",
            f"The value that divides the data set {lst_str} into two halves is = ##median({vector})",
            f"The calculated result of median({lst_str}) is = ##median({vector})",
            f"The middle value of the numbers {lst_str} is = ##median({vector})",
            f"The value of the median of {lst_str} is = ##median({vector})",
            f"The median of the elements {lst_str} is = ##median({vector})",
            f"The result of calculating median({lst_str}) is = ##median({vector})",
            f"The outcome of finding the median value of {lst_str} is = ##median({vector})",
            f"The value in the middle of the sorted list {lst_str} is = ##median({vector})",
            f"The value that separates the numbers {lst_str} into two halves is = ##median({vector})",
        ],
        [
            f"The minimum value in the list {lst_str} = ##min_value({vector})",
            f"min_value({vector}) = ##min_value({vector})",
            f"The result of finding the minimum value in {lst_str} = ##min_value({vector})",
            f"Calculation: min_value({vector}) = ##min_value({vector})",
            f"The lowest value among the elements in {lst_str} = ##min_value({vector})",
            f"The outcome of determining the minimum value in {lst_str} = ##min_value({vector})",
            f"The minimum value found in the list {lst_str} = ##min_value({vector})",
            f"The smallest value among the numbers in {lst_str} = ##min_value({vector})",
            f"The computed result of finding the minimum value in {lst_str} = ##min_value({vector})",
            f"The value of the smallest element in {lst_str} = ##min_value({vector})",
            f"The least value among the integers in {lst_str} = ##min_value({vector})",
            f"The minimum result obtained from the numbers in {lst_str} = ##min_value({vector})",
            f"The outcome of evaluating min_value({vector}) is = ##min_value({vector})",
            f"The value calculated by finding the minimum value in {lst_str} = ##min_value({vector})",
            f"The result of evaluating min_value({vector}) is = ##min_value({vector})",
            f"The outcome of finding the smallest value in the list {lst_str} is = ##min_value({vector})",
            f"The result of finding the minimum value among {lst_str} is = ##min_value({vector})",
            f"The calculated outcome of evaluating min_value({vector}) is = ##min_value({vector})",
            f"The least result obtained from the elements in {lst_str} is = ##min_value({vector})",
        ],
        [
            f"The modulus of {x} by {y} = ##modulus({x},{y})",
            f"{x} % {y} = ##modulus({x},{y})",
            f"The remainder when {x} is divided by {y} = ##modulus({x},{y})",
            f"The result of the modulus operation on {x} and {y} = ##modulus({x},{y})",
            f"Calculation: {x} % {y} = ##modulus({x},{y})",
            f"The remainder after dividing {x} by {y} = ##modulus({x},{y})",
            f"{x} modulus {y} = ##modulus({x},{y})",
            f"{x} % {y} equals? = ##modulus({x},{y})",
            f"The modulo result of {x} divided by {y} = ##modulus({x},{y})",
            f"The remainder of {x} divided by {y} = ##modulus({x},{y})",
            f"The value of {x} % {y} = ##modulus({x},{y})",
            f"The modulus of {x} and {y} is = ##modulus({x},{y})",
            f"The remainder of dividing {x} by {y} = ##modulus({x},{y})",
        ],
        [
            f"Multiplying {m} with {n} = ##multiplication({m},{n})",
            f"{m} * {n} = ##multiplication({m},{n})",
            f"The result of multiplying {m} and {n} = ##multiplication({m},{n})",
            f"{m} times {n} equals? = ##multiplication({m},{n})",
            f"Calculation: {m} * {n} = ##multiplication({m},{n})",
            f"{m} multiplied by {n} = ##multiplication({m},{n})",
            f"The product of {m} and {n} = ##multiplication({m},{n})",
            f"{m} * {n} = = ##multiplication({m},{n})",
            f"The total when {m} is multiplied by {n} = ##multiplication({m},{n})",
            f"{m} and {n} multiplied together = ##multiplication({m},{n})",
            f"{m} * {n} results in = ##multiplication({m},{n})",
        ],
        [
            f"Calculating the value of -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
            f"The result of evaluating -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"Calculation: negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
            f"The expression -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"The outcome of evaluating negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
            f"The result obtained by calculating -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"The value of negative 2 times {x} times {y} = ##negative_2ab({x}, {y})",
            f"The computed result of evaluating -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"The product of -2 times {x} times {y} = ##negative_2ab({x}, {y})",
            f"The outcome of determining -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"The numerical value of -2 * {x} times {y} = ##negative_2ab({x}, {y})",
            f"The result of evaluating negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
            f"The value of -2 * {x} * {y} is = ##negative_2ab({x}, {y})",
            f"The result derived from evaluating negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
            f"The calculated result of -2 * {x} times {y} = ##negative_2ab({x}, {y})",
            f"The value of negative 2 times {x} times {y} is = ##negative_2ab({x}, {y})",
            f"The value of -2 * {x} * {y} equals = ##negative_2ab({x}, {y})",
            f"The value of -2 * {x} times {y} is = ##negative_2ab({x}, {y})",
            f"The computed value of -2 * {x} * {y} = ##negative_2ab({x}, {y})",
            f"The calculated outcome of -2 * {x} times {y} = ##negative_2ab({x}, {y})",
            f"The outcome of evaluating negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
            f"The outcome of determining the product of -2 times {x} times {y} = ##negative_2ab({x}, {y})",
            f"The outcome of evaluating negative_2ab({x}, {y}) = ##negative_2ab({x}, {y})",
        ],
        [
            f"The {m}th root of the number {x} = ##nth_root({x}, {m})",
            f"nth_root({x}, {m}) = ##nth_root({x}, {m})",
            f"The result of finding the {m}th root of {x} = ##nth_root({x}, {m})",
            f"Calculation: nth_root({x}, {m}) = ##nth_root({x}, {m})",
            f"The value obtained by taking the {m}th root of {x} = ##nth_root({x}, {m})",
            f"The outcome of calculating the {m}th root of {x} = ##nth_root({x}, {m})",
            f"The {m}th root value of {x} = ##nth_root({x}, {m})",
            f"The result of finding the {m}th root of the number {x} = ##nth_root({x}, {m})",
            f"The computed result of finding the {m}th root of {x} = ##nth_root({x}, {m})",
            f"The value of {x} under the {m}th root = ##nth_root({x}, {m})",
            f"The {m}th root of the quantity {x} = ##nth_root({x}, {m})",
            f"The {m}th root result of the number {x} = ##nth_root({x}, {m})",
            f"The outcome of evaluating nth_root({x}, {m}) is = ##nth_root({x}, {m})",
            f"The value calculated by finding the {m}th root of {x} is = ##nth_root({x}, {m})",
            f"The result of evaluating nth_root({x}, {m}) is = ##nth_root({x}, {m})",
            f"The {m}th root of the number {x} is = ##nth_root({x}, {m})",
            f"The computed {m}th root of the number {x} is = ##nth_root({x}, {m})",
            f"The value obtained by finding the {m}th root of {x} is = ##nth_root({x}, {m})",
            f"The outcome of finding the {m}th root value of {x} is = ##nth_root({x}, {m})",
            f"The result of finding the {m}th root among {x} is = ##nth_root({x}, {m})",
            f"The calculated outcome of evaluating nth_root({x}, {m}) is = ##nth_root({x}, {m})",
            f"The value of the {m}th root of {x} is = ##nth_root({x}, {m})",
            f"The computed value of nth_root({x}, {m}) is = ##nth_root({x}, {m})",
            f"The calculated result of finding the {m}th root of {x} is = ##nth_root({x}, {m})",
            f"The {m}th root value of {x} is = ##nth_root({x}, {m})",
            f"The result of finding the {m}th root of the number {x} is = ##nth_root({x}, {m})",
        ],
        [
            f"Determine if the string '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"IS_PALINDROME('{word}') = ##is_palindrome('{word}')",
            f"Check if '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome? = ##is_palindrome('{word}')",
            f"Verify whether '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Checking if '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"IS_PALINDROME calculation: '{word}' = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome? = ##is_palindrome('{word}')",
            f"Check if '{word}' is a palindrome string = ##is_palindrome('{word}')",
            f"Let's determine if '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome or not? = ##is_palindrome('{word}')",
            f"Determine if '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Checking the palindrome property of '{word}' = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome? = ##is_palindrome('{word}')",
            f"Check if '{word}' is a palindrome, result is = ##is_palindrome('{word}')",
            f"Determine whether '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Verify if '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Check if '{word}' is a palindrome string = ##is_palindrome('{word}')",
            f"IS_PALINDROME('{word}'), what does it yield? = ##is_palindrome('{word}')",
            f"Checking if '{word}' is a palindrome without spaces = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome or not? = ##is_palindrome('{word}')",
            f"Determine if '{word}' is a palindrome, result is = ##is_palindrome('{word}')",
            f"Check if '{word}' is a palindrome or not, result is = ##is_palindrome('{word}')",
            f"Let's find out if '{word}' is a palindrome = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome without spaces? = ##is_palindrome('{word}')",
            f"Check if '{word}' is a palindrome string or not = ##is_palindrome('{word}')",
            f"Verify the palindrome property of '{word}' = ##is_palindrome('{word}')",
            f"IS_PALINDROME('{word}'), is it true or false? = ##is_palindrome('{word}')",
            f"Determine if '{word}' is a palindrome without spaces = ##is_palindrome('{word}')",
            f"Is '{word}' a palindrome or not, what is the answer? = ##is_palindrome('{word}')",
        ]
    ]
    return random.choice(examples)


if __name__ == "__main__":
    from masked_token_sample_generator import MaskedTokenSamplesGenerator

    masked_example = MaskedTokenSamplesGenerator.create_masked_token_batches(
        get_batch_seventeen_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        masked_example,
        PretrainTasks.MASKED_TOKEN_PREDICTION,
    )
    print(sample)

    from next_token_sample_generator import NextTokenSamplesGenerator

    next_token_example = NextTokenSamplesGenerator.create_next_token_batches(
        get_batch_seventeen_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        next_token_example,
        PretrainTasks.NEXT_TOKEN_PREDICTION
    )
    print(sample)
