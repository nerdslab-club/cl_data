import random

from cl_data.src.constants import PretrainTasks
from cl_data.src.random_value_generator import RandomValueGenerator
from cl_data.src.utility import Utility


def get_batch_twenty_example_paragraph():
    x = RandomValueGenerator.generate_random_integer(1, 20)
    y = RandomValueGenerator.generate_random_integer(1, x)
    a = RandomValueGenerator.generate_random_integer(1, 20)
    b = RandomValueGenerator.generate_random_integer(1, 20)

    angle = round(random.uniform(0, 360), 2)  # Random angle in degrees
    angle_degrees = round(angle, 2)  # Round the angle to two decimal places

    number = RandomValueGenerator.generate_random_integer(1, 1000)
    numbers = RandomValueGenerator.generate_random_list(3, -10, 10)

    num1 = random.randint(0, 1000)
    num2 = random.randint(0, num1)  # Ensure num2 is less than or equal to num1

    f1 = round(random.uniform(1, 1000), 2)  # Using random float between 1 and 1000
    f2 = RandomValueGenerator.generate_random_float(-100.0, 100.0)
    f3 = RandomValueGenerator.generate_random_float(-100.0, 100.0)

    input_str = RandomValueGenerator.generate_random_string()
    radians = RandomValueGenerator.generate_random_float(0.0, 2 * 3.14159)

    vector = RandomValueGenerator.generate_random_list(
        RandomValueGenerator.generate_random_integer(2, 10), -10, 100
    )
    list_str = " , ".join(str(num) for num in vector)

    examples = [
        [
            f"Calculate {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"X_SQUARED_PLUS_A_PLUS_B_TIMES_X_PLUS_AB({x}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Determine the result of {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Find the expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The result of calculating {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Performing the x_squared_plus_a_plus_b_times_x_plus_ab operation for {x}, {a}, and {b} = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"X_SQUARED_PLUS_A_PLUS_B_TIMES_X_PLUS_AB operation: ({x}, {a}, {b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The result after calculating {x}^2 + ({a} + {b}) * ({x} + {a * b}), what is it? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Determine {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Let's calculate {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The result of {x}^2 + ({a} + {b}) * ({x} + {a * b}), is it true? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Calculating {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The result after calculating x_squared_plus_a_plus_b_times_x_plus_ab for {x}, {a}, and {b} = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), what is its value? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Let's determine the expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), what is the result? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), what does it give? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) and provide the result = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"X_SQUARED_PLUS_A_PLUS_B_TIMES_X_PLUS_AB({x}, {a}, {b}), what does it yield? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), ignoring order = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The result after calculating the expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Calculate {x}^2 + ({a} + {b}) * ({x} + {a * b}), find the answer = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), what does it give? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"Let's find the result after calculating the expression {x}^2 + ({a} + {b}) * ({x} + {a * b}) = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), what is the output? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
            f"The result after calculating the expression {x}^2 + ({a} + {b}) * ({x} + {a * b}), what is it? = ##x_squared_plus_a_plus_b_times_x_plus_ab({x}, {a}, {b})",
        ],
        [
            f"Calculate ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"X_PLUS_A_TIMES_X_PLUS_B({x}, {a}, {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Determine the result of ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Find the expression ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The result of calculating ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Performing the x_plus_a_times_x_plus_b operation for {x}, {a}, and {b} = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"X_PLUS_A_TIMES_X_PLUS_B operation: ({x}, {a}, {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The result after calculating ({x} + {a}) * ({x} + {b}), what is it? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Determine ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Let's calculate ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The result of ({x} + {a}) * ({x} + {b}), is it true? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Calculating ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The result after calculating x_plus_a_times_x_plus_b for {x}, {a}, and {b} = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}), what is its value? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Let's determine the expression ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}), what is the result? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}), what does it give? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}) and provide the result = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"X_PLUS_A_TIMES_X_PLUS_B({x}, {a}, {b}), what does it yield? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}), ignoring order = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The result after calculating the expression ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Calculate ({x} + {a}) * ({x} + {b}), find the answer = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}), what does it give? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"Let's find the result after calculating the expression ({x} + {a}) * ({x} + {b}) = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The expression ({x} + {a}) * ({x} + {b}), what is the output? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
            f"The result after calculating the expression ({x} + {a}) * ({x} + {b}), what is it? = ##x_plus_a_times_x_plus_b({x}, {a}, {b})",
        ],
        [
            f"Tangent of {angle_degrees} degrees = ##tangent({angle})",
            f"Tan({angle_degrees}) = ##tangent({angle})",
            f"The tangent value for {angle_degrees} degrees = ##tangent({angle})",
            f"Calculate tangent for {angle_degrees} degrees = ##tangent({angle})",
            f"Tangent function applied to {angle_degrees} = ##tangent({angle})",
            f"Tangent of angle {angle_degrees} = ##tangent({angle})",
            f"Tangent({angle_degrees}), what is it? = ##tangent({angle})",
            f"The result of tan({angle_degrees}) = ##tangent({angle})",
            f"Find the tangent of {angle_degrees} degrees = ##tangent({angle})",
            f"Tangent value when angle is {angle_degrees} degrees = ##tangent({angle})",
            f"Angle: {angle_degrees}, tangent? = ##tangent({angle})",
            f"Tangent of {angle_degrees}, tell me = ##tangent({angle})",
            f"Tan({angle_degrees}), the answer? = ##tangent({angle})",
            f"Calculate tan({angle_degrees}) = ##tangent({angle})",
            f"The tangent for angle {angle_degrees} = ##tangent({angle})",
            f"What is tan({angle_degrees})? = ##tangent({angle})",
            f"Tangent of {angle_degrees}, result? = ##tangent({angle})",
            f"Tan({angle_degrees}), find the value = ##tangent({angle})",
            f"The tangent value for angle {angle_degrees} = ##tangent({angle})",
            f"Tangent of angle {angle_degrees}, what does it give? = ##tangent({angle})",
            f"Find tan({angle_degrees}) = ##tangent({angle})",
            f"Tangent function for angle {angle_degrees} = ##tangent({angle})",
            f"Tangent of {angle_degrees} degrees, what is the result? = ##tangent({angle})",
        ],
        [
            f"Calculate the sum of digits for the number {number} = ##sum_of_digits({number})",
            f"SUM_OF_DIGITS({number}) = ##sum_of_digits({number})",
            f"Determine the sum of digits for the number {number} = ##sum_of_digits({number})",
            f"Find the sum of digits value for the number {number} = ##sum_of_digits({number})",
            f"The result of calculating the sum of digits for {number} = ##sum_of_digits({number})",
            f"Performing the sum of digits operation on the number {number} = ##sum_of_digits({number})",
            f"The sum of digits for the number {number} = ##sum_of_digits({number})",
            f"SUM_OF_DIGITS calculation: {number} = ##sum_of_digits({number})",
            f"The result after calculating the sum of digits for {number}, what is it? = ##sum_of_digits({number})",
            f"The sum of digits value of {number}, what does it give? = ##sum_of_digits({number})",
            f"Let's calculate the sum of digits for the number {number} = ##sum_of_digits({number})",
            f"The sum of digits value for the number {number}, result is = ##sum_of_digits({number})",
            f"Calculating the sum of digits for the number {number} = ##sum_of_digits({number})",
            f"The sum of digits result after calculating the sum of digits for {number} = ##sum_of_digits({number})",
            f"The sum of digits for the number {number}, what is its value? = ##sum_of_digits({number})",
            f"Let's determine the sum of digits for the number {number} = ##sum_of_digits({number})",
            f"The sum of digits value for the number {number} = ##sum_of_digits({number})",
            f"The sum of digits for the number {number}, what is the result? = ##sum_of_digits({number})",
            f"The sum of digits for the number {number}, what does it give? = ##sum_of_digits({number})",
            f"The sum of digits for the number {number} and provide the result = ##sum_of_digits({number})",
            f"SUM_OF_DIGITS({number}), what does it yield? = ##sum_of_digits({number})",
            f"The sum of digits value for the number {number}, ignoring order = ##sum_of_digits({number})",
            f"The result after calculating the sum of digits for {number} = ##sum_of_digits({number})",
            f"The sum of digits for the number {number}, what is it? = ##sum_of_digits({number})",
            f"Calculate the sum of digits for the number {number}, find the answer = ##sum_of_digits({number})",
            f"The sum of digits for the number {number}, what does it give? = ##sum_of_digits({number})",
            f"Let's find the result after calculating the sum of digits for {number} = ##sum_of_digits({number})",
            f"The sum of digits for the number {number}, what is the output? = ##sum_of_digits({number})",
            f"The result after calculating the sum of digits for {number}, what is it? = ##sum_of_digits({number})",
        ],
        [
            f"Calculate the sum of the numbers {numbers} = ##sum({numbers})",
            f"SUM({numbers}) = ##sum({numbers})",
            f"Determine the result of the sum for the numbers {numbers} = ##sum({numbers})",
            f"Find the sum of the numbers {numbers} = ##sum({numbers})",
            f"The result of calculating the sum of the numbers {numbers} = ##sum({numbers})",
            f"Performing the sum calculation for the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers} = ##sum({numbers})",
            f"SUM calculation: {numbers} = ##sum({numbers})",
            f"The result after calculating the sum of the numbers {numbers}, what is it? = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what does it give? = ##sum({numbers})",
            f"Let's calculate the sum of the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers}, result is = ##sum({numbers})",
            f"Calculating the sum of the numbers {numbers} = ##sum({numbers})",
            f"The sum result after calculating sum for the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what is its value? = ##sum({numbers})",
            f"Let's determine the sum of the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what is the result? = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what does it give? = ##sum({numbers})",
            f"The sum of the numbers {numbers} and provide the result = ##sum({numbers})",
            f"SUM({numbers}), what does it yield? = ##sum({numbers})",
            f"The sum of the numbers {numbers}, ignoring order = ##sum({numbers})",
            f"The result after calculating the sum of the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what is it? = ##sum({numbers})",
            f"Calculate the sum of the numbers {numbers}, find the answer = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what does it give? = ##sum({numbers})",
            f"Let's find the result after calculating the sum of the numbers {numbers} = ##sum({numbers})",
            f"The sum of the numbers {numbers}, what is the output? = ##sum({numbers})",
            f"The result after calculating the sum of the numbers {numbers}, what is it? = ##sum({numbers})",
        ],
        [
            f"Subtracting {num2} from {num1} = ##subtraction({num1},{num2})",
            f"{num1} minus {num2} = ##subtraction({num1},{num2})",
            f"Deducting {num2} from {num1} = ##subtraction({num1},{num2})",
            f"The result of {num1} minus {num2} = ##subtraction({num1},{num2})",
            f"{num1} minus {num2}, what is it? = ##subtraction({num1},{num2})",
            f"Calculation: {num1} - {num2} = ##subtraction({num1},{num2})",
            f"{num1} minus {num2}, equals? = ##subtraction({num1},{num2})",
            f"Taking away {num2} from {num1} = ##subtraction({num1},{num2})",
            f"{num2} subtracted from {num1} = ##subtraction({num1},{num2})",
            f"The subtraction of {num2} from {num1} = ##subtraction({num1},{num2})",
            f"{num1} minus {num2} is? = ##subtraction({num1},{num2})",
            f"{num1} minus {num2} is equal to? = ##subtraction({num1},{num2})",
            f"{num2} subtracted from {num1}, what does it give? = ##subtraction({num1},{num2})",
            f"{num1} and {num2} subtracted, the result? = ##subtraction({num1},{num2})",
            f"{num1} less {num2}, the answer? = ##subtraction({num1},{num2})",
            f"{num1} take away {num2}, find the answer = ##subtraction({num1},{num2})",
            f"Difference: {num1} - {num2} = ##subtraction({num1},{num2})",
            f"Let's subtract {num2} from {num1} = ##subtraction({num1},{num2})",
            f"Find the difference between {num1} and {num2} = ##subtraction({num1},{num2})",
            f"{num2} and {num1}, their subtraction? = ##subtraction({num1},{num2})",
            f"{num1} minus {num2}, result is = ##subtraction({num1},{num2})",
            f"{num1} and {num2}, what will be the difference? = ##subtraction({num1},{num2})",
            f"Subtraction: {num1} - {num2} = ##subtraction({num1},{num2})",
            f"{num1} decreased by {num2} = ##subtraction({num1},{num2})",
            f"{num2} reduced from {num1} = ##subtraction({num1},{num2})",
            f"The remainder when {num2} is subtracted from {num1} = ##subtraction({num1},{num2})",
            f"{num1} take away {num2} equals? = ##subtraction({num1},{num2})",
        ],
        [
            f"Finding the square root of {f1} = ##square_root({f1})",
            f"The square root of {f1} = ##square_root({f1})",
            f"Square root of {f1} = ##square_root({f1})",
            f"Root of {f1}, what is it? = ##square_root({f1})",
            f"Calculate the square root of {f1} = ##square_root({f1})",
            f"The number whose square root is {f1} = ##square_root({f1})",
            f"Square root of {f1}, equals? = ##square_root({f1})",
            f"Taking the square root of {f1} = ##square_root({f1})",
            f"Square root of {f1}, the answer? = ##square_root({f1})",
            f"The square root of {f1}, find it = ##square_root({f1})",
            f"The root of {f1}, the value? = ##square_root({f1})",
            f"Square root of {f1}, what do you get? = ##square_root({f1})",
            f"Square root of {f1}, result is = ##square_root({f1})",
            f"The result of square root of {f1} = ##square_root({f1})",
            f"Let's find the square root of {f1} = ##square_root({f1})",
            f"Root calculation for {f1} = ##square_root({f1})",
            f"Square root: √{f1} = ##square_root({f1})",
            f"Find the square root of {f1}, result? = ##square_root({f1})",
            f"The value when square root is taken for {f1} = ##square_root({f1})",
            f"The square root of {f1}, the outcome? = ##square_root({f1})",
            f"The square root of {f1}, in decimal = ##square_root({f1})",
            f"The square root of {f1}, in numerical form = ##square_root({f1})",
        ],
        [
            f"Calculate the square of the number {f1} = ##square({f1})",
            f"SQUARE({f1}) = ##square({f1})",
            f"Find the square value for the number {f1} = ##square({f1})",
            f"The result of squaring the number {f1} = ##square({f1})",
            f"Perform the square operation on the number {f1} = ##square({f1})",
            f"Squaring the number {f1} = ##square({f1})",
            f"The square of the number {f1} = ##square({f1})",
            f"SQUARE calculation: {f1} = ##square({f1})",
            f"The result after squaring the number {f1}, what is it? = ##square({f1})",
            f"The square value of the number {f1}, what does it give? = ##square({f1})",
            f"Let's square the number {f1} = ##square({f1})",
            f"Square the number {f1}, result is = ##square({f1})",
            f"Calculating the square for the number {f1} = ##square({f1})",
            f"The squared result after squaring the number {f1} = ##square({f1})",
            f"The square of the number {f1}, what is its value? = ##square({f1})",
            f"Let's determine the square of the number {f1} = ##square({f1})",
            f"The square value of the number {f1} = ##square({f1})",
            f"Square {f1}, what is the result? = ##square({f1})",
            f"The square of the number {f1}, what does it give? = ##square({f1})",
            f"Square {f1} and provide the result = ##square({f1})",
            f"SQUARE({f1}), what does it yield? = ##square({f1})",
            f"The square value of the number {f1}, ignoring order = ##square({f1})",
            f"The result after squaring the number {f1} = ##square({f1})",
            f"The square of the number {f1}, what is it? = ##square({f1})",
            f"Calculate the square for the number {f1}, find the answer = ##square({f1})",
            f"The square value of the number {f1}, what does it give? = ##square({f1})",
            f"Let's find the result after squaring the number {f1} = ##square({f1})",
            f"Square {f1}, what is the output? = ##square({f1})",
            f"The squared result after squaring the number {f1}, what is it? = ##square({f1})",
        ],
        [
            f"Calculate the square of the integer {x} = ##square_int({x})",
            f"SQUARE_INT({x}) = ##square_int({x})",
            f"Find the square value for the integer {x} = ##square_int({x})",
            f"The result of squaring the integer {x} = ##square_int({x})",
            f"Perform the square operation on the integer {x} = ##square_int({x})",
            f"Squaring the integer {x} = ##square_int({x})",
            f"The square of the integer {x} = ##square_int({x})",
            f"SQUARE_INT calculation: {x} = ##square_int({x})",
            f"The result after squaring the integer {x}, what is it? = ##square_int({x})",
            f"The square value of the integer {x}, what does it give? = ##square_int({x})",
            f"Let's square the integer {x} = ##square_int({x})",
            f"Square the integer {x}, result is = ##square_int({x})",
            f"Calculating the square for the integer {x} = ##square_int({x})",
            f"The squared result after squaring the integer {x} = ##square_int({x})",
            f"The square of the integer {x}, what is its value? = ##square_int({x})",
            f"Let's determine the square of the integer {x} = ##square_int({x})",
            f"The square value of the integer {x} = ##square_int({x})",
            f"Square {x}, what is the result? = ##square_int({x})",
            f"The square of the integer {x}, what does it give? = ##square_int({x})",
            f"Square {x} and provide the result = ##square_int({x})",
            f"SQUARE_INT({x}), what does it yield? = ##square_int({x})",
            f"The square value of the integer {x}, ignoring order = ##square_int({x})",
            f"The result after squaring the integer {x} = ##square_int({x})",
            f"The square of the integer {x}, what is it? = ##square_int({x})",
            f"Calculate the square for the integer {x}, find the answer = ##square_int({x})",
            f"The square value of the integer {x}, what does it give? = ##square_int({x})",
            f"Let's find the result after squaring the integer {x} = ##square_int({x})",
            f"Square {x}, what is the output? = ##square_int({x})",
            f"The squared result after squaring the integer {x}, what is it? = ##square_int({x})",
        ],
        [
            f"The smaller value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"SMALLEST_VALUE({f2}, {f3}) = ##smallest_value({f2}, {f3})",
            f"Find the smallest value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"The result of smallest value({f2}, {f3}) = ##smallest_value({f2}, {f3})",
            f"The minimum value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"Calculate the smallest value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"Finding smallest value for {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"The value less than or equal to both {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"The minimum value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"smallest value calculation: {f2}, {f3} = ##smallest_value({f2}, {f3})",
            f"The smaller value between {f2} and {f3}, what is it? = ##smallest_value({f2}, {f3})",
            f"The smaller value between {f2} and {f3}, what does it give? = ##smallest_value({f2}, {f3})",
            f"Let's find the smallest value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"Find the smallest value for {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"The smaller value between {f2} and {f3}, result is = ##smallest_value({f2}, {f3})",
            f"Calculating the smallest value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"The value less than or equal to both {f2} and {f3}, what is it? = ##smallest_value({f2}, {f3})",
            f"The minimum value between {f2} and {f3}, find the answer = ##smallest_value({f2}, {f3})",
            f"Calculate smallest value({f2}, {f3}) = ##smallest_value({f2}, {f3})",
            f"The smaller value between {f2} and {f3}, what is its value? = ##smallest_value({f2}, {f3})",
            f"Let's determine the smallest value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"{f2} and {f3}, what is their smaller value? = ##smallest_value({f2}, {f3})",
            f"Finding the smallest value between {f2} and {f3} = ##smallest_value({f2}, {f3})",
            f"The smaller value between {f2} and {f3}, what is its value? = ##smallest_value({f2}, {f3})",
            f"Find the smallest value between {f2} and {f3} and provide the result = ##smallest_value({f2}, {f3})",
            f"smallest value({f2}, {f3}), what does it yield? = ##smallest_value({f2}, {f3})",
            f"The smaller value between {f2} and {f3}, ignoring direction = ##smallest_value({f2}, {f3})",
        ],
        [
            f"The sine of {angle_degrees} degrees = ##sine({angle_degrees})",
            f"Sine of {angle_degrees}° = ##sine({angle_degrees})",
            f"Sine value for angle {angle_degrees}° = ##sine({angle_degrees})",
            f"The value of sin({angle_degrees}°) = ##sine({angle_degrees})",
            f"Calculate the sine of {angle_degrees}° = ##sine({angle_degrees})",
            f"The result of sine {angle_degrees} degrees = ##sine({angle_degrees})",
            f"The trigonometric function sine for {angle_degrees}° = ##sine({angle_degrees})",
            f"Sine of {angle_degrees}°, equals? = ##sine({angle_degrees})",
            f"The sine value for the angle {angle_degrees}° = ##sine({angle_degrees})",
            f"The sine of {angle_degrees}°, what is it? = ##sine({angle_degrees})",
            f"Sine calculation: sin({angle_degrees}°) = ##sine({angle_degrees})",
            f"The sine of {angle_degrees}°, the answer? = ##sine({angle_degrees})",
            f"The sine of {angle_degrees}°, find it = ##sine({angle_degrees})",
            f"The value of sine of {angle_degrees} degrees = ##sine({angle_degrees})",
            f"Let's find the sine of {angle_degrees}° = ##sine({angle_degrees})",
            f"Sine value calculation: sin({angle_degrees}°) = ##sine({angle_degrees})",
            f"Find the value of sin({angle_degrees}°) = ##sine({angle_degrees})",
            f"The sine of {angle_degrees}°, the outcome? = ##sine({angle_degrees})",
            f"Sine of {angle_degrees}°, what will you get? = ##sine({angle_degrees})",
            f"Sine calculation: sin({angle_degrees}°), what is it? = ##sine({angle_degrees})",
            f"The sine value for the angle {angle_degrees}°, result? = ##sine({angle_degrees})",
            f"The value of sine for the angle {angle_degrees}° = ##sine({angle_degrees})",
            f"Sine of {angle_degrees}°, the value? = ##sine({angle_degrees})",
            f"Sine value for {angle_degrees}°, result is = ##sine({angle_degrees})",
            f"Sine of {angle_degrees}°, in trigonometry = ##sine({angle_degrees})",
            f"The outcome of calculating sin({angle_degrees}°) = ##sine({angle_degrees})",
            f"The value of sin({angle_degrees}°), the result? = ##sine({angle_degrees})",
        ],
        [
            f"Calculate the sigmoid function value for {f2} = ##sigmoid({f2})",
            f"SIGMOID({f2}) = ##sigmoid({f2})",
            f"Determine the result of the sigmoid function for {f2} = ##sigmoid({f2})",
            f"Find the sigmoid value for {f2} = ##sigmoid({f2})",
            f"The result of applying the sigmoid function to {f2} = ##sigmoid({f2})",
            f"Performing the sigmoid operation for {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2} = ##sigmoid({f2})",
            f"SIGMOID calculation: {f2} = ##sigmoid({f2})",
            f"The result after applying the sigmoid function to {f2}, what is it? = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what does it give? = ##sigmoid({f2})",
            f"Let's calculate the sigmoid value for {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, result is = ##sigmoid({f2})",
            f"Calculating the sigmoid value for {f2} = ##sigmoid({f2})",
            f"The sigmoid result after applying the sigmoid function to {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what is its value? = ##sigmoid({f2})",
            f"Let's determine the sigmoid value for {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what is the result? = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what does it give? = ##sigmoid({f2})",
            f"The sigmoid value for {f2} and provide the result = ##sigmoid({f2})",
            f"SIGMOID({f2}), what does it yield? = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, ignoring order = ##sigmoid({f2})",
            f"The result after applying the sigmoid function to {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what is it? = ##sigmoid({f2})",
            f"Calculate the sigmoid value for {f2}, find the answer = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what does it give? = ##sigmoid({f2})",
            f"Let's find the result after applying the sigmoid function to {f2} = ##sigmoid({f2})",
            f"The sigmoid value for {f2}, what is the output? = ##sigmoid({f2})",
            f"The result after applying the sigmoid function to {f2}, what is it? = ##sigmoid({f2})",
        ],
        [
            f"The rounded value of {f2} = ##round({f2})",
            f"ROUND({f2}) = ##round({f2})",
            f"Round {f2} to the nearest whole number = ##round({f2})",
            f"The result of ROUND({f2}) = ##round({f2})",
            f"Find the rounded value of {f2} = ##round({f2})",
            f"Rounding {f2} = ##round({f2})",
            f"{f2}, rounded to the nearest integer = ##round({f2})",
            f"The closest whole number to {f2} = ##round({f2})",
            f"ROUND calculation: {f2} = ##round({f2})",
            f"The closest whole number to {f2}, what is it? = ##round({f2})",
            f"The closest whole number to {f2}, what does it give? = ##round({f2})",
            f"Let's round {f2} to the nearest whole number = ##round({f2})",
            f"Find the ROUND for {f2} = ##round({f2})",
            f"The closest whole number to {f2}, result is = ##round({f2})",
            f"Rounding {f2} to the nearest integer = ##round({f2})",
            f"{f2}, what is its rounded value? = ##round({f2})",
            f"The closest whole number to {f2}, find the answer = ##round({f2})",
            f"Calculate ROUND({f2}) = ##round({f2})",
            f"Round {f2} to the nearest integer = ##round({f2})",
            f"The closest whole number to {f2}, what is its value? = ##round({f2})",
            f"Rounding operation for {f2} = ##round({f2})",
            f"Let's determine the rounded value of {f2} = ##round({f2})",
            f"{f2}, rounded, what is the result? = ##round({f2})",
            f"The closest whole number to {f2}, what is it? = ##round({f2})",
            f"Find the rounded value of {f2} and provide the result = ##round({f2})",
            f"ROUND({f2}), what does it yield? = ##round({f2})",
            f"Rounded value for {f2} = ##round({f2})",
        ],
        [
            f"Reverse the string '{input_str}' = ##reverse_string('{input_str}')",
            f"REVERSE_STRING('{input_str}') = ##reverse_string('{input_str}')",
            f"Flip the characters in the string '{input_str}' = ##reverse_string('{input_str}')",
            f"Invert the order of characters in '{input_str}' = ##reverse_string('{input_str}')",
            f"The result of reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"Performing the reverse_string operation for '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"REVERSE_STRING operation: '{input_str}' = ##reverse_string('{input_str}')",
            f"The result after reversing the string '{input_str}', what is it? = ##reverse_string('{input_str}')",
            f"Turn '{input_str}' backwards = ##reverse_string('{input_str}')",
            f"Let's reverse the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed form of '{input_str}', result is = ##reverse_string('{input_str}')",
            f"Reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed string result after reversing for '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}', what is its value? = ##reverse_string('{input_str}')",
            f"Let's determine the reversed form of '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}', what is the result? = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}', what does it give? = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}' and provide the resu = ##reverse_string('{input_str}')lt",
            f"REVERSE_STRING('{input_str}'), what does it yield? = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}', ignoring order = ##reverse_string('{input_str}')",
            f"The result after reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"Reverse the string '{input_str}', find the answer = ##reverse_string('{input_str}')",
            f"Reversing the string '{input_str}', what does it give? = ##reverse_string('{input_str}')",
            f"Let's find the result after reversing the string '{input_str}' = ##reverse_string('{input_str}')",
            f"The reversed form of the string '{input_str}', what is the output? = ##reverse_string('{input_str}')",
            f"The result after reversing the string '{input_str}', what is it? = ##reverse_string('{input_str}')",
        ],
        [
            f"Apply the Rectified Linear Unit (ReLU) activation to {f2} = ##relu({f2})",
            f"RELU({f2}) = ##relu({f2})",
            f"Use ReLU activation on {f2} = ##relu({f2})",
            f"The result of applying ReLU activation to {f2} = ##relu({f2})",
            f"Calculate the ReLU activation for {f2} = ##relu({f2})",
            f"Applying ReLU to {f2} = ##relu({f2})",
            f"The value after ReLU activation: {f2} = ##relu({f2})",
            f"RELU activation calculation: {f2} = ##relu({f2})",
            f"The result of ReLU activation on {f2}, what is it? = ##relu({f2})",
            f"The output after ReLU activation of {f2}, what does it give? = ##relu({f2})",
            f"Let's apply ReLU activation to {f2} = ##relu({f2})",
            f"Apply the ReLU function to {f2} = ##relu({f2})",
            f"The value after ReLU activation: {f2}, result is = ##relu({f2})",
            f"Calculating the ReLU activation for {f2} = ##relu({f2})",
            f"The result after applying ReLU activation to {f2} = ##relu({f2})",
            f"The output of ReLU activation on {f2}, what is its value? = ##relu({f2})",
            f"Let's determine the output after applying ReLU activation to {f2} = ##relu({f2})",
            f"The value after ReLU activation for {f2} = ##relu({f2})",
            f"Apply ReLU to {f2}, what is the result? = ##relu({f2})",
            f"The output of ReLU activation on {f2}, what does it give? = ##relu({f2})",
            f"Apply ReLU activation to {f2} and provide the result = ##relu({f2})",
            f"RELU({f2}), what does it yield? = ##relu({f2})",
            f"The output after ReLU activation of {f2}, ignoring order = ##relu({f2})",
            f"The result after applying ReLU activation to {f2} = ##relu({f2})",
            f"The value after ReLU activation of {f2}, what is it? = ##relu({f2})",
            f"Calculate the ReLU activation for {f2}, find the answer = ##relu({f2})",
            f"The output after applying ReLU to {f2}, what does it give? = ##relu({f2})",
            f"Let's find the result after applying ReLU activation to {f2} = ##relu({f2})",
            f"Apply ReLU to {f2}, what is the output? = ##relu({f2})",
            f"The result after ReLU activation of {f2}, what is it? = ##relu({f2})",
        ],
        [
            f"Converting {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"{radians} radians in degrees = ##radians_to_degrees({radians})",
            f"Transform {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"The result of converting {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"{radians} radians as degrees = ##radians_to_degrees({radians})",
            f"Degrees equivalent of {radians} radians = ##radians_to_degrees({radians})",
            f"Convert {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"{radians} radians represented in degrees = ##radians_to_degrees({radians})",
            f"{radians} radians, what is it in degrees? = ##radians_to_degrees({radians})",
            f"Calculation: {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"{radians} radians in degrees, what does it give? = ##radians_to_degrees({radians})",
            f"{radians} radians to degrees, find the result = ##radians_to_degrees({radians})",
            f"Degrees: {radians} radians = ##radians_to_degrees({radians})",
            f"Let's convert {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"Find the degrees for {radians} radians = ##radians_to_degrees({radians})",
            f"{radians} radians, its degrees? = ##radians_to_degrees({radians})",
            f"{radians} radians in degrees, result is = ##radians_to_degrees({radians})",
            f"Convert {radians} radians into degrees = ##radians_to_degrees({radians})",
            f"The degrees when you have {radians} radians = ##radians_to_degrees({radians})",
            f"{radians} radians to degrees, find the answer = ##radians_to_degrees({radians})",
            f"Transformation: {radians} radians to degrees = ##radians_to_degrees({radians})",
            f"{radians} radians represented as degrees = ##radians_to_degrees({radians})",
            f"The degrees for {radians} radians, what is it? = ##radians_to_degrees({radians})",
            f"Convert {radians} radians to degrees and tell the result = ##radians_to_degrees({radians})",
            f"Let's find the degrees for {radians} radians = ##radians_to_degrees({radians})",
            f"{radians} radians, what will be its degrees? = ##radians_to_degrees({radians})",
        ],
        [
            f"The product of the numbers {list_str} = ##product({list_str})",
            f"PRODUCT({list_str}) = ##product({list_str})",
            f"Find the product of the list {list_str} = ##product({list_str})",
            f"The result of PRODUCT({list_str}) = ##product({list_str})",
            f"Calculate the product of the numbers {list_str} = ##product({list_str})",
            f"Finding PRODUCT for the list {list_str} = ##product({list_str})",
            f"The multiplication of the numbers {list_str} = ##product({list_str})",
            f"PRODUCT calculation: {list_str} = ##product({list_str})",
            f"The product of the list {list_str}, what is it? = ##product({list_str})",
            f"The product of the list {list_str}, what does it give? = ##product({list_str})",
            f"Let's find the product of the numbers {list_str} = ##product({list_str})",
            f"Find the PRODUCT for the list {list_str} = ##product({list_str})",
            f"The product of the list {list_str}, result is = ##product({list_str})",
            f"Calculating the product of the numbers {list_str} = ##product({list_str})",
            f"The result of multiplying the numbers {list_str} = ##product({list_str})",
            f"The product of the list {list_str}, what is its value? = ##product({list_str})",
            f"Let's determine the product of the numbers {list_str} = ##product({list_str})",
            f"The multiplication result of the numbers {list_str} = ##product({list_str})",
            f"{list_str}, what is their product? = ##product({list_str})",
            f"Finding the product of the numbers {list_str} = ##product({list_str})",
            f"The product of the list {list_str}, what is its value? = ##product({list_str})",
            f"Find the product of the numbers {list_str} and provide the result = ##product({list_str})",
            f"PRODUCT({list_str}), what does it yield? = ##product({list_str})",
            f"The product of the numbers {list_str}, ignoring order = ##product({list_str})",
            f"The result of multiplying the elements in the list {list_str} = ##product({list_str})",
            f"The multiplication of the numbers {list_str}, what is it? = ##product({list_str})",
            f"Calculate the product of the list {list_str}, find the answer = ##product({list_str})",
            f"The product of the numbers {list_str}, what does it give? = ##product({list_str})",
            f"Let's find the result of multiplying the numbers {list_str} = ##product({list_str})",
            f"{list_str}, their product, what is the result? = ##product({list_str})",
        ],
        [
            f"The prime factors of {x} = ##prime_factors({x})",
            f"PRIME_FACTORS({x}) = ##prime_factors({x})",
            f"Find the prime factors of {x} = ##prime_factors({x})",
            f"The result of PRIME_FACTORS({x}) = ##prime_factors({x})",
            f"Calculate the prime factors of {x} = ##prime_factors({x})",
            f"Finding prime factors for {x} = ##prime_factors({x})",
            f"The list of prime numbers that divide {x} = ##prime_factors({x})",
            f"prime factors calculation: {x} = ##prime_factors({x})",
            f"The prime factors of {x}, what are they? = ##prime_factors({x})",
            f"The prime factors of {x}, what does it give? = ##prime_factors({x})",
            f"Let's find the prime factors of {x} = ##prime_factors({x})",
            f"Find the prime factors for {x} = ##prime_factors({x})",
            f"The prime factors of {x}, result is = ##prime_factors({x})",
            f"Calculating the prime factors of {x} = ##prime_factors({x})",
            f"The list of prime numbers that divide {x}, what are they? = ##prime_factors({x})",
            f"The prime factors of {x}, what is their value? = ##prime_factors({x})",
            f"Let's determine the prime factors of {x} = ##prime_factors({x})",
            f"The list of prime numbers that divide {x}, what are they exactly? = ##prime_factors({x})",
            f"{x}, what are its prime factors? = ##prime_factors({x})",
            f"Finding the prime factors of {x} = ##prime_factors({x})",
            f"The prime factors of {x}, what is their value? = ##prime_factors({x})",
            f"Find the prime factors of {x} and provide the result = ##prime_factors({x})",
            f"prime factors({x}), what does it yield? = ##prime_factors({x})",
            f"The prime factors of {x}, ignoring order = ##prime_factors({x})",
            f"The list of prime numbers that divide {x}, what is it? = ##prime_factors({x})",
            f"Calculate the prime factors of {x}, find the answer = ##prime_factors({x})",
            f"The prime factors of {x}, what does it give? = ##prime_factors({x})",
            f"Let's find the list of prime numbers that divide {x} = ##prime_factors({x})",
            f"{x}, its prime factors, what are they? = ##prime_factors({x})",
        ],
        [
            f"Calculate 10 raised to the power of {x} = ##power_of_ten({x})",
            f"POWER_OF_TEN({x}) = ##power_of_ten({x})",
            f"Find the result of 10 to the power of {x} = ##power_of_ten({x})",
            f"The result of raising 10 to the power of {x} = ##power_of_ten({x})",
            f"Performing the power of ten operation with exponent {x} = ##power_of_ten({x})",
            f"10 raised to the power of {x} = ##power_of_ten({x})",
            f"POWER_OF_TEN calculation: {x} = ##power_of_ten({x})",
            f"The result after raising 10 to the power of {x}, what is it? = ##power_of_ten({x})",
            f"10 to the power of {x}, what does it give? = ##power_of_ten({x})",
            f"Let's find 10 to the power of {x} = ##power_of_ten({x})",
            f"10 to the power of {x}, result is = ##power_of_ten({x})",
            f"Calculating 10 raised to the power of {x} = ##power_of_ten({x})",
            f"The result after raising 10 to the power of {x} = ##power_of_ten({x})",
            f"10 raised to the power of {x}, what is its value? = ##power_of_ten({x})",
            f"Let's determine 10 to the power of {x} = ##power_of_ten({x})",
            f"10 raised to the power of {x} = ##power_of_ten({x})",
            f"10 to the power of {x}, what is the result? = ##power_of_ten({x})",
            f"10 to the power of {x}, what does it give? = ##power_of_ten({x})",
            f"10 to the power of {x} and provide the result = ##power_of_ten({x})",
            f"POWER_OF_TEN({x}), what does it yield? = ##power_of_ten({x})",
            f"The result of 10 to the power of {x}, ignoring order = ##power_of_ten({x})",
            f"The result after raising 10 to the power of {x} = ##power_of_ten({x})",
            f"10 raised to the power of {x}, what is it? = ##power_of_ten({x})",
            f"Calculate 10 raised to the power of {x}, find the answer = ##power_of_ten({x})",
            f"The result of 10 to the power of {x}, what does it give? = ##power_of_ten({x})",
            f"Let's find the result after raising 10 to the power of {x} = ##power_of_ten({x})",
            f"10 to the power of {x}, what is the output? = ##power_of_ten({x})",
            f"The result after raising 10 to the power of {x}, what is it? = ##power_of_ten({x})",
        ],
        [
            f"The result of {a} raised to the power of {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"POW_MOD({a}, {b}, {x}) = ##pow_mod({a}, {b}, {x})",
            f"Calculate {a} to the power of {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"The modular exponentiation of {a} raised to {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"The result of POW_MOD({a}, {b}, {x}) = ##pow_mod({a}, {b}, {x})",
            f"Raise {a} to the power of {b} and take modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"Finding POW_MOD for {a}, {b}, and {x} = ##pow_mod({a}, {b}, {x})",
            f"{a} raised to {b} modulo {x}, what does it give? = ##pow_mod({a}, {b}, {x})",
            f"The remainder when {a} to the power of {b} is divided by {x} = ##pow_mod({a}, {b}, {x})",
            f"POW_MOD calculation: {a}, {b}, {x} = ##pow_mod({a}, {b}, {x})",
            f"The result of raising {a} to the power of {b} and taking modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"POW_MOD({a}, {b}, {x}), what does it yield? = ##pow_mod({a}, {b}, {x})",
            f"The modular exponentiation result for {a}, {b}, and {x} = ##pow_mod({a}, {b}, {x})",
            f"Let's find {a} to the power of {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"Find the POW_MOD for {a}, {b}, and {x} = ##pow_mod({a}, {b}, {x})",
            f"The remainder when you raise {a} to the power of {b} and divide by {x} = ##pow_mod({a}, {b}, {x})",
            f"POW_MOD({a}, {b}, {x}), result is = ##pow_mod({a}, {b}, {x})",
            f"The value of {a} raised to {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"The modular exponentiation of {a} to {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"The remainder when {a} to the power of {b} is divided by {x} = ##pow_mod({a}, {b}, {x})",
            f"Calculate POW_MOD({a}, {b}, {x}), find the answer = ##pow_mod({a}, {b}, {x})",
            f"The result of raising {a} to {b} and taking modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"Let's calculate {a} to the power of {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"The modular exponentiation of {a} raised to the power of {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"POW_MOD({a}, {b}, {x}), what is its value? = ##pow_mod({a}, {b}, {x})",
            f"Find the result of {a} raised to the power of {b} modulo {x} = ##pow_mod({a}, {b}, {x})",
            f"The remainder when {a} to the power of {b} is divided by {x} = ##pow_mod({a}, {b}, {x})",
        ],
        [
            f"Calculate 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"POSITIVE_2AB({a}, {b}) = ##positive_2ab({a}, {b})",
            f"Determine the result of 2ab = ##positive_2ab({a}, {b})",
            f"Find the expression 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"The result of calculating 2ab = ##positive_2ab({a}, {b})",
            f"Performing the positive_2ab operation for {a} and {b} = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"POSITIVE_2AB operation: ({a}, {b}) = ##positive_2ab({a}, {b})",
            f"The result after calculating 2ab, what is it? = ##positive_2ab({a}, {b})",
            f"Determine 2ab = ##positive_2ab({a}, {b})",
            f"Let's calculate 2ab = ##positive_2ab({a}, {b})",
            f"The result of 2ab, is it true? = ##positive_2ab({a}, {b})",
            f"Calculating 2ab = ##positive_2ab({a}, {b})",
            f"The result after calculating positive_2ab for {a} and {b} = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}), what is its value? = ##positive_2ab({a}, {b})",
            f"Let's determine the expression 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}), what is the result? = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}), what does it give? = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}) and provide the result = ##positive_2ab({a}, {b})",
            f"POSITIVE_2AB({a}, {b}), what does it yield? = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}), ignoring order = ##positive_2ab({a}, {b})",
            f"The result after calculating the expression 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"Calculate 2({a} * {b}), find the answer = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}), what does it give? = ##positive_2ab({a}, {b})",
            f"Let's find the result after calculating the expression 2({a} * {b}) = ##positive_2ab({a}, {b})",
            f"The expression 2({a} * {b}), what is the output? = ##positive_2ab({a}, {b})",
            f"The result after calculating the expression 2({a} * {b}), what is it? = ##positive_2ab({a}, {b})",
        ],
        [
            f"Calculate the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"PERMUTATION({x}, {y}) = ##permutation({x}, {y})",
            f"Determine the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"Find the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The result of calculating the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"Performing the permutation operation for {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"PERMUTATION calculation: ({x}, {y}) = ##permutation({x}, {y})",
            f"The result after calculating the permutation of {x} objects taken {y} at a time, what is it? = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what does it give? = ##permutation({x}, {y})",
            f"Let's calculate the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, result is = ##permutation({x}, {y})",
            f"Calculating the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation result after calculating the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what is its value? = ##permutation({x}, {y})",
            f"Let's determine the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what is the result? = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what does it give? = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time and provide the result = ##permutation({x}, {y})",
            f"PERMUTATION({x}, {y}), what does it yield? = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, ignoring order = ##permutation({x}, {y})",
            f"The result after calculating the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what is it? = ##permutation({x}, {y})",
            f"Calculate the permutation of {x} objects taken {y} at a time, find the answer = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what does it give? = ##permutation({x}, {y})",
            f"Let's find the result after calculating the permutation of {x} objects taken {y} at a time = ##permutation({x}, {y})",
            f"The permutation of {x} objects taken {y} at a time, what is the output? = ##permutation({x}, {y})",
            f"The result after calculating the permutation of {x} objects taken {y} at a time, what is it? = ##permutation({x}, {y})",
        ],
        [
            f"Calculate the {x}-th root of the number {f1} = ##nth_root({f1}, {x})",
            f"NTH_ROOT({f1}, {x}) = ##nth_root({f1}, {x})",
            f"Find the {x}-th root value for the number {f1} = ##nth_root({f1}, {x})",
            f"The result of taking the {x}-th root of {f1} = ##nth_root({f1}, {x})",
            f"Performing the {x}-th root operation on the number {f1} = ##nth_root({f1}, {x})",
            f"The {x}-th root of the number {f1} = ##nth_root({f1}, {x})",
            f"NTH_ROOT calculation: {f1}, {x} = ##nth_root({f1}, {x})",
            f"The result after taking the {x}-th root of {f1}, what is it? = ##nth_root({f1}, {x})",
            f"The {x}-th root value of {f1}, what does it give? = ##nth_root({f1}, {x})",
            f"Let's find the {x}-th root value of {f1} = ##nth_root({f1}, {x})",
            f"{x}-th root of {f1}, result is = ##nth_root({f1}, {x})",
            f"Calculating the {x}-th root for the number {f1} = ##nth_root({f1}, {x})",
            f"The {x}-th root result after taking the {x}-th root of {f1} = ##nth_root({f1}, {x})",
            f"The {x}-th root of the number {f1}, what is its value? = ##nth_root({f1}, {x})",
            f"Let's determine the {x}-th root of the number {f1} = ##nth_root({f1}, {x})",
            f"The {x}-th root value of {f1} = ##nth_root({f1}, {x})",
            f"{x}-th root {f1}, what is the result? = ##nth_root({f1}, {x})",
            f"The {x}-th root of the number {f1}, what does it give? = ##nth_root({f1}, {x})",
            f"{x}-th root {f1} and provide the result = ##nth_root({f1}, {x})",
            f"NTH_ROOT({f1}, {x}), what does it yield? = ##nth_root({f1}, {x})",
            f"The {x}-th root value of {f1}, ignoring order = ##nth_root({f1}, {x})",
            f"The result after taking the {x}-th root of {f1} = ##nth_root({f1}, {x})",
            f"The {x}-th root of the number {f1}, what is it? = ##nth_root({f1}, {x})",
            f"Calculate the {x}-th root of {f1}, find the answer = ##nth_root({f1}, {x})",
            f"The {x}-th root value of {f1}, what does it give? = ##nth_root({f1}, {x})",
            f"Let's find the result after taking the {x}-th root of {f1} = ##nth_root({f1}, {x})",
            f"{x}-th root {f1}, what is the output? = ##nth_root({f1}, {x})",
            f"The {x}-th root result after taking the {x}-th root of {f1}, what is it? = ##nth_root({f1}, {x})",
        ],
        [
            f"Calculate -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"NEGATIVE_2AB({a}, {b}) = ##negative_2ab({a}, {b})",
            f"Determine the result of -2ab = ##negative_2ab({a}, {b})",
            f"Find the expression -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"The result of calculating -2ab = ##negative_2ab({a}, {b})",
            f"Performing the negative_2ab operation for {a} and {b} = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"NEGATIVE_2AB operation: ({a}, {b}) = ##negative_2ab({a}, {b})",
            f"The result after calculating -2ab, what is it? = ##negative_2ab({a}, {b})",
            f"Determine -2ab = ##negative_2ab({a}, {b})",
            f"Let's calculate -2ab = ##negative_2ab({a}, {b})",
            f"The result of -2ab, is it true? = ##negative_2ab({a}, {b})",
            f"Calculating -2ab = ##negative_2ab({a}, {b})",
            f"The result after calculating negative_2ab for {a} and {b} = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}), what is its value? = ##negative_2ab({a}, {b})",
            f"Let's determine the expression -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}), what is the result? = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}), what does it give? = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}) and provide the result = ##negative_2ab({a}, {b})",
            f"NEGATIVE_2AB({a}, {b}), what does it yield? = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}), ignoring order = ##negative_2ab({a}, {b})",
            f"The result after calculating the expression -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"Calculate -2({a} * {b}), find the answer = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}), what does it give? = ##negative_2ab({a}, {b})",
            f"Let's find the result after calculating the expression -2({a} * {b}) = ##negative_2ab({a}, {b})",
            f"The expression -2({a} * {b}), what is the output? = ##negative_2ab({a}, {b})",
            f"The result after calculating the expression -2({a} * {b}), what is it? = ##negative_2ab({a}, {b})",
        ],
        [
            f"Multiplying {f2} by {f3} = ##multiplication({f2},{f3})",
            f"{f2} times {f3} = ##multiplication({f2},{f3})",
            f"{f2} multiplied by {f3} = ##multiplication({f2},{f3})",
            f"The result of {f2} times {f3} = ##multiplication({f2},{f3})",
            f"{f2} multiplied by {f3}, what is it? = ##multiplication({f2},{f3})",
            f"Calculation: {f2} * {f3} = ##multiplication({f2},{f3})",
            f"{f2} times {f3}, equals? = ##multiplication({f2},{f3})",
            f"Taking {f2} and multiplying by {f3} = ##multiplication({f2},{f3})",
            f"{f2} and {f3} product = ##multiplication({f2},{f3})",
            f"The multiplication of {f2} and {f3} = ##multiplication({f2},{f3})",
            f"{f2} times {f3} is? = ##multiplication({f2},{f3})",
            f"{f2} times {f3} is equal to? = ##multiplication({f2},{f3})",
            f"The product of {f2} and {f3} = ##multiplication({f2},{f3})",
            f"{f2} and {f3} multiplied, the result? = ##multiplication({f2},{f3})",
            f"{f2} multiplied by {f3}, the answer? = ##multiplication({f2},{f3})",
            f"{f2} times {f3}, find the result = ##multiplication({f2},{f3})",
            f"Product: {f2} * {f3} = ##multiplication({f2},{f3})",
            f"Let's multiply {f2} and {f3} = ##multiplication({f2},{f3})",
            f"Find the product of {f2} and {f3} = ##multiplication({f2},{f3})",
            f"{f2} and {f3}, their multiplication? = ##multiplication({f2},{f3})",
            f"{f2} multiplied by {f3}, result is = ##multiplication({f2},{f3})",
            f"{f2} and {f3}, what will be the product? = ##multiplication({f2},{f3})",
            f"Multiplication: {f2} * {f3} = ##multiplication({f2},{f3})",
            f"{f2} times {f3}, result? = ##multiplication({f2},{f3})",
            f"{f2} increased {f3}-fold = ##multiplication({f2},{f3})",
            f"{f3} scaled by {f2} = ##multiplication({f2},{f3})",
            f"The total when {f2} is multiplied by {f3} = ##multiplication({f2},{f3})",
            f"{f2} times {f3} equals? = ##multiplication({f2},{f3})",
            f"{f2} multiplied by {f3}, in decimal = ##multiplication({f2},{f3})",
        ],
        [
            f"The remainder when {a} is divided by {b} = ##modulus({a},{b})",
            f"Finding the modulus of {a} divided by {b} = ##modulus({a},{b})",
            f"The modulus of {a} when divided by {b} = ##modulus({a},{b})",
            f"{a} modulo {b}, what is it? = ##modulus({a},{b})",
            f"Calculate the remainder when {a} is divided by {b} = ##modulus({a},{b})",
            f"The number {a} mod {b} = ##modulus({a},{b})",
            f"The result of {a} modulo {b} = ##modulus({a},{b})",
            f"The remainder when {a} is divided by {b}, what is it? = ##modulus({a},{b})",
            f"Calculation: {a} % {b} = ##modulus({a},{b})",
            f"The remainder of {a} divided by {b}, equals? = ##modulus({a},{b})",
            f"The remaining value when {a} is divided by {b} = ##modulus({a},{b})",
            f"The remainder when {a} is divided by {b}, find it = ##modulus({a},{b})",
            f"The result when {a} modulo {b} = ##modulus({a},{b})",
            f"Let's find the remainder when {a} is divided by {b} = ##modulus({a},{b})",
            f"Find the modulus of {a} divided by {b} = ##modulus({a},{b})",
            f"{a} divided by {b}, what is the leftover? = ##modulus({a},{b})",
            f"The value of {a} modulo {b} = ##modulus({a},{b})",
            f"{a} modulo {b}, result is = ##modulus({a},{b})",
            f"The outcome when {a} is divided by {b}, the remainder? = ##modulus({a},{b})",
            f"The remainder when {a} is divided by {b}, in numbers = ##modulus({a},{b})",
            f"The modulus of {a} divided by {b}, the outcome? = ##modulus({a},{b})",
            f"{a} divided by {b}, what's left? = ##modulus({a},{b})",
            f"The result when {a} is divided by {b}, the remainder? = ##modulus({a},{b})",
            f"{a} divided by {b}, the remainder? = ##modulus({a},{b})",
            f"{a} divided into {b} parts, what remains? = ##modulus({a},{b})",
            f"The value left after {a} is divided by {b} = ##modulus({a},{b})",
            f"The value remaining when {a} is divided by {b} = ##modulus({a},{b})",
        ],
        [
            f"Find the minimum value in the list {list_str} = ##min_value({list_str})",
            f"MIN_VALUE({list_str}) = ##min_value({list_str})",
            f"Determine the smallest value in the list {list_str} = ##min_value({list_str})",
            f"Find the minimum element in the list {list_str} = ##min_value({list_str})",
            f"Locate the lowest value in the list {list_str} = ##min_value({list_str})",
            f"Searching for the minimum value in the list {list_str} = ##min_value({list_str})",
            f"MIN_VALUE calculation: {list_str} = ##min_value({list_str})",
            f"The result after finding the minimum value in the list {list_str}, what is it? = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, what does it give? = ##min_value({list_str})",
            f"Let's find the minimum value in the list {list_str} = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, result is = ##min_value({list_str})",
            f"Searching for the smallest value in the list {list_str} = ##min_value({list_str})",
            f"The minimum element after finding the minimum value in the list {list_str} = ##min_value({list_str})",
            f"The smallest value in the list {list_str}, what is its value? = ##min_value({list_str})",
            f"Let's determine the minimum value in the list {list_str} = ##min_value({list_str})",
            f"The minimum value in the list {list_str} = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, what is the result? = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, what does it give? = ##min_value({list_str})",
            f"The minimum value in the list {list_str} and provide the result = ##min_value({list_str})",
            f"MIN_VALUE({list_str}), what does it yield? = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, ignoring order = ##min_value({list_str})",
            f"The result after finding the minimum value in the list {list_str} = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, what is it? = ##min_value({list_str})",
            f"Calculate the minimum value in the list {list_str}, find the answer = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, what does it give? = ##min_value({list_str})",
            f"Let's find the result after finding the minimum value in the list {list_str} = ##min_value({list_str})",
            f"The minimum value in the list {list_str}, what is the output? = ##min_value({list_str})",
            f"The result after finding the minimum value in the list {list_str}, what is it? = ##min_value({list_str})",
        ],
        [
            f"Calculate the median of the numbers {list_str} = ##median({list_str})",
            f"MEDIAN({list_str}) = ##median({list_str})",
            f"Find the median value for the list {list_str} = ##median({list_str})",
            f"The result of MEDIAN({list_str}) = ##median({list_str})",
            f"Determine the median for the numbers {list_str} = ##median({list_str})",
            f"Calculating the median for the numbers {list_str} = ##median({list_str})",
            f"The median value of the numbers {list_str} = ##median({list_str})",
            f"MEDIAN calculation: {list_str} = ##median({list_str})",
            f"The median of the list {list_str}, what is it? = ##median({list_str})",
            f"The median of the numbers {list_str}, what does it give? = ##median({list_str})",
            f"Let's find the median of the numbers {list_str} = ##median({list_str})",
            f"Find the MEDIAN for the list {list_str} = ##median({list_str})",
            f"The median of the list {list_str}, result is = ##median({list_str})",
            f"Calculating the median of the numbers {list_str} = ##median({list_str})",
            f"The result of finding the median of the numbers {list_str} = ##median({list_str})",
            f"The median of the list {list_str}, what is its value? = ##median({list_str})",
            f"Let's determine the median of the numbers {list_str} = ##median({list_str})",
            f"The median value of the numbers in the list: {list_str} = ##median({list_str})",
            f"{list_str}, what is their median? = ##median({list_str})",
            f"Finding the median of the numbers {list_str} = ##median({list_str})",
            f"The median of the list {list_str}, what is its value? = ##median({list_str})",
            f"Find the median of the numbers {list_str} and provide the result = ##median({list_str})",
            f"MEDIAN({list_str}), what does it yield? = ##median({list_str})",
            f"The median of the numbers {list_str}, ignoring order = ##median({list_str})",
            f"The result of finding the median of the elements in the list {list_str} = ##median({list_str})",
            f"The median value of the numbers {list_str}, what is it? = ##median({list_str})",
            f"Calculate the median of the list {list_str}, find the answer = ##median({list_str})",
            f"The median of the numbers {list_str}, what does it give? = ##median({list_str})",
            f"Let's find the result of finding the median of the numbers {list_str} = ##median({list_str})",
            f"{list_str}, their median, what is the result? = ##median({list_str})",
        ],
        [
            f"Calculate the mean of the numbers {list_str} = ##mean({list_str})",
            f"MEAN({list_str}) = ##mean({list_str})",
            f"Find the average of the numbers {list_str} = ##mean({list_str})",
            f"The result of MEAN({list_str}) = ##mean({list_str})",
            f"Determine the mean value for the list {list_str} = ##mean({list_str})",
            f"Calculating the mean for the numbers {list_str} = ##mean({list_str})",
            f"The average value of the numbers {list_str} = ##mean({list_str})",
            f"MEAN calculation: {list_str} = ##mean({list_str})",
            f"The mean of the list {list_str}, what is it? = ##mean({list_str})",
            f"The mean of the numbers {list_str}, what does it give? = ##mean({list_str})",
            f"Let's find the mean of the numbers {list_str} = ##mean({list_str})",
            f"Find the MEAN for the list {list_str} = ##mean({list_str})",
            f"The mean of the list {list_str}, result is = ##mean({list_str})",
            f"Calculating the average of the numbers {list_str} = ##mean({list_str})",
            f"The result of averaging the numbers {list_str} = ##mean({list_str})",
            f"The mean of the list {list_str}, what is its value? = ##mean({list_str})",
            f"Let's determine the mean of the numbers {list_str} = ##mean({list_str})",
            f"The average value of the numbers in the list: {list_str} = ##mean({list_str})",
            f"{list_str}, what is their mean? = ##mean({list_str})",
            f"Finding the mean of the numbers {list_str} = ##mean({list_str})",
            f"The mean of the list {list_str}, what is its value? = ##mean({list_str})",
            f"Find the average of the numbers {list_str} and provide the result = ##mean({list_str})",
            f"MEAN({list_str}), what does it yield? = ##mean({list_str})",
            f"The mean of the numbers {list_str}, ignoring order = ##mean({list_str})",
            f"The result of averaging the elements in the list {list_str} = ##mean({list_str})",
            f"The average value of the numbers {list_str}, what is it? = ##mean({list_str})",
            f"Calculate the mean of the list {list_str}, find the answer = ##mean({list_str})",
            f"The mean of the numbers {list_str}, what does it give? = ##mean({list_str})",
            f"Let's find the result of averaging the numbers {list_str} = ##mean({list_str})",
            f"{list_str}, their mean, what is the result? = ##mean({list_str})",
        ],
        [
            f"Find the maximum value in the list {list_str} = ##max_value({list_str})",
            f"MAX_VALUE({list_str}) = ##max_value({list_str})",
            f"Determine the largest value in the list {list_str} = ##max_value({list_str})",
            f"Find the maximum element in the list {list_str} = ##max_value({list_str})",
            f"Locate the highest value in the list {list_str} = ##max_value({list_str})",
            f"Searching for the maximum value in the list {list_str} = ##max_value({list_str})",
            f"MAX_VALUE calculation: {list_str} = ##max_value({list_str})",
            f"The result after finding the maximum value in the list {list_str}, what is it? = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, what does it give? = ##max_value({list_str})",
            f"Let's find the maximum value in the list {list_str} = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, result is = ##max_value({list_str})",
            f"Searching for the largest value in the list {list_str} = ##max_value({list_str})",
            f"The maximum element after finding the maximum value in the list {list_str} = ##max_value({list_str})",
            f"The highest value in the list {list_str}, what is its value? = ##max_value({list_str})",
            f"Let's determine the maximum value in the list {list_str} = ##max_value({list_str})",
            f"The maximum value in the list {list_str} = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, what is the result? = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, what does it give? = ##max_value({list_str})",
            f"The maximum value in the list {list_str} and provide the result = ##max_value({list_str})",
            f"MAX_VALUE({list_str}), what does it yield? = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, ignoring order = ##max_value({list_str})",
            f"The result after finding the maximum value in the list {list_str} = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, what is it? = ##max_value({list_str})",
            f"Calculate the maximum value in the list {list_str}, find the answer = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, what does it give? = ##max_value({list_str})",
            f"Let's find the result after finding the maximum value in the list {list_str} = ##max_value({list_str})",
            f"The maximum value in the list {list_str}, what is the output? = ##max_value({list_str})",
            f"The result after finding the maximum value in the list {list_str}, what is it? = ##max_value({list_str})",
        ],
    ]
    return random.choice(examples)


if __name__ == "__main__":
    from masked_token_sample_generator import MaskedTokenSamplesGenerator

    masked_example = MaskedTokenSamplesGenerator.create_masked_token_batches(
        get_batch_twenty_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        masked_example,
        PretrainTasks.MASKED_TOKEN_PREDICTION,
    )
    print(sample)

    from next_token_sample_generator import NextTokenSamplesGenerator

    next_token_example = NextTokenSamplesGenerator.create_next_token_batches(
        get_batch_twenty_example_paragraph(),
    )
    sample = Utility.create_sample_from_example(
        next_token_example,
        PretrainTasks.NEXT_TOKEN_PREDICTION
    )
    print(sample)
